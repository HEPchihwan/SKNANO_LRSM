/* Generated by Cython 3.0.10 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_10" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000AF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__python__lhapdf
#define __PYX_HAVE_API__python__lhapdf
/* Early includes */
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <vector>
#include "../../include/LHAPDF/Version.h"
#include "../../include/LHAPDF/Paths.h"
#include "../../include/LHAPDF/PDF.h"
#include "../../include/LHAPDF/Info.h"
#include "../../include/LHAPDF/Config.h"
#include "../../include/LHAPDF/PDFSet.h"
#include "../../include/LHAPDF/AlphaS.h"
#include "../../include/LHAPDF/PDFInfo.h"
#include "../../include/LHAPDF/Factories.h"
#include "../../include/LHAPDF/Reweighting.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 1
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING "utf8"
#define __Pyx_PyObject_FromString __Pyx_PyStr_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyStr_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "lhapdf.pyx",
  "<stringsource>",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_6python_6lhapdf_PDF;
struct __pyx_obj_6python_6lhapdf_Info;
struct __pyx_obj_6python_6lhapdf_PDFUncertainty;
struct __pyx_obj_6python_6lhapdf_PDFErrInfo;
struct __pyx_obj_6python_6lhapdf_PDFSet;
struct __pyx_obj_6python_6lhapdf_PDFInfo;
struct __pyx_obj_6python_6lhapdf_AlphaS;
struct __pyx_obj___Pyx_EnumMeta;

/* "python/lhapdf.pyx":16
 * 
 * 
 * cpdef enum FlavorScheme:             # <<<<<<<<<<<<<<
 *     # "Available flavour-number schemes for alpha_s running"
 *     FIXED = 0, VARIABLE
 */
enum __pyx_t_6python_6lhapdf_FlavorScheme {
  __pyx_e_6python_6lhapdf_FIXED = 0,
  __pyx_e_6python_6lhapdf_VARIABLE
};

/* "python/lhapdf.pyx":20
 *     FIXED = 0, VARIABLE
 * 
 * cpdef enum PIDCode:             # <<<<<<<<<<<<<<
 *     # "Standard PDF parton ID codes"
 *     ATOP=-6, ABOTTOM=-5, ACHARM=-4, ASTRANGE=-3, AUP=-2, ADOWN=-1,
 */
enum __pyx_t_6python_6lhapdf_PIDCode {
  __pyx_e_6python_6lhapdf_ATOP = -6L,
  __pyx_e_6python_6lhapdf_ABOTTOM = -5L,
  __pyx_e_6python_6lhapdf_ACHARM = -4L,
  __pyx_e_6python_6lhapdf_ASTRANGE = -3L,
  __pyx_e_6python_6lhapdf_AUP = -2L,
  __pyx_e_6python_6lhapdf_ADOWN = -1L,
  __pyx_e_6python_6lhapdf_GLUON = 0,
  __pyx_e_6python_6lhapdf_DOWN = 1,
  __pyx_e_6python_6lhapdf_UP = 2,
  __pyx_e_6python_6lhapdf_STRANGE = 3,
  __pyx_e_6python_6lhapdf_CHARM = 4,
  __pyx_e_6python_6lhapdf_BOTTOM = 5,
  __pyx_e_6python_6lhapdf_TOP = 6
};

/* "python/lhapdf.pyx":27
 * 
 * 
 * cdef class PDF:             # <<<<<<<<<<<<<<
 *     """\
 *     A parton density function for in general several parton flavours,
 */
struct __pyx_obj_6python_6lhapdf_PDF {
  PyObject_HEAD
  struct __pyx_vtabstruct_6python_6lhapdf_PDF *__pyx_vtab;
  LHAPDF::PDF *_ptr;
};


/* "python/lhapdf.pyx":249
 * 
 * 
 * cdef class Info:             # <<<<<<<<<<<<<<
 *     """\
 *     Class that handles the parsing of PDF set metadata in the .info file.
 */
struct __pyx_obj_6python_6lhapdf_Info {
  PyObject_HEAD
  struct __pyx_vtabstruct_6python_6lhapdf_Info *__pyx_vtab;
  LHAPDF::Info *_ptr;
};


/* "python/lhapdf.pyx":313
 * 
 * 
 * cdef class PDFUncertainty:             # <<<<<<<<<<<<<<
 *     """\
 *     A simple struct containing components of a value with uncertainties calculated
 */
struct __pyx_obj_6python_6lhapdf_PDFUncertainty {
  PyObject_HEAD
  struct LHAPDF::PDFUncertainty _obj;
};


/* "python/lhapdf.pyx":442
 * 
 * 
 * cdef class PDFErrInfo:             # <<<<<<<<<<<<<<
 *     """\
 *     A struct giving the breakdown of error computations across the PDF error-set
 */
struct __pyx_obj_6python_6lhapdf_PDFErrInfo {
  PyObject_HEAD
  struct LHAPDF::PDFErrInfo _obj;
};


/* "python/lhapdf.pyx":494
 * 
 * 
 * cdef class PDFSet:             # <<<<<<<<<<<<<<
 *     """\
 *     A collection of PDFs with related fits, most typically a central PDF and a
 */
struct __pyx_obj_6python_6lhapdf_PDFSet {
  PyObject_HEAD
  struct __pyx_vtabstruct_6python_6lhapdf_PDFSet *__pyx_vtab;
  LHAPDF::PDFSet *_ptr;
};


/* "python/lhapdf.pyx":650
 * 
 * 
 * cdef class PDFInfo(Info):             # <<<<<<<<<<<<<<
 *     """\
 *     A class handling the metadata that defines a given PDF.
 */
struct __pyx_obj_6python_6lhapdf_PDFInfo {
  struct __pyx_obj_6python_6lhapdf_Info __pyx_base;
  PyObject *_parent;
};


/* "python/lhapdf.pyx":692
 * 
 * 
 * cdef class AlphaS:             # <<<<<<<<<<<<<<
 *     """\
 *     Interface to alpha_s calculations using various schemes.
 */
struct __pyx_obj_6python_6lhapdf_AlphaS {
  PyObject_HEAD
  struct __pyx_vtabstruct_6python_6lhapdf_AlphaS *__pyx_vtab;
  LHAPDF::AlphaS *_ptr;
  PyObject *_parent;
};


/* "EnumBase":16
 * 
 * @cython.internal
 * cdef class __Pyx_EnumMeta(type):             # <<<<<<<<<<<<<<
 *     def __init__(cls, name, parents, dct):
 *         type.__init__(cls, name, parents, dct)
 */
struct __pyx_obj___Pyx_EnumMeta {
  PyHeapTypeObject __pyx_base;
};



/* "python/lhapdf.pyx":27
 * 
 * 
 * cdef class PDF:             # <<<<<<<<<<<<<<
 *     """\
 *     A parton density function for in general several parton flavours,
 */

struct __pyx_vtabstruct_6python_6lhapdf_PDF {
  PyObject *(*set_ptr)(struct __pyx_obj_6python_6lhapdf_PDF *, LHAPDF::PDF *);
  PyObject *(*_set)(struct __pyx_obj_6python_6lhapdf_PDF *);
  PyObject *(*_info)(struct __pyx_obj_6python_6lhapdf_PDF *);
};
static struct __pyx_vtabstruct_6python_6lhapdf_PDF *__pyx_vtabptr_6python_6lhapdf_PDF;


/* "python/lhapdf.pyx":249
 * 
 * 
 * cdef class Info:             # <<<<<<<<<<<<<<
 *     """\
 *     Class that handles the parsing of PDF set metadata in the .info file.
 */

struct __pyx_vtabstruct_6python_6lhapdf_Info {
  PyObject *(*set_ptr)(struct __pyx_obj_6python_6lhapdf_Info *, LHAPDF::Info *);
};
static struct __pyx_vtabstruct_6python_6lhapdf_Info *__pyx_vtabptr_6python_6lhapdf_Info;


/* "python/lhapdf.pyx":494
 * 
 * 
 * cdef class PDFSet:             # <<<<<<<<<<<<<<
 *     """\
 *     A collection of PDFs with related fits, most typically a central PDF and a
 */

struct __pyx_vtabstruct_6python_6lhapdf_PDFSet {
  PyObject *(*set_ptr)(struct __pyx_obj_6python_6lhapdf_PDFSet *, LHAPDF::PDFSet *);
};
static struct __pyx_vtabstruct_6python_6lhapdf_PDFSet *__pyx_vtabptr_6python_6lhapdf_PDFSet;


/* "python/lhapdf.pyx":650
 * 
 * 
 * cdef class PDFInfo(Info):             # <<<<<<<<<<<<<<
 *     """\
 *     A class handling the metadata that defines a given PDF.
 */

struct __pyx_vtabstruct_6python_6lhapdf_PDFInfo {
  struct __pyx_vtabstruct_6python_6lhapdf_Info __pyx_base;
  PyObject *(*set_parent)(struct __pyx_obj_6python_6lhapdf_PDFInfo *, PyObject *);
};
static struct __pyx_vtabstruct_6python_6lhapdf_PDFInfo *__pyx_vtabptr_6python_6lhapdf_PDFInfo;


/* "python/lhapdf.pyx":692
 * 
 * 
 * cdef class AlphaS:             # <<<<<<<<<<<<<<
 *     """\
 *     Interface to alpha_s calculations using various schemes.
 */

struct __pyx_vtabstruct_6python_6lhapdf_AlphaS {
  PyObject *(*set_ptr)(struct __pyx_obj_6python_6lhapdf_AlphaS *, LHAPDF::AlphaS *);
  PyObject *(*set_parent)(struct __pyx_obj_6python_6lhapdf_AlphaS *, PyObject *);
};
static struct __pyx_vtabstruct_6python_6lhapdf_AlphaS *__pyx_vtabptr_6python_6lhapdf_AlphaS;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
#define __Pyx_HasAttr(o, n)  PyObject_HasAttrWithError(o, n)
#else
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* ImportDottedModuleRelFirst.proto */
static PyObject *__Pyx_ImportDottedModuleRelFirst(PyObject *name, PyObject *parts_tuple);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* Py3UpdateBases.proto */
static PyObject* __Pyx_PEP560_update_bases(PyObject *bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* SetNewInClass.proto */
static int __Pyx_SetNewInClass(PyObject *ns, PyObject *name, PyObject *value);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* Globals.proto */
static PyObject* __Pyx_Globals(void);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE LHAPDF::AlphaS::FlavorScheme __Pyx_PyInt_As_LHAPDF_3a__3a_AlphaS_3a__3a_FlavorScheme(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_LHAPDF_3a__3a_AlphaS_3a__3a_FlavorScheme(LHAPDF::AlphaS::FlavorScheme value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(enum __pyx_t_6python_6lhapdf_FlavorScheme value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(enum __pyx_t_6python_6lhapdf_PIDCode value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static PyObject *__pyx_f_6python_6lhapdf_3PDF_set_ptr(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, LHAPDF::PDF *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_6python_6lhapdf_3PDF__set(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6python_6lhapdf_3PDF__info(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6python_6lhapdf_4Info_set_ptr(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self, LHAPDF::Info *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_6python_6lhapdf_6PDFSet_set_ptr(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, LHAPDF::PDFSet *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_6python_6lhapdf_7PDFInfo_set_parent(struct __pyx_obj_6python_6lhapdf_PDFInfo *__pyx_v_self, PyObject *__pyx_v_parent); /* proto*/
static PyObject *__pyx_f_6python_6lhapdf_6AlphaS_set_ptr(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, LHAPDF::AlphaS *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_6python_6lhapdf_6AlphaS_set_parent(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, PyObject *__pyx_v_parent); /* proto*/

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.map" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "libcpp.pair" */

/* Module declarations from "libcpp" */

/* Module declarations from "python.clhapdf" */

/* Module declarations from "python.lhapdf" */
static PyObject *__Pyx_OrderedDict = 0;
static PyObject *__Pyx_EnumBase = 0;
static PyObject *__Pyx_FlagBase = 0;
static PyObject *__Pyx_globals = 0;
static PyObject *__pyx_f_6python_6lhapdf_mkPDF_setmem(std::string, int); /*proto*/
static PyObject *__pyx_f_6python_6lhapdf_mkPDF_lhaid(int); /*proto*/
static PyObject *__pyx_f_6python_6lhapdf_mkPDF_setmemstr(std::string); /*proto*/
static PyObject *__pyx_f_6python_6lhapdf_mkAlphaS_setmem(std::string, int); /*proto*/
static PyObject *__pyx_f_6python_6lhapdf_mkAlphaS_lhaid(int); /*proto*/
static PyObject *__pyx_f_6python_6lhapdf_mkAlphaS_setmemstr(std::string); /*proto*/
static PyObject *__pyx_f_6python_6lhapdf_mkBareAlphaS_(std::string); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(std::vector<std::string>  const &); /*proto*/
static std::string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_pair_to_py_double____double(std::pair<double,double>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(std::vector<std::pair<double,double> >  const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_string____size_t(std::pair<std::string,size_t>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___(std::vector<std::pair<std::string,size_t> >  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e____3e___(std::vector<std::vector<std::pair<std::string,size_t> > >  const &); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *); /*proto*/
static PyObject *__Pyx_Enum_6python_6lhapdf_enum__dunderpyx_t_6python_6lhapdf_FlavorScheme_to_py(enum __pyx_t_6python_6lhapdf_FlavorScheme); /*proto*/
static PyObject *__pyx_unpickle___Pyx_EnumMeta__set_state(struct __pyx_obj___Pyx_EnumMeta *, PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "python.lhapdf"
extern int __pyx_module_is_main_python__lhapdf;
int __pyx_module_is_main_python__lhapdf = 0;

/* Implementation of "python.lhapdf" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "";
static const char __pyx_k_Q[] = "Q";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_Q2[] = "Q2";
static const char __pyx_k_UP[] = "UP";
static const char __pyx_k__3[] = ".";
static const char __pyx_k__4[] = "*";
static const char __pyx_k_cl[] = "cl";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_mz[] = "mz";
static const char __pyx_k_nf[] = "nf";
static const char __pyx_k_q2[] = "q2";
static const char __pyx_k_x1[] = "x1";
static const char __pyx_k_x2[] = "x2";
static const char __pyx_k_AUP[] = "AUP";
static const char __pyx_k_PDF[] = "PDF";
static const char __pyx_k_TOP[] = "TOP";
static const char __pyx_k_ast[] = "ast";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_dct[] = "dct";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_id1[] = "id1";
static const char __pyx_k_id2[] = "id2";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_mem[] = "mem";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_pid[] = "pid";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_rtn[] = "rtn";
static const char __pyx_k_s_s[] = "%s.%s";
static const char __pyx_k_set[] = "set";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_unc[] = "unc";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_ATOP[] = "ATOP";
static const char __pyx_k_DOWN[] = "DOWN";
static const char __pyx_k_Info[] = "Info";
static const char __pyx_k__147[] = "?";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_enum[] = "enum";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_izip[] = "izip";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_objs[] = "objs";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_ptrs[] = "ptrs";
static const char __pyx_k_punc[] = "punc";
static const char __pyx_k_real[] = "real";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_vals[] = "vals";
static const char __pyx_k_xMin[] = "xMin";
static const char __pyx_k_xfxQ[] = "xfxQ";
static const char __pyx_k_yaml[] = "yaml";
static const char __pyx_k_ADOWN[] = "ADOWN";
static const char __pyx_k_CHARM[] = "CHARM";
static const char __pyx_k_FIXED[] = "FIXED";
static const char __pyx_k_GLUON[] = "GLUON";
static const char __pyx_k_aschk[] = "aschk";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_eachq[] = "eachq";
static const char __pyx_k_eachx[] = "eachx";
static const char __pyx_k_flavs[] = "flavs";
static const char __pyx_k_mkPDF[] = "mkPDF";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_paths[] = "paths";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_q2Max[] = "q2Max";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_s_s_d[] = "<%s.%s: %d>";
static const char __pyx_k_setMZ[] = "setMZ";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_valsA[] = "valsA";
static const char __pyx_k_valsB[] = "valsB";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_xfxQ2[] = "xfxQ2";
static const char __pyx_k_ACHARM[] = "ACHARM";
static const char __pyx_k_AlphaS[] = "AlphaS";
static const char __pyx_k_BOTTOM[] = "BOTTOM";
static const char __pyx_k_PDFSet[] = "PDFSet";
static const char __pyx_k_alphaS[] = "alphaS";
static const char __pyx_k_alphas[] = "alphas";
static const char __pyx_k_as_str[] = "as_str";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_eachq2[] = "eachq2";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_errmax[] = "errmax";
static const char __pyx_k_errmin[] = "errmin";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_mkPDFs[] = "mkPDFs";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_newpdf[] = "newpdf";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_qparts[] = "qparts";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_scheme[] = "scheme";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_vlevel[] = "vlevel";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_ABOTTOM[] = "ABOTTOM";
static const char __pyx_k_IntEnum[] = "IntEnum";
static const char __pyx_k_IntFlag[] = "IntFlag";
static const char __pyx_k_PDFInfo[] = "PDFInfo";
static const char __pyx_k_PDF_set[] = "PDF.set";
static const char __pyx_k_PIDCode[] = "PIDCode";
static const char __pyx_k_STRANGE[] = "STRANGE";
static const char __pyx_k_alphasQ[] = "alphasQ";
static const char __pyx_k_as_type[] = "as_type";
static const char __pyx_k_basepdf[] = "basepdf";
static const char __pyx_k_central[] = "central";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_eachpid[] = "eachpid";
static const char __pyx_k_errSize[] = "errSize";
static const char __pyx_k_errplus[] = "errplus";
static const char __pyx_k_flavors[] = "flavors";
static const char __pyx_k_has_key[] = "has_key";
static const char __pyx_k_members[] = "__members__";
static const char __pyx_k_newpath[] = "newpath";
static const char __pyx_k_parents[] = "parents";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_print_2[] = "_print";
static const char __pyx_k_randoms[] = "randoms";
static const char __pyx_k_setname[] = "setname";
static const char __pyx_k_version[] = "version";
static const char __pyx_k_ASTRANGE[] = "ASTRANGE";
static const char __pyx_k_EnumBase[] = "EnumBase";
static const char __pyx_k_EnumType[] = "EnumType";
static const char __pyx_k_PDF_info[] = "PDF.info";
static const char __pyx_k_PDF_xfxQ[] = "PDF.xfxQ";
static const char __pyx_k_VARIABLE[] = "VARIABLE";
static const char __pyx_k_alphasQ2[] = "alphasQ2";
static const char __pyx_k_errminus[] = "errminus";
static const char __pyx_k_errparts[] = "errparts";
static const char __pyx_k_fallback[] = "fallback";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_findFile[] = "findFile";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_inRangeQ[] = "inRangeQ";
static const char __pyx_k_inRangeX[] = "inRangeX";
static const char __pyx_k_lhapdfID[] = "lhapdfID";
static const char __pyx_k_memberID[] = "memberID";
static const char __pyx_k_mkAlphaS[] = "mkAlphaS";
static const char __pyx_k_module_2[] = "module";
static const char __pyx_k_newpaths[] = "newpaths";
static const char __pyx_k_orderQCD[] = "orderQCD";
static const char __pyx_k_pdftypes[] = "pdftypes";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setPaths[] = "setPaths";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_weightxQ[] = "weightxQ";
static const char __pyx_k_Info_keys[] = "Info.keys";
static const char __pyx_k_PDF_xfxQ2[] = "PDF.xfxQ2";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_confLevel[] = "confLevel";
static const char __pyx_k_errorType[] = "errorType";
static const char __pyx_k_full_load[] = "full_load";
static const char __pyx_k_getConfig[] = "getConfig";
static const char __pyx_k_getPDFSet[] = "getPDFSet";
static const char __pyx_k_get_entry[] = "get_entry";
static const char __pyx_k_hasFlavor[] = "hasFlavor";
static const char __pyx_k_inRangeQ2[] = "inRangeQ2";
static const char __pyx_k_inRangeXQ[] = "inRangeXQ";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_quarkMass[] = "quarkMass";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_setLambda[] = "setLambda";
static const char __pyx_k_set_entry[] = "set_entry";
static const char __pyx_k_verbosity[] = "verbosity";
static const char __pyx_k_version_2[] = "__version__";
static const char __pyx_k_weightxQ2[] = "weightxQ2";
static const char __pyx_k_weightxxQ[] = "weightxxQ";
static const char __pyx_k_PDFErrInfo[] = "PDFErrInfo<{}, {}%>";
static const char __pyx_k_PDF__print[] = "PDF._print";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_errmax_par[] = "errmax_par";
static const char __pyx_k_errmax_pdf[] = "errmax_pdf";
static const char __pyx_k_errmin_par[] = "errmin_par";
static const char __pyx_k_errmin_pdf[] = "errmin_pdf";
static const char __pyx_k_inRangeXQ2[] = "inRangeXQ2";
static const char __pyx_k_keys_local[] = "keys_local";
static const char __pyx_k_lhapdf_pyx[] = "lhapdf.pyx";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_symmetrise[] = "symmetrise";
static const char __pyx_k_weightxxQ2[] = "weightxxQ2";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_OrderedDict[] = "OrderedDict";
static const char __pyx_k_PDFSet_keys[] = "PDFSet.keys";
static const char __pyx_k_PDF_alphasQ[] = "PDF.alphasQ";
static const char __pyx_k_PDF_flavors[] = "PDF.flavors";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_alternative[] = "alternative";
static const char __pyx_k_arg0_string[] = "arg0_string";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_correlation[] = "correlation";
static const char __pyx_k_errplus_par[] = "errplus_par";
static const char __pyx_k_errplus_pdf[] = "errplus_pdf";
static const char __pyx_k_mro_entries[] = "__mro_entries__";
static const char __pyx_k_numFlavorsQ[] = "numFlavorsQ";
static const char __pyx_k_pathsAppend[] = "pathsAppend";
static const char __pyx_k_setAlphaSMZ[] = "setAlphaSMZ";
static const char __pyx_k_setOrderQCD[] = "setOrderQCD";
static const char __pyx_k_uncertainty[] = "uncertainty";
static const char __pyx_k_AlphaS_setMZ[] = "AlphaS.setMZ";
static const char __pyx_k_FlavorScheme[] = "FlavorScheme";
static const char __pyx_k_Info_has_key[] = "Info.has_key";
static const char __pyx_k_PDFErrInfo_2[] = "PDFErrInfo";
static const char __pyx_k_PDFSet_mkPDF[] = "PDFSet.mkPDF";
static const char __pyx_k_PDF_alphasQ2[] = "PDF.alphasQ2";
static const char __pyx_k_PDF_inRangeQ[] = "PDF.inRangeQ";
static const char __pyx_k_PDF_inRangeX[] = "PDF.inRangeX";
static const char __pyx_k_Pyx_EnumBase[] = "__Pyx_EnumBase";
static const char __pyx_k_Pyx_FlagBase[] = "__Pyx_FlagBase";
static const char __pyx_k_checkPdfType[] = "_checkPdfType";
static const char __pyx_k_errminus_par[] = "errminus_par";
static const char __pyx_k_errminus_pdf[] = "errminus_pdf";
static const char __pyx_k_flavorScheme[] = "flavorScheme";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_literal_eval[] = "literal_eval";
static const char __pyx_k_member_names[] = "_member_names_";
static const char __pyx_k_mkBareAlphaS[] = "mkBareAlphaS";
static const char __pyx_k_numFlavorsQ2[] = "numFlavorsQ2";
static const char __pyx_k_pathsPrepend[] = "pathsPrepend";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_setQuarkMass[] = "setQuarkMass";
static const char __pyx_k_setVerbosity[] = "setVerbosity";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_PDFSet__print[] = "PDFSet._print";
static const char __pyx_k_PDFSet_mkPDFs[] = "PDFSet.mkPDFs";
static const char __pyx_k_PDF_hasFlavor[] = "PDF.hasFlavor";
static const char __pyx_k_PDF_inRangeQ2[] = "PDF.inRangeQ2";
static const char __pyx_k_PDF_inRangeXQ[] = "PDF.inRangeXQ";
static const char __pyx_k_PDF_quarkMass[] = "PDF.quarkMass";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_has_key_local[] = "has_key_local";
static const char __pyx_k_init_subclass[] = "__init_subclass__";
static const char __pyx_k_python_lhapdf[] = "python.lhapdf";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_AlphaS_alphasQ[] = "AlphaS.alphasQ";
static const char __pyx_k_Info_get_entry[] = "Info.get_entry";
static const char __pyx_k_Info_set_entry[] = "Info.set_entry";
static const char __pyx_k_PDFSet_has_key[] = "PDFSet.has_key";
static const char __pyx_k_PDFUncertainty[] = "PDFUncertainty";
static const char __pyx_k_PDF_inRangeXQ2[] = "PDF.inRangeXQ2";
static const char __pyx_k_quarkThreshold[] = "quarkThreshold";
static const char __pyx_k_AlphaS_alphasQ2[] = "AlphaS.alphasQ2";
static const char __pyx_k_AlphaS_orderQCD[] = "AlphaS.orderQCD";
static const char __pyx_k_Info_keys_local[] = "Info.keys_local";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setFlavorScheme[] = "setFlavorScheme";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_AlphaS_quarkMass[] = "AlphaS.quarkMass";
static const char __pyx_k_AlphaS_setLambda[] = "AlphaS.setLambda";
static const char __pyx_k_PDFSet_get_entry[] = "PDFSet.get_entry";
static const char __pyx_k_availablePDFSets[] = "availablePDFSets";
static const char __pyx_k_PDFSet_keys_local[] = "PDFSet.keys_local";
static const char __pyx_k_setQuarkThreshold[] = "setQuarkThreshold";
static const char __pyx_k_AlphaS_numFlavorsQ[] = "AlphaS.numFlavorsQ";
static const char __pyx_k_AlphaS_setAlphaSMZ[] = "AlphaS.setAlphaSMZ";
static const char __pyx_k_AlphaS_setOrderQCD[] = "AlphaS.setOrderQCD";
static const char __pyx_k_Info_has_key_local[] = "Info.has_key_local";
static const char __pyx_k_PDFSet_correlation[] = "PDFSet.correlation";
static const char __pyx_k_PDFSet_uncertainty[] = "PDFSet.uncertainty";
static const char __pyx_k_PDF_quarkThreshold[] = "PDF.quarkThreshold";
static const char __pyx_k_Pyx_EnumBase___new[] = "__Pyx_EnumBase.__new__";
static const char __pyx_k_Pyx_EnumBase___str[] = "__Pyx_EnumBase.__str__";
static const char __pyx_k_Pyx_FlagBase___new[] = "__Pyx_FlagBase.__new__";
static const char __pyx_k_Pyx_FlagBase___str[] = "__Pyx_FlagBase.__str__";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_AlphaS_flavorScheme[] = "AlphaS.flavorScheme";
static const char __pyx_k_AlphaS_numFlavorsQ2[] = "AlphaS.numFlavorsQ2";
static const char __pyx_k_AlphaS_setQuarkMass[] = "AlphaS.setQuarkMass";
static const char __pyx_k_Info_d_keys_d_local[] = "Info<{:d} keys, {:d} local>";
static const char __pyx_k_PDF___reduce_cython[] = "PDF.__reduce_cython__";
static const char __pyx_k_Pyx_EnumBase___repr[] = "__Pyx_EnumBase.__repr__";
static const char __pyx_k_Pyx_FlagBase___repr[] = "__Pyx_FlagBase.__repr__";
static const char __pyx_k_Info___reduce_cython[] = "Info.__reduce_cython__";
static const char __pyx_k_PDFSet__checkPdfType[] = "PDFSet._checkPdfType";
static const char __pyx_k_PDFSet_has_key_local[] = "PDFSet.has_key_local";
static const char __pyx_k_Unknown_enum_value_s[] = "Unknown enum value: '%s'";
static const char __pyx_k_AlphaS_quarkThreshold[] = "AlphaS.quarkThreshold";
static const char __pyx_k_PDF___setstate_cython[] = "PDF.__setstate_cython__";
static const char __pyx_k_AlphaS___reduce_cython[] = "AlphaS.__reduce_cython__";
static const char __pyx_k_AlphaS_d_loop_aS_MZ_3f[] = "AlphaS<{:d} loop, {}, aS(MZ) = {:.3f}>";
static const char __pyx_k_AlphaS_setFlavorScheme[] = "AlphaS.setFlavorScheme";
static const char __pyx_k_Info___setstate_cython[] = "Info.__setstate_cython__";
static const char __pyx_k_PDFInfo_d_keys_d_local[] = "PDFInfo<{}: {:d} keys, {:d} local>";
static const char __pyx_k_PDFSet___reduce_cython[] = "PDFSet.__reduce_cython__";
static const char __pyx_k_Unknown_call_signature[] = "Unknown call signature";
static const char __pyx_k_randomValueFromHessian[] = "randomValueFromHessian";
static const char __pyx_k_PDFInfo___reduce_cython[] = "PDFInfo.__reduce_cython__";
static const char __pyx_k_AlphaS___setstate_cython[] = "AlphaS.__setstate_cython__";
static const char __pyx_k_AlphaS_setQuarkThreshold[] = "AlphaS.setQuarkThreshold";
static const char __pyx_k_PDFSet___setstate_cython[] = "PDFSet.__setstate_cython__";
static const char __pyx_k_PDFInfo___setstate_cython[] = "PDFInfo.__setstate_cython__";
static const char __pyx_k_PDFErrInfo___reduce_cython[] = "PDFErrInfo.__reduce_cython__";
static const char __pyx_k_pyx_unpickle___Pyx_EnumMeta[] = "__pyx_unpickle___Pyx_EnumMeta";
static const char __pyx_k_PDFErrInfo___setstate_cython[] = "PDFErrInfo.__setstate_cython__";
static const char __pyx_k_PDFSet_d_vars_d_keys_d_local[] = "PDFSet<{}, {:d} {} vars: {:d} keys, {:d} local>";
static const char __pyx_k_Pyx_EnumMeta___reduce_cython[] = "__Pyx_EnumMeta.__reduce_cython__";
static const char __pyx_k_PDFSet_randomValueFromHessian[] = "PDFSet.randomValueFromHessian";
static const char __pyx_k_PDFUncertainty___reduce_cython[] = "PDFUncertainty.__reduce_cython__";
static const char __pyx_k_Pyx_EnumMeta___setstate_cython[] = "__Pyx_EnumMeta.__setstate_cython__";
static const char __pyx_k_PDFUncertainty_2_1e_2_1e_2_1e_d[] = "PDFUncertainty<{:2.1e} +{:2.1e} -{:2.1e}; {:d} components>";
static const char __pyx_k_PDF_d_LHAPDF_ID_d_d_flavors_x_2[] = "PDF<{}/{:d}, {}, LHAPDF ID={:d}; {:d} flavors, x > {:2.1e}, Q2 < {:2.1e} GeV2>";
static const char __pyx_k_Pickling_of_struct_members_such[] = "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)";
static const char __pyx_k_Wrong_number_of_arguments_given[] = "Wrong number of arguments given to xfxQ: 2 or 3 required, %d provided";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())";
static const char __pyx_k_PDFUncertainty___setstate_cython[] = "PDFUncertainty.__setstate_cython__";
static const char __pyx_k_You_can_only_set_the_flavor_sche[] = "You can only set the flavor scheme to FIXED or VARIABLE";
static const char __pyx_k_self__obj_cannot_be_converted_to[] = "self._obj cannot be converted to a Python object for pickling";
static const char __pyx_k_self__ptr_cannot_be_converted_to[] = "self._ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_Wrong_number_of_arguments_given_2[] = "Wrong number of arguments given to xfxQ2: 2 or 3 required, %d provided";
/* #### Code section: decls ### */
static int __pyx_pf_8EnumBase_14__Pyx_EnumMeta___init__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls, PyObject *__pyx_v_name, PyObject *__pyx_v_parents, PyObject *__pyx_v_dct); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_2__iter__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_4__getitem__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_6__reduce_cython__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_8__setstate_cython__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase___new__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_value, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase_4__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_FlagBase___new__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_value, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_FlagBase_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_FlagBase_4__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8EnumBase___pyx_unpickle___Pyx_EnumMeta(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_6python_6lhapdf_3PDF___dealloc__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_8memberID___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_8lhapdfID___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_4type___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_11description___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_8orderQCD___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_4xMin___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_4xMax___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_5q2Min___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_5q2Max___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_2alphasQ(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_4alphasQ2(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q2); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_6xfxQ(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_8xfxQ2(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_10inRangeQ(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_12inRangeQ2(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q2); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_14inRangeX(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_16inRangeXQ(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_q); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_18inRangeXQ2(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_q2); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_20flavors(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_22hasFlavor(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_pid); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_24quarkMass(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, int __pyx_v_id); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_26quarkThreshold(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, int __pyx_v_id); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_28set(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_30info(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_32_print(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_34__repr__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_3PDF_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_4Info_keys(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_4Info_2keys_local(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_4Info_4has_key(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_4Info_6has_key_local(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_4Info_8get_entry(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fallback); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_4Info_10set_entry(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_4Info_12__repr__(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_4Info_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_4Info_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_7central___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_7errplus___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_8errminus___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_7errsymm___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_5scale___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_11errplus_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_12errminus_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_11errsymm_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_11errplus_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_12errminus_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_11errsymm_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_7err_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_8errparts___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_4errs___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_8errs_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_6errmin___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_6errmax___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_8errrange___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_10errmin_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_10errmax_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_12errrange_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_10errmin_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_10errmax_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_12errrange_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty___repr__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_6qparts___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_9confLevel___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_7errType___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_8coreType___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_10qpartNames___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_8nmemCore___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_7nmemPar___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo___repr__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_6python_6lhapdf_6PDFSet___dealloc__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6python_6lhapdf_6PDFSet_2__len__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_4size___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_7errSize___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_9errorSize___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_4name___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_11description___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_8lhapdfID___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_11dataversion___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_9errorType___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_9errorInfo___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_14errorConfLevel___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_4mkPDF(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_mem); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_6mkPDFs(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_8keys(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_10keys_local(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_12has_key(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_14has_key_local(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_16get_entry(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fallback); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_18_print(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_20uncertainty(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_vals, PyObject *__pyx_v_cl, PyObject *__pyx_v_alternative); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_22correlation(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_valsA, PyObject *__pyx_v_valsB); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_24randomValueFromHessian(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_vals, PyObject *__pyx_v_randoms, PyObject *__pyx_v_symmetrise); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_26_checkPdfType(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_pdftypes); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_28__repr__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_30__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_32__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_7PDFInfo___repr__(struct __pyx_obj_6python_6lhapdf_PDFInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_7PDFInfo_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_7PDFInfo_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFInfo *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_4type___get__(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_alphasQ(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_2alphasQ2(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q2); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_4numFlavorsQ(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_6numFlavorsQ2(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q2); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_8quarkMass(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_10setQuarkMass(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_12quarkThreshold(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_14setQuarkThreshold(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_16orderQCD(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_18setOrderQCD(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_order); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_20setMZ(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_mz); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_22setAlphaSMZ(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_alphas); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_24setLambda(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id, double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_26setFlavorScheme(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, PyObject *__pyx_v_scheme, int __pyx_v_nf); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_28flavorScheme(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, PyObject *__pyx_v_as_str); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_30__repr__(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_getConfig(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_2getPDFSet(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_setname); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_4mkPDFs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_setname); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_6mkPDF(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_8mkAlphaS(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_10mkBareAlphaS(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_as_type); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_12weightxQ(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id, double __pyx_v_x, double __pyx_v_Q, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_14weightxQ2(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id, double __pyx_v_x, double __pyx_v_Q2, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_16weightxxQ(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id1, int __pyx_v_id2, double __pyx_v_x1, double __pyx_v_x2, double __pyx_v_Q, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_18weightxxQ2(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id1, int __pyx_v_id2, double __pyx_v_x1, double __pyx_v_x2, double __pyx_v_Q2, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_20version(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_22verbosity(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_24setVerbosity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vlevel); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_26availablePDFSets(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_28paths(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_30setPaths(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_newpaths); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_32pathsPrepend(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_newpath); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_34pathsAppend(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_newpath); /* proto */
static PyObject *__pyx_pf_6python_6lhapdf_36findFile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_tp_new_6python_6lhapdf_PDF(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6python_6lhapdf_Info(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6python_6lhapdf_PDFUncertainty(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6python_6lhapdf_PDFErrInfo(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6python_6lhapdf_PDFSet(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6python_6lhapdf_PDFInfo(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6python_6lhapdf_AlphaS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, 0, 0, 0, 0};
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_6python_6lhapdf_PDF;
  PyObject *__pyx_type_6python_6lhapdf_Info;
  PyObject *__pyx_type_6python_6lhapdf_PDFUncertainty;
  PyObject *__pyx_type_6python_6lhapdf_PDFErrInfo;
  PyObject *__pyx_type_6python_6lhapdf_PDFSet;
  PyObject *__pyx_type_6python_6lhapdf_PDFInfo;
  PyObject *__pyx_type_6python_6lhapdf_AlphaS;
  PyObject *__Pyx_EnumMeta;
  #endif
  PyTypeObject *__pyx_ptype_6python_6lhapdf_PDF;
  PyTypeObject *__pyx_ptype_6python_6lhapdf_Info;
  PyTypeObject *__pyx_ptype_6python_6lhapdf_PDFUncertainty;
  PyTypeObject *__pyx_ptype_6python_6lhapdf_PDFErrInfo;
  PyTypeObject *__pyx_ptype_6python_6lhapdf_PDFSet;
  PyTypeObject *__pyx_ptype_6python_6lhapdf_PDFInfo;
  PyTypeObject *__pyx_ptype_6python_6lhapdf_AlphaS;
  PyTypeObject *__pyx_ptype___Pyx_EnumMeta;
  PyObject *__pyx_kp_s_;
  PyObject *__pyx_n_s_ABOTTOM;
  PyObject *__pyx_n_s_ACHARM;
  PyObject *__pyx_n_s_ADOWN;
  PyObject *__pyx_n_s_ASTRANGE;
  PyObject *__pyx_n_s_ATOP;
  PyObject *__pyx_n_s_AUP;
  PyObject *__pyx_n_s_AlphaS;
  PyObject *__pyx_n_s_AlphaS___reduce_cython;
  PyObject *__pyx_n_s_AlphaS___setstate_cython;
  PyObject *__pyx_n_s_AlphaS_alphasQ;
  PyObject *__pyx_n_s_AlphaS_alphasQ2;
  PyObject *__pyx_kp_s_AlphaS_d_loop_aS_MZ_3f;
  PyObject *__pyx_n_s_AlphaS_flavorScheme;
  PyObject *__pyx_n_s_AlphaS_numFlavorsQ;
  PyObject *__pyx_n_s_AlphaS_numFlavorsQ2;
  PyObject *__pyx_n_s_AlphaS_orderQCD;
  PyObject *__pyx_n_s_AlphaS_quarkMass;
  PyObject *__pyx_n_s_AlphaS_quarkThreshold;
  PyObject *__pyx_n_s_AlphaS_setAlphaSMZ;
  PyObject *__pyx_n_s_AlphaS_setFlavorScheme;
  PyObject *__pyx_n_s_AlphaS_setLambda;
  PyObject *__pyx_n_s_AlphaS_setMZ;
  PyObject *__pyx_n_s_AlphaS_setOrderQCD;
  PyObject *__pyx_n_s_AlphaS_setQuarkMass;
  PyObject *__pyx_n_s_AlphaS_setQuarkThreshold;
  PyObject *__pyx_n_s_BOTTOM;
  PyObject *__pyx_n_s_CHARM;
  PyObject *__pyx_n_s_DOWN;
  PyObject *__pyx_n_s_EnumBase;
  PyObject *__pyx_n_s_EnumType;
  PyObject *__pyx_n_s_FIXED;
  PyObject *__pyx_n_s_FlavorScheme;
  PyObject *__pyx_n_s_GLUON;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
  PyObject *__pyx_n_s_Info;
  PyObject *__pyx_n_s_Info___reduce_cython;
  PyObject *__pyx_n_s_Info___setstate_cython;
  PyObject *__pyx_kp_s_Info_d_keys_d_local;
  PyObject *__pyx_n_s_Info_get_entry;
  PyObject *__pyx_n_s_Info_has_key;
  PyObject *__pyx_n_s_Info_has_key_local;
  PyObject *__pyx_n_s_Info_keys;
  PyObject *__pyx_n_s_Info_keys_local;
  PyObject *__pyx_n_s_Info_set_entry;
  PyObject *__pyx_n_s_IntEnum;
  PyObject *__pyx_n_s_IntFlag;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_n_s_OrderedDict;
  PyObject *__pyx_n_s_PDF;
  PyObject *__pyx_kp_s_PDFErrInfo;
  PyObject *__pyx_n_s_PDFErrInfo_2;
  PyObject *__pyx_n_s_PDFErrInfo___reduce_cython;
  PyObject *__pyx_n_s_PDFErrInfo___setstate_cython;
  PyObject *__pyx_n_s_PDFInfo;
  PyObject *__pyx_n_s_PDFInfo___reduce_cython;
  PyObject *__pyx_n_s_PDFInfo___setstate_cython;
  PyObject *__pyx_kp_s_PDFInfo_d_keys_d_local;
  PyObject *__pyx_n_s_PDFSet;
  PyObject *__pyx_n_s_PDFSet___reduce_cython;
  PyObject *__pyx_n_s_PDFSet___setstate_cython;
  PyObject *__pyx_n_s_PDFSet__checkPdfType;
  PyObject *__pyx_n_s_PDFSet__print;
  PyObject *__pyx_n_s_PDFSet_correlation;
  PyObject *__pyx_kp_s_PDFSet_d_vars_d_keys_d_local;
  PyObject *__pyx_n_s_PDFSet_get_entry;
  PyObject *__pyx_n_s_PDFSet_has_key;
  PyObject *__pyx_n_s_PDFSet_has_key_local;
  PyObject *__pyx_n_s_PDFSet_keys;
  PyObject *__pyx_n_s_PDFSet_keys_local;
  PyObject *__pyx_n_s_PDFSet_mkPDF;
  PyObject *__pyx_n_s_PDFSet_mkPDFs;
  PyObject *__pyx_n_s_PDFSet_randomValueFromHessian;
  PyObject *__pyx_n_s_PDFSet_uncertainty;
  PyObject *__pyx_n_s_PDFUncertainty;
  PyObject *__pyx_kp_s_PDFUncertainty_2_1e_2_1e_2_1e_d;
  PyObject *__pyx_n_s_PDFUncertainty___reduce_cython;
  PyObject *__pyx_n_s_PDFUncertainty___setstate_cython;
  PyObject *__pyx_n_s_PDF___reduce_cython;
  PyObject *__pyx_n_s_PDF___setstate_cython;
  PyObject *__pyx_n_s_PDF__print;
  PyObject *__pyx_n_s_PDF_alphasQ;
  PyObject *__pyx_n_s_PDF_alphasQ2;
  PyObject *__pyx_kp_s_PDF_d_LHAPDF_ID_d_d_flavors_x_2;
  PyObject *__pyx_n_s_PDF_flavors;
  PyObject *__pyx_n_s_PDF_hasFlavor;
  PyObject *__pyx_n_s_PDF_inRangeQ;
  PyObject *__pyx_n_s_PDF_inRangeQ2;
  PyObject *__pyx_n_s_PDF_inRangeX;
  PyObject *__pyx_n_s_PDF_inRangeXQ;
  PyObject *__pyx_n_s_PDF_inRangeXQ2;
  PyObject *__pyx_n_s_PDF_info;
  PyObject *__pyx_n_s_PDF_quarkMass;
  PyObject *__pyx_n_s_PDF_quarkThreshold;
  PyObject *__pyx_n_s_PDF_set;
  PyObject *__pyx_n_s_PDF_xfxQ;
  PyObject *__pyx_n_s_PDF_xfxQ2;
  PyObject *__pyx_n_s_PIDCode;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_kp_s_Pickling_of_struct_members_such;
  PyObject *__pyx_n_s_Pyx_EnumBase;
  PyObject *__pyx_n_s_Pyx_EnumBase___new;
  PyObject *__pyx_n_s_Pyx_EnumBase___repr;
  PyObject *__pyx_n_s_Pyx_EnumBase___str;
  PyObject *__pyx_n_s_Pyx_EnumMeta___reduce_cython;
  PyObject *__pyx_n_s_Pyx_EnumMeta___setstate_cython;
  PyObject *__pyx_n_s_Pyx_FlagBase;
  PyObject *__pyx_n_s_Pyx_FlagBase___new;
  PyObject *__pyx_n_s_Pyx_FlagBase___repr;
  PyObject *__pyx_n_s_Pyx_FlagBase___str;
  PyObject *__pyx_n_s_Q;
  PyObject *__pyx_n_s_Q2;
  PyObject *__pyx_n_s_STRANGE;
  PyObject *__pyx_n_s_TOP;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_UP;
  PyObject *__pyx_kp_s_Unknown_call_signature;
  PyObject *__pyx_kp_s_Unknown_enum_value_s;
  PyObject *__pyx_n_s_VARIABLE;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_kp_s_Wrong_number_of_arguments_given;
  PyObject *__pyx_kp_s_Wrong_number_of_arguments_given_2;
  PyObject *__pyx_kp_s_You_can_only_set_the_flavor_sche;
  PyObject *__pyx_n_s__147;
  PyObject *__pyx_kp_u__3;
  PyObject *__pyx_n_s__4;
  PyObject *__pyx_n_s_alphaS;
  PyObject *__pyx_n_s_alphas;
  PyObject *__pyx_n_s_alphasQ;
  PyObject *__pyx_n_s_alphasQ2;
  PyObject *__pyx_n_s_alternative;
  PyObject *__pyx_n_s_arg0_string;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_as_str;
  PyObject *__pyx_n_s_as_type;
  PyObject *__pyx_n_s_aschk;
  PyObject *__pyx_n_s_ast;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_availablePDFSets;
  PyObject *__pyx_n_s_basepdf;
  PyObject *__pyx_n_s_central;
  PyObject *__pyx_n_s_checkPdfType;
  PyObject *__pyx_n_s_cl;
  PyObject *__pyx_n_s_class;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_cls;
  PyObject *__pyx_n_s_collections;
  PyObject *__pyx_n_s_confLevel;
  PyObject *__pyx_n_s_correlation;
  PyObject *__pyx_n_s_dct;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dict_2;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_eachpid;
  PyObject *__pyx_n_s_eachq;
  PyObject *__pyx_n_s_eachq2;
  PyObject *__pyx_n_s_eachx;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_enum;
  PyObject *__pyx_n_s_errSize;
  PyObject *__pyx_n_s_errmax;
  PyObject *__pyx_n_s_errmax_par;
  PyObject *__pyx_n_s_errmax_pdf;
  PyObject *__pyx_n_s_errmin;
  PyObject *__pyx_n_s_errmin_par;
  PyObject *__pyx_n_s_errmin_pdf;
  PyObject *__pyx_n_s_errminus;
  PyObject *__pyx_n_s_errminus_par;
  PyObject *__pyx_n_s_errminus_pdf;
  PyObject *__pyx_n_s_errorType;
  PyObject *__pyx_n_s_errparts;
  PyObject *__pyx_n_s_errplus;
  PyObject *__pyx_n_s_errplus_par;
  PyObject *__pyx_n_s_errplus_pdf;
  PyObject *__pyx_n_s_fallback;
  PyObject *__pyx_n_s_filename;
  PyObject *__pyx_n_s_findFile;
  PyObject *__pyx_n_s_flavorScheme;
  PyObject *__pyx_n_s_flavors;
  PyObject *__pyx_n_s_flavs;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_n_s_full_load;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_getConfig;
  PyObject *__pyx_n_s_getPDFSet;
  PyObject *__pyx_n_s_get_entry;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_hasFlavor;
  PyObject *__pyx_n_s_has_key;
  PyObject *__pyx_n_s_has_key_local;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_id;
  PyObject *__pyx_n_s_id1;
  PyObject *__pyx_n_s_id2;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_inRangeQ;
  PyObject *__pyx_n_s_inRangeQ2;
  PyObject *__pyx_n_s_inRangeX;
  PyObject *__pyx_n_s_inRangeXQ;
  PyObject *__pyx_n_s_inRangeXQ2;
  PyObject *__pyx_n_s_info;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_init_subclass;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_itertools;
  PyObject *__pyx_n_s_izip;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_n_s_keys_local;
  PyObject *__pyx_n_s_lhapdfID;
  PyObject *__pyx_kp_s_lhapdf_pyx;
  PyObject *__pyx_n_s_literal_eval;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_mem;
  PyObject *__pyx_n_s_memberID;
  PyObject *__pyx_n_s_member_names;
  PyObject *__pyx_n_s_members;
  PyObject *__pyx_n_s_metaclass;
  PyObject *__pyx_n_s_mkAlphaS;
  PyObject *__pyx_n_s_mkBareAlphaS;
  PyObject *__pyx_n_s_mkPDF;
  PyObject *__pyx_n_s_mkPDFs;
  PyObject *__pyx_n_s_module;
  PyObject *__pyx_n_s_module_2;
  PyObject *__pyx_n_s_mro_entries;
  PyObject *__pyx_n_s_mz;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_n_s_newpath;
  PyObject *__pyx_n_s_newpaths;
  PyObject *__pyx_n_s_newpdf;
  PyObject *__pyx_n_s_nf;
  PyObject *__pyx_n_s_numFlavorsQ;
  PyObject *__pyx_n_s_numFlavorsQ2;
  PyObject *__pyx_n_s_obj;
  PyObject *__pyx_n_s_objs;
  PyObject *__pyx_n_s_order;
  PyObject *__pyx_n_s_orderQCD;
  PyObject *__pyx_n_s_p;
  PyObject *__pyx_n_s_parents;
  PyObject *__pyx_n_s_path;
  PyObject *__pyx_n_s_paths;
  PyObject *__pyx_n_s_pathsAppend;
  PyObject *__pyx_n_s_pathsPrepend;
  PyObject *__pyx_n_s_pdftypes;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_n_s_pid;
  PyObject *__pyx_n_s_prepare;
  PyObject *__pyx_n_s_print;
  PyObject *__pyx_n_s_print_2;
  PyObject *__pyx_n_s_ptr;
  PyObject *__pyx_n_s_ptrs;
  PyObject *__pyx_n_s_punc;
  PyObject *__pyx_kp_s_python_lhapdf;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle___Pyx_EnumMeta;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_q;
  PyObject *__pyx_n_s_q2;
  PyObject *__pyx_n_s_q2Max;
  PyObject *__pyx_n_s_qparts;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_quarkMass;
  PyObject *__pyx_n_s_quarkThreshold;
  PyObject *__pyx_n_s_randomValueFromHessian;
  PyObject *__pyx_n_s_randoms;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_real;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_repr;
  PyObject *__pyx_n_s_res;
  PyObject *__pyx_n_s_rtn;
  PyObject *__pyx_n_s_s;
  PyObject *__pyx_kp_s_s_s;
  PyObject *__pyx_kp_s_s_s_d;
  PyObject *__pyx_n_s_scheme;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self__obj_cannot_be_converted_to;
  PyObject *__pyx_kp_s_self__ptr_cannot_be_converted_to;
  PyObject *__pyx_n_s_set;
  PyObject *__pyx_n_s_setAlphaSMZ;
  PyObject *__pyx_n_s_setFlavorScheme;
  PyObject *__pyx_n_s_setLambda;
  PyObject *__pyx_n_s_setMZ;
  PyObject *__pyx_n_s_setOrderQCD;
  PyObject *__pyx_n_s_setPaths;
  PyObject *__pyx_n_s_setQuarkMass;
  PyObject *__pyx_n_s_setQuarkThreshold;
  PyObject *__pyx_n_s_setVerbosity;
  PyObject *__pyx_n_s_set_entry;
  PyObject *__pyx_n_s_set_name;
  PyObject *__pyx_n_s_setname;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_n_s_str;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_symmetrise;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_type;
  PyObject *__pyx_n_s_unc;
  PyObject *__pyx_n_s_uncertainty;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_use_setstate;
  PyObject *__pyx_n_s_v;
  PyObject *__pyx_n_s_val;
  PyObject *__pyx_n_s_vals;
  PyObject *__pyx_n_s_valsA;
  PyObject *__pyx_n_s_valsB;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_values;
  PyObject *__pyx_n_s_verbosity;
  PyObject *__pyx_n_s_version;
  PyObject *__pyx_n_s_version_2;
  PyObject *__pyx_n_s_vlevel;
  PyObject *__pyx_n_s_weightxQ;
  PyObject *__pyx_n_s_weightxQ2;
  PyObject *__pyx_n_s_weightxxQ;
  PyObject *__pyx_n_s_weightxxQ2;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_n_s_x1;
  PyObject *__pyx_n_s_x2;
  PyObject *__pyx_n_s_xMin;
  PyObject *__pyx_n_s_xfxQ;
  PyObject *__pyx_n_s_xfxQ2;
  PyObject *__pyx_n_s_xrange;
  PyObject *__pyx_n_s_yaml;
  PyObject *__pyx_n_s_zip;
  PyObject *__pyx_float_5eneg_2;
  PyObject *__pyx_float_91_2;
  PyObject *__pyx_float_68_268949;
  PyObject *__pyx_int_222419149;
  PyObject *__pyx_int_228825662;
  PyObject *__pyx_int_238750788;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__73;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__79;
  PyObject *__pyx_tuple__81;
  PyObject *__pyx_tuple__83;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__95;
  PyObject *__pyx_codeobj__8;
  PyObject *__pyx_tuple__100;
  PyObject *__pyx_tuple__102;
  PyObject *__pyx_tuple__104;
  PyObject *__pyx_tuple__106;
  PyObject *__pyx_tuple__108;
  PyObject *__pyx_tuple__110;
  PyObject *__pyx_tuple__114;
  PyObject *__pyx_tuple__116;
  PyObject *__pyx_tuple__118;
  PyObject *__pyx_tuple__120;
  PyObject *__pyx_tuple__123;
  PyObject *__pyx_tuple__125;
  PyObject *__pyx_tuple__127;
  PyObject *__pyx_tuple__128;
  PyObject *__pyx_tuple__130;
  PyObject *__pyx_tuple__132;
  PyObject *__pyx_tuple__136;
  PyObject *__pyx_tuple__140;
  PyObject *__pyx_tuple__142;
  PyObject *__pyx_tuple__145;
  PyObject *__pyx_codeobj__10;
  PyObject *__pyx_codeobj__12;
  PyObject *__pyx_codeobj__15;
  PyObject *__pyx_codeobj__16;
  PyObject *__pyx_codeobj__17;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__45;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__48;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__50;
  PyObject *__pyx_codeobj__51;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__54;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__58;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__60;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__62;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__64;
  PyObject *__pyx_codeobj__66;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__70;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__72;
  PyObject *__pyx_codeobj__74;
  PyObject *__pyx_codeobj__75;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__80;
  PyObject *__pyx_codeobj__82;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__86;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__88;
  PyObject *__pyx_codeobj__89;
  PyObject *__pyx_codeobj__90;
  PyObject *__pyx_codeobj__91;
  PyObject *__pyx_codeobj__92;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__94;
  PyObject *__pyx_codeobj__96;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__98;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__103;
  PyObject *__pyx_codeobj__105;
  PyObject *__pyx_codeobj__107;
  PyObject *__pyx_codeobj__109;
  PyObject *__pyx_codeobj__111;
  PyObject *__pyx_codeobj__112;
  PyObject *__pyx_codeobj__113;
  PyObject *__pyx_codeobj__115;
  PyObject *__pyx_codeobj__117;
  PyObject *__pyx_codeobj__119;
  PyObject *__pyx_codeobj__121;
  PyObject *__pyx_codeobj__122;
  PyObject *__pyx_codeobj__124;
  PyObject *__pyx_codeobj__126;
  PyObject *__pyx_codeobj__129;
  PyObject *__pyx_codeobj__131;
  PyObject *__pyx_codeobj__133;
  PyObject *__pyx_codeobj__134;
  PyObject *__pyx_codeobj__135;
  PyObject *__pyx_codeobj__137;
  PyObject *__pyx_codeobj__138;
  PyObject *__pyx_codeobj__139;
  PyObject *__pyx_codeobj__141;
  PyObject *__pyx_codeobj__143;
  PyObject *__pyx_codeobj__144;
  PyObject *__pyx_codeobj__146;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_6python_6lhapdf_PDF);
  Py_CLEAR(clear_module_state->__pyx_type_6python_6lhapdf_PDF);
  Py_CLEAR(clear_module_state->__pyx_ptype_6python_6lhapdf_Info);
  Py_CLEAR(clear_module_state->__pyx_type_6python_6lhapdf_Info);
  Py_CLEAR(clear_module_state->__pyx_ptype_6python_6lhapdf_PDFUncertainty);
  Py_CLEAR(clear_module_state->__pyx_type_6python_6lhapdf_PDFUncertainty);
  Py_CLEAR(clear_module_state->__pyx_ptype_6python_6lhapdf_PDFErrInfo);
  Py_CLEAR(clear_module_state->__pyx_type_6python_6lhapdf_PDFErrInfo);
  Py_CLEAR(clear_module_state->__pyx_ptype_6python_6lhapdf_PDFSet);
  Py_CLEAR(clear_module_state->__pyx_type_6python_6lhapdf_PDFSet);
  Py_CLEAR(clear_module_state->__pyx_ptype_6python_6lhapdf_PDFInfo);
  Py_CLEAR(clear_module_state->__pyx_type_6python_6lhapdf_PDFInfo);
  Py_CLEAR(clear_module_state->__pyx_ptype_6python_6lhapdf_AlphaS);
  Py_CLEAR(clear_module_state->__pyx_type_6python_6lhapdf_AlphaS);
  Py_CLEAR(clear_module_state->__pyx_ptype___Pyx_EnumMeta);
  Py_CLEAR(clear_module_state->__Pyx_EnumMeta);
  Py_CLEAR(clear_module_state->__pyx_kp_s_);
  Py_CLEAR(clear_module_state->__pyx_n_s_ABOTTOM);
  Py_CLEAR(clear_module_state->__pyx_n_s_ACHARM);
  Py_CLEAR(clear_module_state->__pyx_n_s_ADOWN);
  Py_CLEAR(clear_module_state->__pyx_n_s_ASTRANGE);
  Py_CLEAR(clear_module_state->__pyx_n_s_ATOP);
  Py_CLEAR(clear_module_state->__pyx_n_s_AUP);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_alphasQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_alphasQ2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_AlphaS_d_loop_aS_MZ_3f);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_flavorScheme);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_numFlavorsQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_numFlavorsQ2);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_orderQCD);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_quarkMass);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_quarkThreshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_setAlphaSMZ);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_setFlavorScheme);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_setLambda);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_setMZ);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_setOrderQCD);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_setQuarkMass);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlphaS_setQuarkThreshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_BOTTOM);
  Py_CLEAR(clear_module_state->__pyx_n_s_CHARM);
  Py_CLEAR(clear_module_state->__pyx_n_s_DOWN);
  Py_CLEAR(clear_module_state->__pyx_n_s_EnumBase);
  Py_CLEAR(clear_module_state->__pyx_n_s_EnumType);
  Py_CLEAR(clear_module_state->__pyx_n_s_FIXED);
  Py_CLEAR(clear_module_state->__pyx_n_s_FlavorScheme);
  Py_CLEAR(clear_module_state->__pyx_n_s_GLUON);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_Info);
  Py_CLEAR(clear_module_state->__pyx_n_s_Info___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Info___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Info_d_keys_d_local);
  Py_CLEAR(clear_module_state->__pyx_n_s_Info_get_entry);
  Py_CLEAR(clear_module_state->__pyx_n_s_Info_has_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_Info_has_key_local);
  Py_CLEAR(clear_module_state->__pyx_n_s_Info_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_Info_keys_local);
  Py_CLEAR(clear_module_state->__pyx_n_s_Info_set_entry);
  Py_CLEAR(clear_module_state->__pyx_n_s_IntEnum);
  Py_CLEAR(clear_module_state->__pyx_n_s_IntFlag);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderedDict);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF);
  Py_CLEAR(clear_module_state->__pyx_kp_s_PDFErrInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFErrInfo_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFErrInfo___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFErrInfo___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFInfo___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFInfo___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_s_PDFInfo_d_keys_d_local);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet__checkPdfType);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet__print);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet_correlation);
  Py_CLEAR(clear_module_state->__pyx_kp_s_PDFSet_d_vars_d_keys_d_local);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet_get_entry);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet_has_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet_has_key_local);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet_keys_local);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet_mkPDF);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet_mkPDFs);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet_randomValueFromHessian);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFSet_uncertainty);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFUncertainty);
  Py_CLEAR(clear_module_state->__pyx_kp_s_PDFUncertainty_2_1e_2_1e_2_1e_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFUncertainty___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDFUncertainty___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF__print);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_alphasQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_alphasQ2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_PDF_d_LHAPDF_ID_d_d_flavors_x_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_flavors);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_hasFlavor);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_inRangeQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_inRangeQ2);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_inRangeX);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_inRangeXQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_inRangeXQ2);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_quarkMass);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_quarkThreshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_set);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_xfxQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_PDF_xfxQ2);
  Py_CLEAR(clear_module_state->__pyx_n_s_PIDCode);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Pickling_of_struct_members_such);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pyx_EnumBase);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pyx_EnumBase___new);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pyx_EnumBase___repr);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pyx_EnumBase___str);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pyx_EnumMeta___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pyx_EnumMeta___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pyx_FlagBase);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pyx_FlagBase___new);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pyx_FlagBase___repr);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pyx_FlagBase___str);
  Py_CLEAR(clear_module_state->__pyx_n_s_Q);
  Py_CLEAR(clear_module_state->__pyx_n_s_Q2);
  Py_CLEAR(clear_module_state->__pyx_n_s_STRANGE);
  Py_CLEAR(clear_module_state->__pyx_n_s_TOP);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_UP);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Unknown_call_signature);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Unknown_enum_value_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_VARIABLE);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Wrong_number_of_arguments_given);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Wrong_number_of_arguments_given_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_You_can_only_set_the_flavor_sche);
  Py_CLEAR(clear_module_state->__pyx_n_s__147);
  Py_CLEAR(clear_module_state->__pyx_kp_u__3);
  Py_CLEAR(clear_module_state->__pyx_n_s__4);
  Py_CLEAR(clear_module_state->__pyx_n_s_alphaS);
  Py_CLEAR(clear_module_state->__pyx_n_s_alphas);
  Py_CLEAR(clear_module_state->__pyx_n_s_alphasQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_alphasQ2);
  Py_CLEAR(clear_module_state->__pyx_n_s_alternative);
  Py_CLEAR(clear_module_state->__pyx_n_s_arg0_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_as_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_as_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_aschk);
  Py_CLEAR(clear_module_state->__pyx_n_s_ast);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_availablePDFSets);
  Py_CLEAR(clear_module_state->__pyx_n_s_basepdf);
  Py_CLEAR(clear_module_state->__pyx_n_s_central);
  Py_CLEAR(clear_module_state->__pyx_n_s_checkPdfType);
  Py_CLEAR(clear_module_state->__pyx_n_s_cl);
  Py_CLEAR(clear_module_state->__pyx_n_s_class);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_cls);
  Py_CLEAR(clear_module_state->__pyx_n_s_collections);
  Py_CLEAR(clear_module_state->__pyx_n_s_confLevel);
  Py_CLEAR(clear_module_state->__pyx_n_s_correlation);
  Py_CLEAR(clear_module_state->__pyx_n_s_dct);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_n_s_eachpid);
  Py_CLEAR(clear_module_state->__pyx_n_s_eachq);
  Py_CLEAR(clear_module_state->__pyx_n_s_eachq2);
  Py_CLEAR(clear_module_state->__pyx_n_s_eachx);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_enum);
  Py_CLEAR(clear_module_state->__pyx_n_s_errSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_errmax);
  Py_CLEAR(clear_module_state->__pyx_n_s_errmax_par);
  Py_CLEAR(clear_module_state->__pyx_n_s_errmax_pdf);
  Py_CLEAR(clear_module_state->__pyx_n_s_errmin);
  Py_CLEAR(clear_module_state->__pyx_n_s_errmin_par);
  Py_CLEAR(clear_module_state->__pyx_n_s_errmin_pdf);
  Py_CLEAR(clear_module_state->__pyx_n_s_errminus);
  Py_CLEAR(clear_module_state->__pyx_n_s_errminus_par);
  Py_CLEAR(clear_module_state->__pyx_n_s_errminus_pdf);
  Py_CLEAR(clear_module_state->__pyx_n_s_errorType);
  Py_CLEAR(clear_module_state->__pyx_n_s_errparts);
  Py_CLEAR(clear_module_state->__pyx_n_s_errplus);
  Py_CLEAR(clear_module_state->__pyx_n_s_errplus_par);
  Py_CLEAR(clear_module_state->__pyx_n_s_errplus_pdf);
  Py_CLEAR(clear_module_state->__pyx_n_s_fallback);
  Py_CLEAR(clear_module_state->__pyx_n_s_filename);
  Py_CLEAR(clear_module_state->__pyx_n_s_findFile);
  Py_CLEAR(clear_module_state->__pyx_n_s_flavorScheme);
  Py_CLEAR(clear_module_state->__pyx_n_s_flavors);
  Py_CLEAR(clear_module_state->__pyx_n_s_flavs);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_n_s_full_load);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_getConfig);
  Py_CLEAR(clear_module_state->__pyx_n_s_getPDFSet);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_entry);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_hasFlavor);
  Py_CLEAR(clear_module_state->__pyx_n_s_has_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_has_key_local);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_id1);
  Py_CLEAR(clear_module_state->__pyx_n_s_id2);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_inRangeQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_inRangeQ2);
  Py_CLEAR(clear_module_state->__pyx_n_s_inRangeX);
  Py_CLEAR(clear_module_state->__pyx_n_s_inRangeXQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_inRangeXQ2);
  Py_CLEAR(clear_module_state->__pyx_n_s_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_subclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_itertools);
  Py_CLEAR(clear_module_state->__pyx_n_s_izip);
  Py_CLEAR(clear_module_state->__pyx_n_s_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys_local);
  Py_CLEAR(clear_module_state->__pyx_n_s_lhapdfID);
  Py_CLEAR(clear_module_state->__pyx_kp_s_lhapdf_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_literal_eval);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_mem);
  Py_CLEAR(clear_module_state->__pyx_n_s_memberID);
  Py_CLEAR(clear_module_state->__pyx_n_s_member_names);
  Py_CLEAR(clear_module_state->__pyx_n_s_members);
  Py_CLEAR(clear_module_state->__pyx_n_s_metaclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_mkAlphaS);
  Py_CLEAR(clear_module_state->__pyx_n_s_mkBareAlphaS);
  Py_CLEAR(clear_module_state->__pyx_n_s_mkPDF);
  Py_CLEAR(clear_module_state->__pyx_n_s_mkPDFs);
  Py_CLEAR(clear_module_state->__pyx_n_s_module);
  Py_CLEAR(clear_module_state->__pyx_n_s_module_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_mro_entries);
  Py_CLEAR(clear_module_state->__pyx_n_s_mz);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_n_s_newpath);
  Py_CLEAR(clear_module_state->__pyx_n_s_newpaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_newpdf);
  Py_CLEAR(clear_module_state->__pyx_n_s_nf);
  Py_CLEAR(clear_module_state->__pyx_n_s_numFlavorsQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_numFlavorsQ2);
  Py_CLEAR(clear_module_state->__pyx_n_s_obj);
  Py_CLEAR(clear_module_state->__pyx_n_s_objs);
  Py_CLEAR(clear_module_state->__pyx_n_s_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_orderQCD);
  Py_CLEAR(clear_module_state->__pyx_n_s_p);
  Py_CLEAR(clear_module_state->__pyx_n_s_parents);
  Py_CLEAR(clear_module_state->__pyx_n_s_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_paths);
  Py_CLEAR(clear_module_state->__pyx_n_s_pathsAppend);
  Py_CLEAR(clear_module_state->__pyx_n_s_pathsPrepend);
  Py_CLEAR(clear_module_state->__pyx_n_s_pdftypes);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_s_pid);
  Py_CLEAR(clear_module_state->__pyx_n_s_prepare);
  Py_CLEAR(clear_module_state->__pyx_n_s_print);
  Py_CLEAR(clear_module_state->__pyx_n_s_print_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptr);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptrs);
  Py_CLEAR(clear_module_state->__pyx_n_s_punc);
  Py_CLEAR(clear_module_state->__pyx_kp_s_python_lhapdf);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle___Pyx_EnumMeta);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_q);
  Py_CLEAR(clear_module_state->__pyx_n_s_q2);
  Py_CLEAR(clear_module_state->__pyx_n_s_q2Max);
  Py_CLEAR(clear_module_state->__pyx_n_s_qparts);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_quarkMass);
  Py_CLEAR(clear_module_state->__pyx_n_s_quarkThreshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_randomValueFromHessian);
  Py_CLEAR(clear_module_state->__pyx_n_s_randoms);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_real);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_repr);
  Py_CLEAR(clear_module_state->__pyx_n_s_res);
  Py_CLEAR(clear_module_state->__pyx_n_s_rtn);
  Py_CLEAR(clear_module_state->__pyx_n_s_s);
  Py_CLEAR(clear_module_state->__pyx_kp_s_s_s);
  Py_CLEAR(clear_module_state->__pyx_kp_s_s_s_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_scheme);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__obj_cannot_be_converted_to);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__ptr_cannot_be_converted_to);
  Py_CLEAR(clear_module_state->__pyx_n_s_set);
  Py_CLEAR(clear_module_state->__pyx_n_s_setAlphaSMZ);
  Py_CLEAR(clear_module_state->__pyx_n_s_setFlavorScheme);
  Py_CLEAR(clear_module_state->__pyx_n_s_setLambda);
  Py_CLEAR(clear_module_state->__pyx_n_s_setMZ);
  Py_CLEAR(clear_module_state->__pyx_n_s_setOrderQCD);
  Py_CLEAR(clear_module_state->__pyx_n_s_setPaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_setQuarkMass);
  Py_CLEAR(clear_module_state->__pyx_n_s_setQuarkThreshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_setVerbosity);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_entry);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_setname);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_str);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_symmetrise);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_unc);
  Py_CLEAR(clear_module_state->__pyx_n_s_uncertainty);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_val);
  Py_CLEAR(clear_module_state->__pyx_n_s_vals);
  Py_CLEAR(clear_module_state->__pyx_n_s_valsA);
  Py_CLEAR(clear_module_state->__pyx_n_s_valsB);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_values);
  Py_CLEAR(clear_module_state->__pyx_n_s_verbosity);
  Py_CLEAR(clear_module_state->__pyx_n_s_version);
  Py_CLEAR(clear_module_state->__pyx_n_s_version_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_vlevel);
  Py_CLEAR(clear_module_state->__pyx_n_s_weightxQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_weightxQ2);
  Py_CLEAR(clear_module_state->__pyx_n_s_weightxxQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_weightxxQ2);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_n_s_x1);
  Py_CLEAR(clear_module_state->__pyx_n_s_x2);
  Py_CLEAR(clear_module_state->__pyx_n_s_xMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_xfxQ);
  Py_CLEAR(clear_module_state->__pyx_n_s_xfxQ2);
  Py_CLEAR(clear_module_state->__pyx_n_s_xrange);
  Py_CLEAR(clear_module_state->__pyx_n_s_yaml);
  Py_CLEAR(clear_module_state->__pyx_n_s_zip);
  Py_CLEAR(clear_module_state->__pyx_float_5eneg_2);
  Py_CLEAR(clear_module_state->__pyx_float_91_2);
  Py_CLEAR(clear_module_state->__pyx_float_68_268949);
  Py_CLEAR(clear_module_state->__pyx_int_222419149);
  Py_CLEAR(clear_module_state->__pyx_int_228825662);
  Py_CLEAR(clear_module_state->__pyx_int_238750788);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__73);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__79);
  Py_CLEAR(clear_module_state->__pyx_tuple__81);
  Py_CLEAR(clear_module_state->__pyx_tuple__83);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__95);
  Py_CLEAR(clear_module_state->__pyx_codeobj__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__100);
  Py_CLEAR(clear_module_state->__pyx_tuple__102);
  Py_CLEAR(clear_module_state->__pyx_tuple__104);
  Py_CLEAR(clear_module_state->__pyx_tuple__106);
  Py_CLEAR(clear_module_state->__pyx_tuple__108);
  Py_CLEAR(clear_module_state->__pyx_tuple__110);
  Py_CLEAR(clear_module_state->__pyx_tuple__114);
  Py_CLEAR(clear_module_state->__pyx_tuple__116);
  Py_CLEAR(clear_module_state->__pyx_tuple__118);
  Py_CLEAR(clear_module_state->__pyx_tuple__120);
  Py_CLEAR(clear_module_state->__pyx_tuple__123);
  Py_CLEAR(clear_module_state->__pyx_tuple__125);
  Py_CLEAR(clear_module_state->__pyx_tuple__127);
  Py_CLEAR(clear_module_state->__pyx_tuple__128);
  Py_CLEAR(clear_module_state->__pyx_tuple__130);
  Py_CLEAR(clear_module_state->__pyx_tuple__132);
  Py_CLEAR(clear_module_state->__pyx_tuple__136);
  Py_CLEAR(clear_module_state->__pyx_tuple__140);
  Py_CLEAR(clear_module_state->__pyx_tuple__142);
  Py_CLEAR(clear_module_state->__pyx_tuple__145);
  Py_CLEAR(clear_module_state->__pyx_codeobj__10);
  Py_CLEAR(clear_module_state->__pyx_codeobj__12);
  Py_CLEAR(clear_module_state->__pyx_codeobj__15);
  Py_CLEAR(clear_module_state->__pyx_codeobj__16);
  Py_CLEAR(clear_module_state->__pyx_codeobj__17);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__48);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__50);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__54);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__58);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__60);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__62);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__64);
  Py_CLEAR(clear_module_state->__pyx_codeobj__66);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__70);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__72);
  Py_CLEAR(clear_module_state->__pyx_codeobj__74);
  Py_CLEAR(clear_module_state->__pyx_codeobj__75);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__80);
  Py_CLEAR(clear_module_state->__pyx_codeobj__82);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__86);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__88);
  Py_CLEAR(clear_module_state->__pyx_codeobj__89);
  Py_CLEAR(clear_module_state->__pyx_codeobj__90);
  Py_CLEAR(clear_module_state->__pyx_codeobj__91);
  Py_CLEAR(clear_module_state->__pyx_codeobj__92);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__94);
  Py_CLEAR(clear_module_state->__pyx_codeobj__96);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__105);
  Py_CLEAR(clear_module_state->__pyx_codeobj__107);
  Py_CLEAR(clear_module_state->__pyx_codeobj__109);
  Py_CLEAR(clear_module_state->__pyx_codeobj__111);
  Py_CLEAR(clear_module_state->__pyx_codeobj__112);
  Py_CLEAR(clear_module_state->__pyx_codeobj__113);
  Py_CLEAR(clear_module_state->__pyx_codeobj__115);
  Py_CLEAR(clear_module_state->__pyx_codeobj__117);
  Py_CLEAR(clear_module_state->__pyx_codeobj__119);
  Py_CLEAR(clear_module_state->__pyx_codeobj__121);
  Py_CLEAR(clear_module_state->__pyx_codeobj__122);
  Py_CLEAR(clear_module_state->__pyx_codeobj__124);
  Py_CLEAR(clear_module_state->__pyx_codeobj__126);
  Py_CLEAR(clear_module_state->__pyx_codeobj__129);
  Py_CLEAR(clear_module_state->__pyx_codeobj__131);
  Py_CLEAR(clear_module_state->__pyx_codeobj__133);
  Py_CLEAR(clear_module_state->__pyx_codeobj__134);
  Py_CLEAR(clear_module_state->__pyx_codeobj__135);
  Py_CLEAR(clear_module_state->__pyx_codeobj__137);
  Py_CLEAR(clear_module_state->__pyx_codeobj__138);
  Py_CLEAR(clear_module_state->__pyx_codeobj__139);
  Py_CLEAR(clear_module_state->__pyx_codeobj__141);
  Py_CLEAR(clear_module_state->__pyx_codeobj__143);
  Py_CLEAR(clear_module_state->__pyx_codeobj__144);
  Py_CLEAR(clear_module_state->__pyx_codeobj__146);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_6python_6lhapdf_PDF);
  Py_VISIT(traverse_module_state->__pyx_type_6python_6lhapdf_PDF);
  Py_VISIT(traverse_module_state->__pyx_ptype_6python_6lhapdf_Info);
  Py_VISIT(traverse_module_state->__pyx_type_6python_6lhapdf_Info);
  Py_VISIT(traverse_module_state->__pyx_ptype_6python_6lhapdf_PDFUncertainty);
  Py_VISIT(traverse_module_state->__pyx_type_6python_6lhapdf_PDFUncertainty);
  Py_VISIT(traverse_module_state->__pyx_ptype_6python_6lhapdf_PDFErrInfo);
  Py_VISIT(traverse_module_state->__pyx_type_6python_6lhapdf_PDFErrInfo);
  Py_VISIT(traverse_module_state->__pyx_ptype_6python_6lhapdf_PDFSet);
  Py_VISIT(traverse_module_state->__pyx_type_6python_6lhapdf_PDFSet);
  Py_VISIT(traverse_module_state->__pyx_ptype_6python_6lhapdf_PDFInfo);
  Py_VISIT(traverse_module_state->__pyx_type_6python_6lhapdf_PDFInfo);
  Py_VISIT(traverse_module_state->__pyx_ptype_6python_6lhapdf_AlphaS);
  Py_VISIT(traverse_module_state->__pyx_type_6python_6lhapdf_AlphaS);
  Py_VISIT(traverse_module_state->__pyx_ptype___Pyx_EnumMeta);
  Py_VISIT(traverse_module_state->__Pyx_EnumMeta);
  Py_VISIT(traverse_module_state->__pyx_kp_s_);
  Py_VISIT(traverse_module_state->__pyx_n_s_ABOTTOM);
  Py_VISIT(traverse_module_state->__pyx_n_s_ACHARM);
  Py_VISIT(traverse_module_state->__pyx_n_s_ADOWN);
  Py_VISIT(traverse_module_state->__pyx_n_s_ASTRANGE);
  Py_VISIT(traverse_module_state->__pyx_n_s_ATOP);
  Py_VISIT(traverse_module_state->__pyx_n_s_AUP);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_alphasQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_alphasQ2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_AlphaS_d_loop_aS_MZ_3f);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_flavorScheme);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_numFlavorsQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_numFlavorsQ2);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_orderQCD);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_quarkMass);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_quarkThreshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_setAlphaSMZ);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_setFlavorScheme);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_setLambda);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_setMZ);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_setOrderQCD);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_setQuarkMass);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlphaS_setQuarkThreshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_BOTTOM);
  Py_VISIT(traverse_module_state->__pyx_n_s_CHARM);
  Py_VISIT(traverse_module_state->__pyx_n_s_DOWN);
  Py_VISIT(traverse_module_state->__pyx_n_s_EnumBase);
  Py_VISIT(traverse_module_state->__pyx_n_s_EnumType);
  Py_VISIT(traverse_module_state->__pyx_n_s_FIXED);
  Py_VISIT(traverse_module_state->__pyx_n_s_FlavorScheme);
  Py_VISIT(traverse_module_state->__pyx_n_s_GLUON);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_Info);
  Py_VISIT(traverse_module_state->__pyx_n_s_Info___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Info___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Info_d_keys_d_local);
  Py_VISIT(traverse_module_state->__pyx_n_s_Info_get_entry);
  Py_VISIT(traverse_module_state->__pyx_n_s_Info_has_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_Info_has_key_local);
  Py_VISIT(traverse_module_state->__pyx_n_s_Info_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_Info_keys_local);
  Py_VISIT(traverse_module_state->__pyx_n_s_Info_set_entry);
  Py_VISIT(traverse_module_state->__pyx_n_s_IntEnum);
  Py_VISIT(traverse_module_state->__pyx_n_s_IntFlag);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderedDict);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF);
  Py_VISIT(traverse_module_state->__pyx_kp_s_PDFErrInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFErrInfo_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFErrInfo___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFErrInfo___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFInfo___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFInfo___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_s_PDFInfo_d_keys_d_local);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet__checkPdfType);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet__print);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet_correlation);
  Py_VISIT(traverse_module_state->__pyx_kp_s_PDFSet_d_vars_d_keys_d_local);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet_get_entry);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet_has_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet_has_key_local);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet_keys_local);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet_mkPDF);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet_mkPDFs);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet_randomValueFromHessian);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFSet_uncertainty);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFUncertainty);
  Py_VISIT(traverse_module_state->__pyx_kp_s_PDFUncertainty_2_1e_2_1e_2_1e_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFUncertainty___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDFUncertainty___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF__print);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_alphasQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_alphasQ2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_PDF_d_LHAPDF_ID_d_d_flavors_x_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_flavors);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_hasFlavor);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_inRangeQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_inRangeQ2);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_inRangeX);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_inRangeXQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_inRangeXQ2);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_quarkMass);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_quarkThreshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_set);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_xfxQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_PDF_xfxQ2);
  Py_VISIT(traverse_module_state->__pyx_n_s_PIDCode);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Pickling_of_struct_members_such);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pyx_EnumBase);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pyx_EnumBase___new);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pyx_EnumBase___repr);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pyx_EnumBase___str);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pyx_EnumMeta___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pyx_EnumMeta___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pyx_FlagBase);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pyx_FlagBase___new);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pyx_FlagBase___repr);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pyx_FlagBase___str);
  Py_VISIT(traverse_module_state->__pyx_n_s_Q);
  Py_VISIT(traverse_module_state->__pyx_n_s_Q2);
  Py_VISIT(traverse_module_state->__pyx_n_s_STRANGE);
  Py_VISIT(traverse_module_state->__pyx_n_s_TOP);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_UP);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Unknown_call_signature);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Unknown_enum_value_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_VARIABLE);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Wrong_number_of_arguments_given);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Wrong_number_of_arguments_given_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_You_can_only_set_the_flavor_sche);
  Py_VISIT(traverse_module_state->__pyx_n_s__147);
  Py_VISIT(traverse_module_state->__pyx_kp_u__3);
  Py_VISIT(traverse_module_state->__pyx_n_s__4);
  Py_VISIT(traverse_module_state->__pyx_n_s_alphaS);
  Py_VISIT(traverse_module_state->__pyx_n_s_alphas);
  Py_VISIT(traverse_module_state->__pyx_n_s_alphasQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_alphasQ2);
  Py_VISIT(traverse_module_state->__pyx_n_s_alternative);
  Py_VISIT(traverse_module_state->__pyx_n_s_arg0_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_as_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_as_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_aschk);
  Py_VISIT(traverse_module_state->__pyx_n_s_ast);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_availablePDFSets);
  Py_VISIT(traverse_module_state->__pyx_n_s_basepdf);
  Py_VISIT(traverse_module_state->__pyx_n_s_central);
  Py_VISIT(traverse_module_state->__pyx_n_s_checkPdfType);
  Py_VISIT(traverse_module_state->__pyx_n_s_cl);
  Py_VISIT(traverse_module_state->__pyx_n_s_class);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_cls);
  Py_VISIT(traverse_module_state->__pyx_n_s_collections);
  Py_VISIT(traverse_module_state->__pyx_n_s_confLevel);
  Py_VISIT(traverse_module_state->__pyx_n_s_correlation);
  Py_VISIT(traverse_module_state->__pyx_n_s_dct);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_n_s_eachpid);
  Py_VISIT(traverse_module_state->__pyx_n_s_eachq);
  Py_VISIT(traverse_module_state->__pyx_n_s_eachq2);
  Py_VISIT(traverse_module_state->__pyx_n_s_eachx);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_enum);
  Py_VISIT(traverse_module_state->__pyx_n_s_errSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_errmax);
  Py_VISIT(traverse_module_state->__pyx_n_s_errmax_par);
  Py_VISIT(traverse_module_state->__pyx_n_s_errmax_pdf);
  Py_VISIT(traverse_module_state->__pyx_n_s_errmin);
  Py_VISIT(traverse_module_state->__pyx_n_s_errmin_par);
  Py_VISIT(traverse_module_state->__pyx_n_s_errmin_pdf);
  Py_VISIT(traverse_module_state->__pyx_n_s_errminus);
  Py_VISIT(traverse_module_state->__pyx_n_s_errminus_par);
  Py_VISIT(traverse_module_state->__pyx_n_s_errminus_pdf);
  Py_VISIT(traverse_module_state->__pyx_n_s_errorType);
  Py_VISIT(traverse_module_state->__pyx_n_s_errparts);
  Py_VISIT(traverse_module_state->__pyx_n_s_errplus);
  Py_VISIT(traverse_module_state->__pyx_n_s_errplus_par);
  Py_VISIT(traverse_module_state->__pyx_n_s_errplus_pdf);
  Py_VISIT(traverse_module_state->__pyx_n_s_fallback);
  Py_VISIT(traverse_module_state->__pyx_n_s_filename);
  Py_VISIT(traverse_module_state->__pyx_n_s_findFile);
  Py_VISIT(traverse_module_state->__pyx_n_s_flavorScheme);
  Py_VISIT(traverse_module_state->__pyx_n_s_flavors);
  Py_VISIT(traverse_module_state->__pyx_n_s_flavs);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_n_s_full_load);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_getConfig);
  Py_VISIT(traverse_module_state->__pyx_n_s_getPDFSet);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_entry);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_hasFlavor);
  Py_VISIT(traverse_module_state->__pyx_n_s_has_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_has_key_local);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_id1);
  Py_VISIT(traverse_module_state->__pyx_n_s_id2);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_inRangeQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_inRangeQ2);
  Py_VISIT(traverse_module_state->__pyx_n_s_inRangeX);
  Py_VISIT(traverse_module_state->__pyx_n_s_inRangeXQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_inRangeXQ2);
  Py_VISIT(traverse_module_state->__pyx_n_s_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_subclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_itertools);
  Py_VISIT(traverse_module_state->__pyx_n_s_izip);
  Py_VISIT(traverse_module_state->__pyx_n_s_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys_local);
  Py_VISIT(traverse_module_state->__pyx_n_s_lhapdfID);
  Py_VISIT(traverse_module_state->__pyx_kp_s_lhapdf_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_literal_eval);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_mem);
  Py_VISIT(traverse_module_state->__pyx_n_s_memberID);
  Py_VISIT(traverse_module_state->__pyx_n_s_member_names);
  Py_VISIT(traverse_module_state->__pyx_n_s_members);
  Py_VISIT(traverse_module_state->__pyx_n_s_metaclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_mkAlphaS);
  Py_VISIT(traverse_module_state->__pyx_n_s_mkBareAlphaS);
  Py_VISIT(traverse_module_state->__pyx_n_s_mkPDF);
  Py_VISIT(traverse_module_state->__pyx_n_s_mkPDFs);
  Py_VISIT(traverse_module_state->__pyx_n_s_module);
  Py_VISIT(traverse_module_state->__pyx_n_s_module_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_mro_entries);
  Py_VISIT(traverse_module_state->__pyx_n_s_mz);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_n_s_newpath);
  Py_VISIT(traverse_module_state->__pyx_n_s_newpaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_newpdf);
  Py_VISIT(traverse_module_state->__pyx_n_s_nf);
  Py_VISIT(traverse_module_state->__pyx_n_s_numFlavorsQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_numFlavorsQ2);
  Py_VISIT(traverse_module_state->__pyx_n_s_obj);
  Py_VISIT(traverse_module_state->__pyx_n_s_objs);
  Py_VISIT(traverse_module_state->__pyx_n_s_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_orderQCD);
  Py_VISIT(traverse_module_state->__pyx_n_s_p);
  Py_VISIT(traverse_module_state->__pyx_n_s_parents);
  Py_VISIT(traverse_module_state->__pyx_n_s_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_paths);
  Py_VISIT(traverse_module_state->__pyx_n_s_pathsAppend);
  Py_VISIT(traverse_module_state->__pyx_n_s_pathsPrepend);
  Py_VISIT(traverse_module_state->__pyx_n_s_pdftypes);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_s_pid);
  Py_VISIT(traverse_module_state->__pyx_n_s_prepare);
  Py_VISIT(traverse_module_state->__pyx_n_s_print);
  Py_VISIT(traverse_module_state->__pyx_n_s_print_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptr);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptrs);
  Py_VISIT(traverse_module_state->__pyx_n_s_punc);
  Py_VISIT(traverse_module_state->__pyx_kp_s_python_lhapdf);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle___Pyx_EnumMeta);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_q);
  Py_VISIT(traverse_module_state->__pyx_n_s_q2);
  Py_VISIT(traverse_module_state->__pyx_n_s_q2Max);
  Py_VISIT(traverse_module_state->__pyx_n_s_qparts);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_quarkMass);
  Py_VISIT(traverse_module_state->__pyx_n_s_quarkThreshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_randomValueFromHessian);
  Py_VISIT(traverse_module_state->__pyx_n_s_randoms);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_real);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_repr);
  Py_VISIT(traverse_module_state->__pyx_n_s_res);
  Py_VISIT(traverse_module_state->__pyx_n_s_rtn);
  Py_VISIT(traverse_module_state->__pyx_n_s_s);
  Py_VISIT(traverse_module_state->__pyx_kp_s_s_s);
  Py_VISIT(traverse_module_state->__pyx_kp_s_s_s_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_scheme);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__obj_cannot_be_converted_to);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__ptr_cannot_be_converted_to);
  Py_VISIT(traverse_module_state->__pyx_n_s_set);
  Py_VISIT(traverse_module_state->__pyx_n_s_setAlphaSMZ);
  Py_VISIT(traverse_module_state->__pyx_n_s_setFlavorScheme);
  Py_VISIT(traverse_module_state->__pyx_n_s_setLambda);
  Py_VISIT(traverse_module_state->__pyx_n_s_setMZ);
  Py_VISIT(traverse_module_state->__pyx_n_s_setOrderQCD);
  Py_VISIT(traverse_module_state->__pyx_n_s_setPaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_setQuarkMass);
  Py_VISIT(traverse_module_state->__pyx_n_s_setQuarkThreshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_setVerbosity);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_entry);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_setname);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_str);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_symmetrise);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_unc);
  Py_VISIT(traverse_module_state->__pyx_n_s_uncertainty);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_val);
  Py_VISIT(traverse_module_state->__pyx_n_s_vals);
  Py_VISIT(traverse_module_state->__pyx_n_s_valsA);
  Py_VISIT(traverse_module_state->__pyx_n_s_valsB);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_values);
  Py_VISIT(traverse_module_state->__pyx_n_s_verbosity);
  Py_VISIT(traverse_module_state->__pyx_n_s_version);
  Py_VISIT(traverse_module_state->__pyx_n_s_version_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_vlevel);
  Py_VISIT(traverse_module_state->__pyx_n_s_weightxQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_weightxQ2);
  Py_VISIT(traverse_module_state->__pyx_n_s_weightxxQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_weightxxQ2);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_n_s_x1);
  Py_VISIT(traverse_module_state->__pyx_n_s_x2);
  Py_VISIT(traverse_module_state->__pyx_n_s_xMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_xfxQ);
  Py_VISIT(traverse_module_state->__pyx_n_s_xfxQ2);
  Py_VISIT(traverse_module_state->__pyx_n_s_xrange);
  Py_VISIT(traverse_module_state->__pyx_n_s_yaml);
  Py_VISIT(traverse_module_state->__pyx_n_s_zip);
  Py_VISIT(traverse_module_state->__pyx_float_5eneg_2);
  Py_VISIT(traverse_module_state->__pyx_float_91_2);
  Py_VISIT(traverse_module_state->__pyx_float_68_268949);
  Py_VISIT(traverse_module_state->__pyx_int_222419149);
  Py_VISIT(traverse_module_state->__pyx_int_228825662);
  Py_VISIT(traverse_module_state->__pyx_int_238750788);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__73);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__79);
  Py_VISIT(traverse_module_state->__pyx_tuple__81);
  Py_VISIT(traverse_module_state->__pyx_tuple__83);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__95);
  Py_VISIT(traverse_module_state->__pyx_codeobj__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__100);
  Py_VISIT(traverse_module_state->__pyx_tuple__102);
  Py_VISIT(traverse_module_state->__pyx_tuple__104);
  Py_VISIT(traverse_module_state->__pyx_tuple__106);
  Py_VISIT(traverse_module_state->__pyx_tuple__108);
  Py_VISIT(traverse_module_state->__pyx_tuple__110);
  Py_VISIT(traverse_module_state->__pyx_tuple__114);
  Py_VISIT(traverse_module_state->__pyx_tuple__116);
  Py_VISIT(traverse_module_state->__pyx_tuple__118);
  Py_VISIT(traverse_module_state->__pyx_tuple__120);
  Py_VISIT(traverse_module_state->__pyx_tuple__123);
  Py_VISIT(traverse_module_state->__pyx_tuple__125);
  Py_VISIT(traverse_module_state->__pyx_tuple__127);
  Py_VISIT(traverse_module_state->__pyx_tuple__128);
  Py_VISIT(traverse_module_state->__pyx_tuple__130);
  Py_VISIT(traverse_module_state->__pyx_tuple__132);
  Py_VISIT(traverse_module_state->__pyx_tuple__136);
  Py_VISIT(traverse_module_state->__pyx_tuple__140);
  Py_VISIT(traverse_module_state->__pyx_tuple__142);
  Py_VISIT(traverse_module_state->__pyx_tuple__145);
  Py_VISIT(traverse_module_state->__pyx_codeobj__10);
  Py_VISIT(traverse_module_state->__pyx_codeobj__12);
  Py_VISIT(traverse_module_state->__pyx_codeobj__15);
  Py_VISIT(traverse_module_state->__pyx_codeobj__16);
  Py_VISIT(traverse_module_state->__pyx_codeobj__17);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__48);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__50);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__54);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__58);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__60);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__62);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__64);
  Py_VISIT(traverse_module_state->__pyx_codeobj__66);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__70);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__72);
  Py_VISIT(traverse_module_state->__pyx_codeobj__74);
  Py_VISIT(traverse_module_state->__pyx_codeobj__75);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__80);
  Py_VISIT(traverse_module_state->__pyx_codeobj__82);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__86);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__88);
  Py_VISIT(traverse_module_state->__pyx_codeobj__89);
  Py_VISIT(traverse_module_state->__pyx_codeobj__90);
  Py_VISIT(traverse_module_state->__pyx_codeobj__91);
  Py_VISIT(traverse_module_state->__pyx_codeobj__92);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__94);
  Py_VISIT(traverse_module_state->__pyx_codeobj__96);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__105);
  Py_VISIT(traverse_module_state->__pyx_codeobj__107);
  Py_VISIT(traverse_module_state->__pyx_codeobj__109);
  Py_VISIT(traverse_module_state->__pyx_codeobj__111);
  Py_VISIT(traverse_module_state->__pyx_codeobj__112);
  Py_VISIT(traverse_module_state->__pyx_codeobj__113);
  Py_VISIT(traverse_module_state->__pyx_codeobj__115);
  Py_VISIT(traverse_module_state->__pyx_codeobj__117);
  Py_VISIT(traverse_module_state->__pyx_codeobj__119);
  Py_VISIT(traverse_module_state->__pyx_codeobj__121);
  Py_VISIT(traverse_module_state->__pyx_codeobj__122);
  Py_VISIT(traverse_module_state->__pyx_codeobj__124);
  Py_VISIT(traverse_module_state->__pyx_codeobj__126);
  Py_VISIT(traverse_module_state->__pyx_codeobj__129);
  Py_VISIT(traverse_module_state->__pyx_codeobj__131);
  Py_VISIT(traverse_module_state->__pyx_codeobj__133);
  Py_VISIT(traverse_module_state->__pyx_codeobj__134);
  Py_VISIT(traverse_module_state->__pyx_codeobj__135);
  Py_VISIT(traverse_module_state->__pyx_codeobj__137);
  Py_VISIT(traverse_module_state->__pyx_codeobj__138);
  Py_VISIT(traverse_module_state->__pyx_codeobj__139);
  Py_VISIT(traverse_module_state->__pyx_codeobj__141);
  Py_VISIT(traverse_module_state->__pyx_codeobj__143);
  Py_VISIT(traverse_module_state->__pyx_codeobj__144);
  Py_VISIT(traverse_module_state->__pyx_codeobj__146);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_6python_6lhapdf_PDF __pyx_mstate_global->__pyx_type_6python_6lhapdf_PDF
#define __pyx_type_6python_6lhapdf_Info __pyx_mstate_global->__pyx_type_6python_6lhapdf_Info
#define __pyx_type_6python_6lhapdf_PDFUncertainty __pyx_mstate_global->__pyx_type_6python_6lhapdf_PDFUncertainty
#define __pyx_type_6python_6lhapdf_PDFErrInfo __pyx_mstate_global->__pyx_type_6python_6lhapdf_PDFErrInfo
#define __pyx_type_6python_6lhapdf_PDFSet __pyx_mstate_global->__pyx_type_6python_6lhapdf_PDFSet
#define __pyx_type_6python_6lhapdf_PDFInfo __pyx_mstate_global->__pyx_type_6python_6lhapdf_PDFInfo
#define __pyx_type_6python_6lhapdf_AlphaS __pyx_mstate_global->__pyx_type_6python_6lhapdf_AlphaS
#define __Pyx_EnumMeta __pyx_mstate_global->__Pyx_EnumMeta
#endif
#define __pyx_ptype_6python_6lhapdf_PDF __pyx_mstate_global->__pyx_ptype_6python_6lhapdf_PDF
#define __pyx_ptype_6python_6lhapdf_Info __pyx_mstate_global->__pyx_ptype_6python_6lhapdf_Info
#define __pyx_ptype_6python_6lhapdf_PDFUncertainty __pyx_mstate_global->__pyx_ptype_6python_6lhapdf_PDFUncertainty
#define __pyx_ptype_6python_6lhapdf_PDFErrInfo __pyx_mstate_global->__pyx_ptype_6python_6lhapdf_PDFErrInfo
#define __pyx_ptype_6python_6lhapdf_PDFSet __pyx_mstate_global->__pyx_ptype_6python_6lhapdf_PDFSet
#define __pyx_ptype_6python_6lhapdf_PDFInfo __pyx_mstate_global->__pyx_ptype_6python_6lhapdf_PDFInfo
#define __pyx_ptype_6python_6lhapdf_AlphaS __pyx_mstate_global->__pyx_ptype_6python_6lhapdf_AlphaS
#define __pyx_ptype___Pyx_EnumMeta __pyx_mstate_global->__pyx_ptype___Pyx_EnumMeta
#define __pyx_kp_s_ __pyx_mstate_global->__pyx_kp_s_
#define __pyx_n_s_ABOTTOM __pyx_mstate_global->__pyx_n_s_ABOTTOM
#define __pyx_n_s_ACHARM __pyx_mstate_global->__pyx_n_s_ACHARM
#define __pyx_n_s_ADOWN __pyx_mstate_global->__pyx_n_s_ADOWN
#define __pyx_n_s_ASTRANGE __pyx_mstate_global->__pyx_n_s_ASTRANGE
#define __pyx_n_s_ATOP __pyx_mstate_global->__pyx_n_s_ATOP
#define __pyx_n_s_AUP __pyx_mstate_global->__pyx_n_s_AUP
#define __pyx_n_s_AlphaS __pyx_mstate_global->__pyx_n_s_AlphaS
#define __pyx_n_s_AlphaS___reduce_cython __pyx_mstate_global->__pyx_n_s_AlphaS___reduce_cython
#define __pyx_n_s_AlphaS___setstate_cython __pyx_mstate_global->__pyx_n_s_AlphaS___setstate_cython
#define __pyx_n_s_AlphaS_alphasQ __pyx_mstate_global->__pyx_n_s_AlphaS_alphasQ
#define __pyx_n_s_AlphaS_alphasQ2 __pyx_mstate_global->__pyx_n_s_AlphaS_alphasQ2
#define __pyx_kp_s_AlphaS_d_loop_aS_MZ_3f __pyx_mstate_global->__pyx_kp_s_AlphaS_d_loop_aS_MZ_3f
#define __pyx_n_s_AlphaS_flavorScheme __pyx_mstate_global->__pyx_n_s_AlphaS_flavorScheme
#define __pyx_n_s_AlphaS_numFlavorsQ __pyx_mstate_global->__pyx_n_s_AlphaS_numFlavorsQ
#define __pyx_n_s_AlphaS_numFlavorsQ2 __pyx_mstate_global->__pyx_n_s_AlphaS_numFlavorsQ2
#define __pyx_n_s_AlphaS_orderQCD __pyx_mstate_global->__pyx_n_s_AlphaS_orderQCD
#define __pyx_n_s_AlphaS_quarkMass __pyx_mstate_global->__pyx_n_s_AlphaS_quarkMass
#define __pyx_n_s_AlphaS_quarkThreshold __pyx_mstate_global->__pyx_n_s_AlphaS_quarkThreshold
#define __pyx_n_s_AlphaS_setAlphaSMZ __pyx_mstate_global->__pyx_n_s_AlphaS_setAlphaSMZ
#define __pyx_n_s_AlphaS_setFlavorScheme __pyx_mstate_global->__pyx_n_s_AlphaS_setFlavorScheme
#define __pyx_n_s_AlphaS_setLambda __pyx_mstate_global->__pyx_n_s_AlphaS_setLambda
#define __pyx_n_s_AlphaS_setMZ __pyx_mstate_global->__pyx_n_s_AlphaS_setMZ
#define __pyx_n_s_AlphaS_setOrderQCD __pyx_mstate_global->__pyx_n_s_AlphaS_setOrderQCD
#define __pyx_n_s_AlphaS_setQuarkMass __pyx_mstate_global->__pyx_n_s_AlphaS_setQuarkMass
#define __pyx_n_s_AlphaS_setQuarkThreshold __pyx_mstate_global->__pyx_n_s_AlphaS_setQuarkThreshold
#define __pyx_n_s_BOTTOM __pyx_mstate_global->__pyx_n_s_BOTTOM
#define __pyx_n_s_CHARM __pyx_mstate_global->__pyx_n_s_CHARM
#define __pyx_n_s_DOWN __pyx_mstate_global->__pyx_n_s_DOWN
#define __pyx_n_s_EnumBase __pyx_mstate_global->__pyx_n_s_EnumBase
#define __pyx_n_s_EnumType __pyx_mstate_global->__pyx_n_s_EnumType
#define __pyx_n_s_FIXED __pyx_mstate_global->__pyx_n_s_FIXED
#define __pyx_n_s_FlavorScheme __pyx_mstate_global->__pyx_n_s_FlavorScheme
#define __pyx_n_s_GLUON __pyx_mstate_global->__pyx_n_s_GLUON
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0
#define __pyx_n_s_Info __pyx_mstate_global->__pyx_n_s_Info
#define __pyx_n_s_Info___reduce_cython __pyx_mstate_global->__pyx_n_s_Info___reduce_cython
#define __pyx_n_s_Info___setstate_cython __pyx_mstate_global->__pyx_n_s_Info___setstate_cython
#define __pyx_kp_s_Info_d_keys_d_local __pyx_mstate_global->__pyx_kp_s_Info_d_keys_d_local
#define __pyx_n_s_Info_get_entry __pyx_mstate_global->__pyx_n_s_Info_get_entry
#define __pyx_n_s_Info_has_key __pyx_mstate_global->__pyx_n_s_Info_has_key
#define __pyx_n_s_Info_has_key_local __pyx_mstate_global->__pyx_n_s_Info_has_key_local
#define __pyx_n_s_Info_keys __pyx_mstate_global->__pyx_n_s_Info_keys
#define __pyx_n_s_Info_keys_local __pyx_mstate_global->__pyx_n_s_Info_keys_local
#define __pyx_n_s_Info_set_entry __pyx_mstate_global->__pyx_n_s_Info_set_entry
#define __pyx_n_s_IntEnum __pyx_mstate_global->__pyx_n_s_IntEnum
#define __pyx_n_s_IntFlag __pyx_mstate_global->__pyx_n_s_IntFlag
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_n_s_OrderedDict __pyx_mstate_global->__pyx_n_s_OrderedDict
#define __pyx_n_s_PDF __pyx_mstate_global->__pyx_n_s_PDF
#define __pyx_kp_s_PDFErrInfo __pyx_mstate_global->__pyx_kp_s_PDFErrInfo
#define __pyx_n_s_PDFErrInfo_2 __pyx_mstate_global->__pyx_n_s_PDFErrInfo_2
#define __pyx_n_s_PDFErrInfo___reduce_cython __pyx_mstate_global->__pyx_n_s_PDFErrInfo___reduce_cython
#define __pyx_n_s_PDFErrInfo___setstate_cython __pyx_mstate_global->__pyx_n_s_PDFErrInfo___setstate_cython
#define __pyx_n_s_PDFInfo __pyx_mstate_global->__pyx_n_s_PDFInfo
#define __pyx_n_s_PDFInfo___reduce_cython __pyx_mstate_global->__pyx_n_s_PDFInfo___reduce_cython
#define __pyx_n_s_PDFInfo___setstate_cython __pyx_mstate_global->__pyx_n_s_PDFInfo___setstate_cython
#define __pyx_kp_s_PDFInfo_d_keys_d_local __pyx_mstate_global->__pyx_kp_s_PDFInfo_d_keys_d_local
#define __pyx_n_s_PDFSet __pyx_mstate_global->__pyx_n_s_PDFSet
#define __pyx_n_s_PDFSet___reduce_cython __pyx_mstate_global->__pyx_n_s_PDFSet___reduce_cython
#define __pyx_n_s_PDFSet___setstate_cython __pyx_mstate_global->__pyx_n_s_PDFSet___setstate_cython
#define __pyx_n_s_PDFSet__checkPdfType __pyx_mstate_global->__pyx_n_s_PDFSet__checkPdfType
#define __pyx_n_s_PDFSet__print __pyx_mstate_global->__pyx_n_s_PDFSet__print
#define __pyx_n_s_PDFSet_correlation __pyx_mstate_global->__pyx_n_s_PDFSet_correlation
#define __pyx_kp_s_PDFSet_d_vars_d_keys_d_local __pyx_mstate_global->__pyx_kp_s_PDFSet_d_vars_d_keys_d_local
#define __pyx_n_s_PDFSet_get_entry __pyx_mstate_global->__pyx_n_s_PDFSet_get_entry
#define __pyx_n_s_PDFSet_has_key __pyx_mstate_global->__pyx_n_s_PDFSet_has_key
#define __pyx_n_s_PDFSet_has_key_local __pyx_mstate_global->__pyx_n_s_PDFSet_has_key_local
#define __pyx_n_s_PDFSet_keys __pyx_mstate_global->__pyx_n_s_PDFSet_keys
#define __pyx_n_s_PDFSet_keys_local __pyx_mstate_global->__pyx_n_s_PDFSet_keys_local
#define __pyx_n_s_PDFSet_mkPDF __pyx_mstate_global->__pyx_n_s_PDFSet_mkPDF
#define __pyx_n_s_PDFSet_mkPDFs __pyx_mstate_global->__pyx_n_s_PDFSet_mkPDFs
#define __pyx_n_s_PDFSet_randomValueFromHessian __pyx_mstate_global->__pyx_n_s_PDFSet_randomValueFromHessian
#define __pyx_n_s_PDFSet_uncertainty __pyx_mstate_global->__pyx_n_s_PDFSet_uncertainty
#define __pyx_n_s_PDFUncertainty __pyx_mstate_global->__pyx_n_s_PDFUncertainty
#define __pyx_kp_s_PDFUncertainty_2_1e_2_1e_2_1e_d __pyx_mstate_global->__pyx_kp_s_PDFUncertainty_2_1e_2_1e_2_1e_d
#define __pyx_n_s_PDFUncertainty___reduce_cython __pyx_mstate_global->__pyx_n_s_PDFUncertainty___reduce_cython
#define __pyx_n_s_PDFUncertainty___setstate_cython __pyx_mstate_global->__pyx_n_s_PDFUncertainty___setstate_cython
#define __pyx_n_s_PDF___reduce_cython __pyx_mstate_global->__pyx_n_s_PDF___reduce_cython
#define __pyx_n_s_PDF___setstate_cython __pyx_mstate_global->__pyx_n_s_PDF___setstate_cython
#define __pyx_n_s_PDF__print __pyx_mstate_global->__pyx_n_s_PDF__print
#define __pyx_n_s_PDF_alphasQ __pyx_mstate_global->__pyx_n_s_PDF_alphasQ
#define __pyx_n_s_PDF_alphasQ2 __pyx_mstate_global->__pyx_n_s_PDF_alphasQ2
#define __pyx_kp_s_PDF_d_LHAPDF_ID_d_d_flavors_x_2 __pyx_mstate_global->__pyx_kp_s_PDF_d_LHAPDF_ID_d_d_flavors_x_2
#define __pyx_n_s_PDF_flavors __pyx_mstate_global->__pyx_n_s_PDF_flavors
#define __pyx_n_s_PDF_hasFlavor __pyx_mstate_global->__pyx_n_s_PDF_hasFlavor
#define __pyx_n_s_PDF_inRangeQ __pyx_mstate_global->__pyx_n_s_PDF_inRangeQ
#define __pyx_n_s_PDF_inRangeQ2 __pyx_mstate_global->__pyx_n_s_PDF_inRangeQ2
#define __pyx_n_s_PDF_inRangeX __pyx_mstate_global->__pyx_n_s_PDF_inRangeX
#define __pyx_n_s_PDF_inRangeXQ __pyx_mstate_global->__pyx_n_s_PDF_inRangeXQ
#define __pyx_n_s_PDF_inRangeXQ2 __pyx_mstate_global->__pyx_n_s_PDF_inRangeXQ2
#define __pyx_n_s_PDF_info __pyx_mstate_global->__pyx_n_s_PDF_info
#define __pyx_n_s_PDF_quarkMass __pyx_mstate_global->__pyx_n_s_PDF_quarkMass
#define __pyx_n_s_PDF_quarkThreshold __pyx_mstate_global->__pyx_n_s_PDF_quarkThreshold
#define __pyx_n_s_PDF_set __pyx_mstate_global->__pyx_n_s_PDF_set
#define __pyx_n_s_PDF_xfxQ __pyx_mstate_global->__pyx_n_s_PDF_xfxQ
#define __pyx_n_s_PDF_xfxQ2 __pyx_mstate_global->__pyx_n_s_PDF_xfxQ2
#define __pyx_n_s_PIDCode __pyx_mstate_global->__pyx_n_s_PIDCode
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_kp_s_Pickling_of_struct_members_such __pyx_mstate_global->__pyx_kp_s_Pickling_of_struct_members_such
#define __pyx_n_s_Pyx_EnumBase __pyx_mstate_global->__pyx_n_s_Pyx_EnumBase
#define __pyx_n_s_Pyx_EnumBase___new __pyx_mstate_global->__pyx_n_s_Pyx_EnumBase___new
#define __pyx_n_s_Pyx_EnumBase___repr __pyx_mstate_global->__pyx_n_s_Pyx_EnumBase___repr
#define __pyx_n_s_Pyx_EnumBase___str __pyx_mstate_global->__pyx_n_s_Pyx_EnumBase___str
#define __pyx_n_s_Pyx_EnumMeta___reduce_cython __pyx_mstate_global->__pyx_n_s_Pyx_EnumMeta___reduce_cython
#define __pyx_n_s_Pyx_EnumMeta___setstate_cython __pyx_mstate_global->__pyx_n_s_Pyx_EnumMeta___setstate_cython
#define __pyx_n_s_Pyx_FlagBase __pyx_mstate_global->__pyx_n_s_Pyx_FlagBase
#define __pyx_n_s_Pyx_FlagBase___new __pyx_mstate_global->__pyx_n_s_Pyx_FlagBase___new
#define __pyx_n_s_Pyx_FlagBase___repr __pyx_mstate_global->__pyx_n_s_Pyx_FlagBase___repr
#define __pyx_n_s_Pyx_FlagBase___str __pyx_mstate_global->__pyx_n_s_Pyx_FlagBase___str
#define __pyx_n_s_Q __pyx_mstate_global->__pyx_n_s_Q
#define __pyx_n_s_Q2 __pyx_mstate_global->__pyx_n_s_Q2
#define __pyx_n_s_STRANGE __pyx_mstate_global->__pyx_n_s_STRANGE
#define __pyx_n_s_TOP __pyx_mstate_global->__pyx_n_s_TOP
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_UP __pyx_mstate_global->__pyx_n_s_UP
#define __pyx_kp_s_Unknown_call_signature __pyx_mstate_global->__pyx_kp_s_Unknown_call_signature
#define __pyx_kp_s_Unknown_enum_value_s __pyx_mstate_global->__pyx_kp_s_Unknown_enum_value_s
#define __pyx_n_s_VARIABLE __pyx_mstate_global->__pyx_n_s_VARIABLE
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_kp_s_Wrong_number_of_arguments_given __pyx_mstate_global->__pyx_kp_s_Wrong_number_of_arguments_given
#define __pyx_kp_s_Wrong_number_of_arguments_given_2 __pyx_mstate_global->__pyx_kp_s_Wrong_number_of_arguments_given_2
#define __pyx_kp_s_You_can_only_set_the_flavor_sche __pyx_mstate_global->__pyx_kp_s_You_can_only_set_the_flavor_sche
#define __pyx_n_s__147 __pyx_mstate_global->__pyx_n_s__147
#define __pyx_kp_u__3 __pyx_mstate_global->__pyx_kp_u__3
#define __pyx_n_s__4 __pyx_mstate_global->__pyx_n_s__4
#define __pyx_n_s_alphaS __pyx_mstate_global->__pyx_n_s_alphaS
#define __pyx_n_s_alphas __pyx_mstate_global->__pyx_n_s_alphas
#define __pyx_n_s_alphasQ __pyx_mstate_global->__pyx_n_s_alphasQ
#define __pyx_n_s_alphasQ2 __pyx_mstate_global->__pyx_n_s_alphasQ2
#define __pyx_n_s_alternative __pyx_mstate_global->__pyx_n_s_alternative
#define __pyx_n_s_arg0_string __pyx_mstate_global->__pyx_n_s_arg0_string
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_as_str __pyx_mstate_global->__pyx_n_s_as_str
#define __pyx_n_s_as_type __pyx_mstate_global->__pyx_n_s_as_type
#define __pyx_n_s_aschk __pyx_mstate_global->__pyx_n_s_aschk
#define __pyx_n_s_ast __pyx_mstate_global->__pyx_n_s_ast
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_availablePDFSets __pyx_mstate_global->__pyx_n_s_availablePDFSets
#define __pyx_n_s_basepdf __pyx_mstate_global->__pyx_n_s_basepdf
#define __pyx_n_s_central __pyx_mstate_global->__pyx_n_s_central
#define __pyx_n_s_checkPdfType __pyx_mstate_global->__pyx_n_s_checkPdfType
#define __pyx_n_s_cl __pyx_mstate_global->__pyx_n_s_cl
#define __pyx_n_s_class __pyx_mstate_global->__pyx_n_s_class
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_cls __pyx_mstate_global->__pyx_n_s_cls
#define __pyx_n_s_collections __pyx_mstate_global->__pyx_n_s_collections
#define __pyx_n_s_confLevel __pyx_mstate_global->__pyx_n_s_confLevel
#define __pyx_n_s_correlation __pyx_mstate_global->__pyx_n_s_correlation
#define __pyx_n_s_dct __pyx_mstate_global->__pyx_n_s_dct
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dict_2 __pyx_mstate_global->__pyx_n_s_dict_2
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_n_s_eachpid __pyx_mstate_global->__pyx_n_s_eachpid
#define __pyx_n_s_eachq __pyx_mstate_global->__pyx_n_s_eachq
#define __pyx_n_s_eachq2 __pyx_mstate_global->__pyx_n_s_eachq2
#define __pyx_n_s_eachx __pyx_mstate_global->__pyx_n_s_eachx
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_enum __pyx_mstate_global->__pyx_n_s_enum
#define __pyx_n_s_errSize __pyx_mstate_global->__pyx_n_s_errSize
#define __pyx_n_s_errmax __pyx_mstate_global->__pyx_n_s_errmax
#define __pyx_n_s_errmax_par __pyx_mstate_global->__pyx_n_s_errmax_par
#define __pyx_n_s_errmax_pdf __pyx_mstate_global->__pyx_n_s_errmax_pdf
#define __pyx_n_s_errmin __pyx_mstate_global->__pyx_n_s_errmin
#define __pyx_n_s_errmin_par __pyx_mstate_global->__pyx_n_s_errmin_par
#define __pyx_n_s_errmin_pdf __pyx_mstate_global->__pyx_n_s_errmin_pdf
#define __pyx_n_s_errminus __pyx_mstate_global->__pyx_n_s_errminus
#define __pyx_n_s_errminus_par __pyx_mstate_global->__pyx_n_s_errminus_par
#define __pyx_n_s_errminus_pdf __pyx_mstate_global->__pyx_n_s_errminus_pdf
#define __pyx_n_s_errorType __pyx_mstate_global->__pyx_n_s_errorType
#define __pyx_n_s_errparts __pyx_mstate_global->__pyx_n_s_errparts
#define __pyx_n_s_errplus __pyx_mstate_global->__pyx_n_s_errplus
#define __pyx_n_s_errplus_par __pyx_mstate_global->__pyx_n_s_errplus_par
#define __pyx_n_s_errplus_pdf __pyx_mstate_global->__pyx_n_s_errplus_pdf
#define __pyx_n_s_fallback __pyx_mstate_global->__pyx_n_s_fallback
#define __pyx_n_s_filename __pyx_mstate_global->__pyx_n_s_filename
#define __pyx_n_s_findFile __pyx_mstate_global->__pyx_n_s_findFile
#define __pyx_n_s_flavorScheme __pyx_mstate_global->__pyx_n_s_flavorScheme
#define __pyx_n_s_flavors __pyx_mstate_global->__pyx_n_s_flavors
#define __pyx_n_s_flavs __pyx_mstate_global->__pyx_n_s_flavs
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_n_s_full_load __pyx_mstate_global->__pyx_n_s_full_load
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_s_getConfig __pyx_mstate_global->__pyx_n_s_getConfig
#define __pyx_n_s_getPDFSet __pyx_mstate_global->__pyx_n_s_getPDFSet
#define __pyx_n_s_get_entry __pyx_mstate_global->__pyx_n_s_get_entry
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_hasFlavor __pyx_mstate_global->__pyx_n_s_hasFlavor
#define __pyx_n_s_has_key __pyx_mstate_global->__pyx_n_s_has_key
#define __pyx_n_s_has_key_local __pyx_mstate_global->__pyx_n_s_has_key_local
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_id __pyx_mstate_global->__pyx_n_s_id
#define __pyx_n_s_id1 __pyx_mstate_global->__pyx_n_s_id1
#define __pyx_n_s_id2 __pyx_mstate_global->__pyx_n_s_id2
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_inRangeQ __pyx_mstate_global->__pyx_n_s_inRangeQ
#define __pyx_n_s_inRangeQ2 __pyx_mstate_global->__pyx_n_s_inRangeQ2
#define __pyx_n_s_inRangeX __pyx_mstate_global->__pyx_n_s_inRangeX
#define __pyx_n_s_inRangeXQ __pyx_mstate_global->__pyx_n_s_inRangeXQ
#define __pyx_n_s_inRangeXQ2 __pyx_mstate_global->__pyx_n_s_inRangeXQ2
#define __pyx_n_s_info __pyx_mstate_global->__pyx_n_s_info
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_init_subclass __pyx_mstate_global->__pyx_n_s_init_subclass
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_itertools __pyx_mstate_global->__pyx_n_s_itertools
#define __pyx_n_s_izip __pyx_mstate_global->__pyx_n_s_izip
#define __pyx_n_s_key __pyx_mstate_global->__pyx_n_s_key
#define __pyx_n_s_keys __pyx_mstate_global->__pyx_n_s_keys
#define __pyx_n_s_keys_local __pyx_mstate_global->__pyx_n_s_keys_local
#define __pyx_n_s_lhapdfID __pyx_mstate_global->__pyx_n_s_lhapdfID
#define __pyx_kp_s_lhapdf_pyx __pyx_mstate_global->__pyx_kp_s_lhapdf_pyx
#define __pyx_n_s_literal_eval __pyx_mstate_global->__pyx_n_s_literal_eval
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_mem __pyx_mstate_global->__pyx_n_s_mem
#define __pyx_n_s_memberID __pyx_mstate_global->__pyx_n_s_memberID
#define __pyx_n_s_member_names __pyx_mstate_global->__pyx_n_s_member_names
#define __pyx_n_s_members __pyx_mstate_global->__pyx_n_s_members
#define __pyx_n_s_metaclass __pyx_mstate_global->__pyx_n_s_metaclass
#define __pyx_n_s_mkAlphaS __pyx_mstate_global->__pyx_n_s_mkAlphaS
#define __pyx_n_s_mkBareAlphaS __pyx_mstate_global->__pyx_n_s_mkBareAlphaS
#define __pyx_n_s_mkPDF __pyx_mstate_global->__pyx_n_s_mkPDF
#define __pyx_n_s_mkPDFs __pyx_mstate_global->__pyx_n_s_mkPDFs
#define __pyx_n_s_module __pyx_mstate_global->__pyx_n_s_module
#define __pyx_n_s_module_2 __pyx_mstate_global->__pyx_n_s_module_2
#define __pyx_n_s_mro_entries __pyx_mstate_global->__pyx_n_s_mro_entries
#define __pyx_n_s_mz __pyx_mstate_global->__pyx_n_s_mz
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_n_s_newpath __pyx_mstate_global->__pyx_n_s_newpath
#define __pyx_n_s_newpaths __pyx_mstate_global->__pyx_n_s_newpaths
#define __pyx_n_s_newpdf __pyx_mstate_global->__pyx_n_s_newpdf
#define __pyx_n_s_nf __pyx_mstate_global->__pyx_n_s_nf
#define __pyx_n_s_numFlavorsQ __pyx_mstate_global->__pyx_n_s_numFlavorsQ
#define __pyx_n_s_numFlavorsQ2 __pyx_mstate_global->__pyx_n_s_numFlavorsQ2
#define __pyx_n_s_obj __pyx_mstate_global->__pyx_n_s_obj
#define __pyx_n_s_objs __pyx_mstate_global->__pyx_n_s_objs
#define __pyx_n_s_order __pyx_mstate_global->__pyx_n_s_order
#define __pyx_n_s_orderQCD __pyx_mstate_global->__pyx_n_s_orderQCD
#define __pyx_n_s_p __pyx_mstate_global->__pyx_n_s_p
#define __pyx_n_s_parents __pyx_mstate_global->__pyx_n_s_parents
#define __pyx_n_s_path __pyx_mstate_global->__pyx_n_s_path
#define __pyx_n_s_paths __pyx_mstate_global->__pyx_n_s_paths
#define __pyx_n_s_pathsAppend __pyx_mstate_global->__pyx_n_s_pathsAppend
#define __pyx_n_s_pathsPrepend __pyx_mstate_global->__pyx_n_s_pathsPrepend
#define __pyx_n_s_pdftypes __pyx_mstate_global->__pyx_n_s_pdftypes
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_n_s_pid __pyx_mstate_global->__pyx_n_s_pid
#define __pyx_n_s_prepare __pyx_mstate_global->__pyx_n_s_prepare
#define __pyx_n_s_print __pyx_mstate_global->__pyx_n_s_print
#define __pyx_n_s_print_2 __pyx_mstate_global->__pyx_n_s_print_2
#define __pyx_n_s_ptr __pyx_mstate_global->__pyx_n_s_ptr
#define __pyx_n_s_ptrs __pyx_mstate_global->__pyx_n_s_ptrs
#define __pyx_n_s_punc __pyx_mstate_global->__pyx_n_s_punc
#define __pyx_kp_s_python_lhapdf __pyx_mstate_global->__pyx_kp_s_python_lhapdf
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle___Pyx_EnumMeta __pyx_mstate_global->__pyx_n_s_pyx_unpickle___Pyx_EnumMeta
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_q __pyx_mstate_global->__pyx_n_s_q
#define __pyx_n_s_q2 __pyx_mstate_global->__pyx_n_s_q2
#define __pyx_n_s_q2Max __pyx_mstate_global->__pyx_n_s_q2Max
#define __pyx_n_s_qparts __pyx_mstate_global->__pyx_n_s_qparts
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_quarkMass __pyx_mstate_global->__pyx_n_s_quarkMass
#define __pyx_n_s_quarkThreshold __pyx_mstate_global->__pyx_n_s_quarkThreshold
#define __pyx_n_s_randomValueFromHessian __pyx_mstate_global->__pyx_n_s_randomValueFromHessian
#define __pyx_n_s_randoms __pyx_mstate_global->__pyx_n_s_randoms
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_real __pyx_mstate_global->__pyx_n_s_real
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_repr __pyx_mstate_global->__pyx_n_s_repr
#define __pyx_n_s_res __pyx_mstate_global->__pyx_n_s_res
#define __pyx_n_s_rtn __pyx_mstate_global->__pyx_n_s_rtn
#define __pyx_n_s_s __pyx_mstate_global->__pyx_n_s_s
#define __pyx_kp_s_s_s __pyx_mstate_global->__pyx_kp_s_s_s
#define __pyx_kp_s_s_s_d __pyx_mstate_global->__pyx_kp_s_s_s_d
#define __pyx_n_s_scheme __pyx_mstate_global->__pyx_n_s_scheme
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self__obj_cannot_be_converted_to __pyx_mstate_global->__pyx_kp_s_self__obj_cannot_be_converted_to
#define __pyx_kp_s_self__ptr_cannot_be_converted_to __pyx_mstate_global->__pyx_kp_s_self__ptr_cannot_be_converted_to
#define __pyx_n_s_set __pyx_mstate_global->__pyx_n_s_set
#define __pyx_n_s_setAlphaSMZ __pyx_mstate_global->__pyx_n_s_setAlphaSMZ
#define __pyx_n_s_setFlavorScheme __pyx_mstate_global->__pyx_n_s_setFlavorScheme
#define __pyx_n_s_setLambda __pyx_mstate_global->__pyx_n_s_setLambda
#define __pyx_n_s_setMZ __pyx_mstate_global->__pyx_n_s_setMZ
#define __pyx_n_s_setOrderQCD __pyx_mstate_global->__pyx_n_s_setOrderQCD
#define __pyx_n_s_setPaths __pyx_mstate_global->__pyx_n_s_setPaths
#define __pyx_n_s_setQuarkMass __pyx_mstate_global->__pyx_n_s_setQuarkMass
#define __pyx_n_s_setQuarkThreshold __pyx_mstate_global->__pyx_n_s_setQuarkThreshold
#define __pyx_n_s_setVerbosity __pyx_mstate_global->__pyx_n_s_setVerbosity
#define __pyx_n_s_set_entry __pyx_mstate_global->__pyx_n_s_set_entry
#define __pyx_n_s_set_name __pyx_mstate_global->__pyx_n_s_set_name
#define __pyx_n_s_setname __pyx_mstate_global->__pyx_n_s_setname
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_n_s_str __pyx_mstate_global->__pyx_n_s_str
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_symmetrise __pyx_mstate_global->__pyx_n_s_symmetrise
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_type __pyx_mstate_global->__pyx_n_s_type
#define __pyx_n_s_unc __pyx_mstate_global->__pyx_n_s_unc
#define __pyx_n_s_uncertainty __pyx_mstate_global->__pyx_n_s_uncertainty
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_use_setstate __pyx_mstate_global->__pyx_n_s_use_setstate
#define __pyx_n_s_v __pyx_mstate_global->__pyx_n_s_v
#define __pyx_n_s_val __pyx_mstate_global->__pyx_n_s_val
#define __pyx_n_s_vals __pyx_mstate_global->__pyx_n_s_vals
#define __pyx_n_s_valsA __pyx_mstate_global->__pyx_n_s_valsA
#define __pyx_n_s_valsB __pyx_mstate_global->__pyx_n_s_valsB
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_values __pyx_mstate_global->__pyx_n_s_values
#define __pyx_n_s_verbosity __pyx_mstate_global->__pyx_n_s_verbosity
#define __pyx_n_s_version __pyx_mstate_global->__pyx_n_s_version
#define __pyx_n_s_version_2 __pyx_mstate_global->__pyx_n_s_version_2
#define __pyx_n_s_vlevel __pyx_mstate_global->__pyx_n_s_vlevel
#define __pyx_n_s_weightxQ __pyx_mstate_global->__pyx_n_s_weightxQ
#define __pyx_n_s_weightxQ2 __pyx_mstate_global->__pyx_n_s_weightxQ2
#define __pyx_n_s_weightxxQ __pyx_mstate_global->__pyx_n_s_weightxxQ
#define __pyx_n_s_weightxxQ2 __pyx_mstate_global->__pyx_n_s_weightxxQ2
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_n_s_x1 __pyx_mstate_global->__pyx_n_s_x1
#define __pyx_n_s_x2 __pyx_mstate_global->__pyx_n_s_x2
#define __pyx_n_s_xMin __pyx_mstate_global->__pyx_n_s_xMin
#define __pyx_n_s_xfxQ __pyx_mstate_global->__pyx_n_s_xfxQ
#define __pyx_n_s_xfxQ2 __pyx_mstate_global->__pyx_n_s_xfxQ2
#define __pyx_n_s_xrange __pyx_mstate_global->__pyx_n_s_xrange
#define __pyx_n_s_yaml __pyx_mstate_global->__pyx_n_s_yaml
#define __pyx_n_s_zip __pyx_mstate_global->__pyx_n_s_zip
#define __pyx_float_5eneg_2 __pyx_mstate_global->__pyx_float_5eneg_2
#define __pyx_float_91_2 __pyx_mstate_global->__pyx_float_91_2
#define __pyx_float_68_268949 __pyx_mstate_global->__pyx_float_68_268949
#define __pyx_int_222419149 __pyx_mstate_global->__pyx_int_222419149
#define __pyx_int_228825662 __pyx_mstate_global->__pyx_int_228825662
#define __pyx_int_238750788 __pyx_mstate_global->__pyx_int_238750788
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__73 __pyx_mstate_global->__pyx_tuple__73
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__79 __pyx_mstate_global->__pyx_tuple__79
#define __pyx_tuple__81 __pyx_mstate_global->__pyx_tuple__81
#define __pyx_tuple__83 __pyx_mstate_global->__pyx_tuple__83
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__95 __pyx_mstate_global->__pyx_tuple__95
#define __pyx_codeobj__8 __pyx_mstate_global->__pyx_codeobj__8
#define __pyx_tuple__100 __pyx_mstate_global->__pyx_tuple__100
#define __pyx_tuple__102 __pyx_mstate_global->__pyx_tuple__102
#define __pyx_tuple__104 __pyx_mstate_global->__pyx_tuple__104
#define __pyx_tuple__106 __pyx_mstate_global->__pyx_tuple__106
#define __pyx_tuple__108 __pyx_mstate_global->__pyx_tuple__108
#define __pyx_tuple__110 __pyx_mstate_global->__pyx_tuple__110
#define __pyx_tuple__114 __pyx_mstate_global->__pyx_tuple__114
#define __pyx_tuple__116 __pyx_mstate_global->__pyx_tuple__116
#define __pyx_tuple__118 __pyx_mstate_global->__pyx_tuple__118
#define __pyx_tuple__120 __pyx_mstate_global->__pyx_tuple__120
#define __pyx_tuple__123 __pyx_mstate_global->__pyx_tuple__123
#define __pyx_tuple__125 __pyx_mstate_global->__pyx_tuple__125
#define __pyx_tuple__127 __pyx_mstate_global->__pyx_tuple__127
#define __pyx_tuple__128 __pyx_mstate_global->__pyx_tuple__128
#define __pyx_tuple__130 __pyx_mstate_global->__pyx_tuple__130
#define __pyx_tuple__132 __pyx_mstate_global->__pyx_tuple__132
#define __pyx_tuple__136 __pyx_mstate_global->__pyx_tuple__136
#define __pyx_tuple__140 __pyx_mstate_global->__pyx_tuple__140
#define __pyx_tuple__142 __pyx_mstate_global->__pyx_tuple__142
#define __pyx_tuple__145 __pyx_mstate_global->__pyx_tuple__145
#define __pyx_codeobj__10 __pyx_mstate_global->__pyx_codeobj__10
#define __pyx_codeobj__12 __pyx_mstate_global->__pyx_codeobj__12
#define __pyx_codeobj__15 __pyx_mstate_global->__pyx_codeobj__15
#define __pyx_codeobj__16 __pyx_mstate_global->__pyx_codeobj__16
#define __pyx_codeobj__17 __pyx_mstate_global->__pyx_codeobj__17
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__48 __pyx_mstate_global->__pyx_codeobj__48
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__50 __pyx_mstate_global->__pyx_codeobj__50
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__54 __pyx_mstate_global->__pyx_codeobj__54
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__58 __pyx_mstate_global->__pyx_codeobj__58
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__60 __pyx_mstate_global->__pyx_codeobj__60
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__62 __pyx_mstate_global->__pyx_codeobj__62
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__64 __pyx_mstate_global->__pyx_codeobj__64
#define __pyx_codeobj__66 __pyx_mstate_global->__pyx_codeobj__66
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__70 __pyx_mstate_global->__pyx_codeobj__70
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__72 __pyx_mstate_global->__pyx_codeobj__72
#define __pyx_codeobj__74 __pyx_mstate_global->__pyx_codeobj__74
#define __pyx_codeobj__75 __pyx_mstate_global->__pyx_codeobj__75
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__80 __pyx_mstate_global->__pyx_codeobj__80
#define __pyx_codeobj__82 __pyx_mstate_global->__pyx_codeobj__82
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__86 __pyx_mstate_global->__pyx_codeobj__86
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__88 __pyx_mstate_global->__pyx_codeobj__88
#define __pyx_codeobj__89 __pyx_mstate_global->__pyx_codeobj__89
#define __pyx_codeobj__90 __pyx_mstate_global->__pyx_codeobj__90
#define __pyx_codeobj__91 __pyx_mstate_global->__pyx_codeobj__91
#define __pyx_codeobj__92 __pyx_mstate_global->__pyx_codeobj__92
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__94 __pyx_mstate_global->__pyx_codeobj__94
#define __pyx_codeobj__96 __pyx_mstate_global->__pyx_codeobj__96
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__98 __pyx_mstate_global->__pyx_codeobj__98
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
#define __pyx_codeobj__105 __pyx_mstate_global->__pyx_codeobj__105
#define __pyx_codeobj__107 __pyx_mstate_global->__pyx_codeobj__107
#define __pyx_codeobj__109 __pyx_mstate_global->__pyx_codeobj__109
#define __pyx_codeobj__111 __pyx_mstate_global->__pyx_codeobj__111
#define __pyx_codeobj__112 __pyx_mstate_global->__pyx_codeobj__112
#define __pyx_codeobj__113 __pyx_mstate_global->__pyx_codeobj__113
#define __pyx_codeobj__115 __pyx_mstate_global->__pyx_codeobj__115
#define __pyx_codeobj__117 __pyx_mstate_global->__pyx_codeobj__117
#define __pyx_codeobj__119 __pyx_mstate_global->__pyx_codeobj__119
#define __pyx_codeobj__121 __pyx_mstate_global->__pyx_codeobj__121
#define __pyx_codeobj__122 __pyx_mstate_global->__pyx_codeobj__122
#define __pyx_codeobj__124 __pyx_mstate_global->__pyx_codeobj__124
#define __pyx_codeobj__126 __pyx_mstate_global->__pyx_codeobj__126
#define __pyx_codeobj__129 __pyx_mstate_global->__pyx_codeobj__129
#define __pyx_codeobj__131 __pyx_mstate_global->__pyx_codeobj__131
#define __pyx_codeobj__133 __pyx_mstate_global->__pyx_codeobj__133
#define __pyx_codeobj__134 __pyx_mstate_global->__pyx_codeobj__134
#define __pyx_codeobj__135 __pyx_mstate_global->__pyx_codeobj__135
#define __pyx_codeobj__137 __pyx_mstate_global->__pyx_codeobj__137
#define __pyx_codeobj__138 __pyx_mstate_global->__pyx_codeobj__138
#define __pyx_codeobj__139 __pyx_mstate_global->__pyx_codeobj__139
#define __pyx_codeobj__141 __pyx_mstate_global->__pyx_codeobj__141
#define __pyx_codeobj__143 __pyx_mstate_global->__pyx_codeobj__143
#define __pyx_codeobj__144 __pyx_mstate_global->__pyx_codeobj__144
#define __pyx_codeobj__146 __pyx_mstate_global->__pyx_codeobj__146
/* #### Code section: module_code ### */

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string", 1);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string", 1);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string", 1);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string", 1);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string", 1);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(std::vector<std::string>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_6libcpp_6string_std__in_string")
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  char const *__pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_6libcpp_6string_std__in_string")
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_2 = std::string(__pyx_v_data, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 16, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_6libcpp_6string_std__in_string")
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "pair.to_py":190
 * 
 * @cname("__pyx_convert_pair_to_py_double____double")
 * cdef object __pyx_convert_pair_to_py_double____double(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_double____double(std::pair<double,double>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_double____double", 1);

  /* "pair.to_py":191
 * @cname("__pyx_convert_pair_to_py_double____double")
 * cdef object __pyx_convert_pair_to_py_double____double(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":190
 * 
 * @cname("__pyx_convert_pair_to_py_double____double")
 * cdef object __pyx_convert_pair_to_py_double____double(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_double____double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(std::vector<std::pair<double,double> >  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __pyx_convert_pair_to_py_double____double((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":190
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____size_t")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____size_t(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_string____size_t(std::pair<std::string,size_t>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_string____size_t", 1);

  /* "pair.to_py":191
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____size_t")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____size_t(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":190
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____size_t")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____size_t(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_string____size_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___(std::vector<std::pair<std::string,size_t> >  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __pyx_convert_pair_to_py_std_3a__3a_string____size_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e____3e___(std::vector<std::vector<std::pair<std::string,size_t> > >  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e____3e___", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e____3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e____3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e____3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e___((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e____3e___(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 1);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((double)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 48, __pyx_L1_error)
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *__pyx_v_o) {
  std::vector<std::string>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_string", 1);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((std::string)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 48, __pyx_L1_error)
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumTypeToPy":3
 * 
 * @cname("__Pyx_Enum_6python_6lhapdf_enum__dunderpyx_t_6python_6lhapdf_FlavorScheme_to_py")
 * cdef __Pyx_Enum_6python_6lhapdf_enum__dunderpyx_t_6python_6lhapdf_FlavorScheme_to_py(FlavorScheme c_val):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_enum
 *     __pyx_enum = FlavorScheme
 */

static PyObject *__Pyx_Enum_6python_6lhapdf_enum__dunderpyx_t_6python_6lhapdf_FlavorScheme_to_py(enum __pyx_t_6python_6lhapdf_FlavorScheme __pyx_v_c_val) {
  PyObject *__pyx_v___pyx_enum = 0;
  int __pyx_v_underlying_c_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_Enum_6python_6lhapdf_enum__dunderpyx_t_6python_6lhapdf_FlavorScheme_to_py", 1);

  /* "EnumTypeToPy":5
 * cdef __Pyx_Enum_6python_6lhapdf_enum__dunderpyx_t_6python_6lhapdf_FlavorScheme_to_py(FlavorScheme c_val):
 *     cdef object __pyx_enum
 *     __pyx_enum = FlavorScheme             # <<<<<<<<<<<<<<
 * 
 *     if 0:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FlavorScheme); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v___pyx_enum = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "EnumTypeToPy":7
 *     __pyx_enum = FlavorScheme
 * 
 *     if 0:             # <<<<<<<<<<<<<<
 *         pass
 *     elif c_val == FlavorScheme.FIXED:
 */
  switch (__pyx_v_c_val) {
    case __pyx_e_6python_6lhapdf_FIXED:

    /* "EnumTypeToPy":10
 *         pass
 *     elif c_val == FlavorScheme.FIXED:
 *         return __pyx_enum.FIXED             # <<<<<<<<<<<<<<
 *     elif c_val == FlavorScheme.VARIABLE:
 *         return __pyx_enum.VARIABLE
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v___pyx_enum, __pyx_n_s_FIXED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "EnumTypeToPy":9
 *     if 0:
 *         pass
 *     elif c_val == FlavorScheme.FIXED:             # <<<<<<<<<<<<<<
 *         return __pyx_enum.FIXED
 *     elif c_val == FlavorScheme.VARIABLE:
 */
    break;
    case __pyx_e_6python_6lhapdf_VARIABLE:

    /* "EnumTypeToPy":12
 *         return __pyx_enum.FIXED
 *     elif c_val == FlavorScheme.VARIABLE:
 *         return __pyx_enum.VARIABLE             # <<<<<<<<<<<<<<
 *     else:
 *         underlying_c_val = <int>c_val
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v___pyx_enum, __pyx_n_s_VARIABLE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "EnumTypeToPy":11
 *     elif c_val == FlavorScheme.FIXED:
 *         return __pyx_enum.FIXED
 *     elif c_val == FlavorScheme.VARIABLE:             # <<<<<<<<<<<<<<
 *         return __pyx_enum.VARIABLE
 *     else:
 */
    break;
    default:

    /* "EnumTypeToPy":14
 *         return __pyx_enum.VARIABLE
 *     else:
 *         underlying_c_val = <int>c_val             # <<<<<<<<<<<<<<
 *         return __pyx_enum(underlying_c_val)
 * 
 */
    __pyx_v_underlying_c_val = ((int)__pyx_v_c_val);

    /* "EnumTypeToPy":15
 *     else:
 *         underlying_c_val = <int>c_val
 *         return __pyx_enum(underlying_c_val)             # <<<<<<<<<<<<<<
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_underlying_c_val); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v___pyx_enum);
    __pyx_t_3 = __pyx_v___pyx_enum; __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
  }

  /* "EnumTypeToPy":3
 * 
 * @cname("__Pyx_Enum_6python_6lhapdf_enum__dunderpyx_t_6python_6lhapdf_FlavorScheme_to_py")
 * cdef __Pyx_Enum_6python_6lhapdf_enum__dunderpyx_t_6python_6lhapdf_FlavorScheme_to_py(FlavorScheme c_val):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_enum
 *     __pyx_enum = FlavorScheme
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("EnumTypeToPy.__Pyx_Enum_6python_6lhapdf_enum__dunderpyx_t_6python_6lhapdf_FlavorScheme_to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_enum);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":17
 * @cython.internal
 * cdef class __Pyx_EnumMeta(type):
 *     def __init__(cls, name, parents, dct):             # <<<<<<<<<<<<<<
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()
 */

/* Python wrapper */
static int __pyx_pw_8EnumBase_14__Pyx_EnumMeta_1__init__(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8EnumBase_14__Pyx_EnumMeta_1__init__(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_parents = 0;
  PyObject *__pyx_v_dct = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_parents,&__pyx_n_s_dct,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 17, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_parents)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 17, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(1, 17, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dct)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 17, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(1, 17, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(1, 17, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
    }
    __pyx_v_name = values[0];
    __pyx_v_parents = values[1];
    __pyx_v_dct = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 17, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta___init__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_cls), __pyx_v_name, __pyx_v_parents, __pyx_v_dct);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8EnumBase_14__Pyx_EnumMeta___init__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls, PyObject *__pyx_v_name, PyObject *__pyx_v_parents, PyObject *__pyx_v_dct) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "EnumBase":18
 * cdef class __Pyx_EnumMeta(type):
 *     def __init__(cls, name, parents, dct):
 *         type.__init__(cls, name, parents, dct)             # <<<<<<<<<<<<<<
 *         cls.__members__ = __Pyx_OrderedDict()
 *     def __iter__(cls):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyType_Type)), __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_3, ((PyObject *)__pyx_v_cls), __pyx_v_name, __pyx_v_parents, __pyx_v_dct};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":19
 *     def __init__(cls, name, parents, dct):
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()             # <<<<<<<<<<<<<<
 *     def __iter__(cls):
 *         return iter(cls.__members__.values())
 */
  __Pyx_INCREF(__Pyx_OrderedDict);
  __pyx_t_2 = __Pyx_OrderedDict; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 19, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_members, __pyx_t_1) < 0) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":17
 * @cython.internal
 * cdef class __Pyx_EnumMeta(type):
 *     def __init__(cls, name, parents, dct):             # <<<<<<<<<<<<<<
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":20
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()
 *     def __iter__(cls):             # <<<<<<<<<<<<<<
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_3__iter__(PyObject *__pyx_v_cls); /*proto*/
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_3__iter__(PyObject *__pyx_v_cls) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta_2__iter__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_2__iter__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 1);

  /* "EnumBase":21
 *         cls.__members__ = __Pyx_OrderedDict()
 *     def __iter__(cls):
 *         return iter(cls.__members__.values())             # <<<<<<<<<<<<<<
 *     def __getitem__(cls, name):
 *         return cls.__members__[name]
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_members); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "EnumBase":20
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()
 *     def __iter__(cls):             # <<<<<<<<<<<<<<
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":22
 *     def __iter__(cls):
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):             # <<<<<<<<<<<<<<
 *         return cls.__members__[name]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_5__getitem__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_5__getitem__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta_4__getitem__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_cls), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_4__getitem__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);

  /* "EnumBase":23
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):
 *         return cls.__members__[name]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_members); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "EnumBase":22
 *     def __iter__(cls):
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):             # <<<<<<<<<<<<<<
 *         return cls.__members__[name]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_EnumMeta_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8EnumBase_14__Pyx_EnumMeta_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta_6__reduce_cython__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_6__reduce_cython__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xe3b0c44, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xe3b0c44, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xe3b0c44, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle___Pyx_EnumMeta); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xe3b0c44, None), state
 *     else:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xe3b0c44, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle___Pyx_EnumMeta__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle___Pyx_EnumMeta); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle___Pyx_EnumMeta__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_EnumMeta_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8EnumBase_14__Pyx_EnumMeta_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta_8__setstate_cython__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_8__setstate_cython__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle___Pyx_EnumMeta__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle___Pyx_EnumMeta__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle___Pyx_EnumMeta__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":28
 * cdef object __Pyx_EnumBase
 * class __Pyx_EnumBase(int, metaclass=__Pyx_EnumMeta):
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_1__new__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_EnumBase_1__new__ = {"__new__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8EnumBase_14__Pyx_EnumBase_1__new__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_1__new__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__new__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cls,&__pyx_n_s_value,&__pyx_n_s_name,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cls)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 28, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 28, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__new__", 0, 2, 3, 1); __PYX_ERR(1, 28, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 28, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__new__") < 0)) __PYX_ERR(1, 28, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cls = values[0];
    __pyx_v_value = values[1];
    __pyx_v_name = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__new__", 0, 2, 3, __pyx_nargs); __PYX_ERR(1, 28, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__new__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumBase___new__(__pyx_self, __pyx_v_cls, __pyx_v_value, __pyx_v_name);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase___new__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_value, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_res = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__new__", 1);

  /* "EnumBase":29
 * class __Pyx_EnumBase(int, metaclass=__Pyx_EnumMeta):
 *     def __new__(cls, value, name=None):
 *         for v in cls:             # <<<<<<<<<<<<<<
 *             if v == value:
 *                 return v
 */
  if (likely(PyList_CheckExact(__pyx_v_cls)) || PyTuple_CheckExact(__pyx_v_cls)) {
    __pyx_t_1 = __pyx_v_cls; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_cls); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 29, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 29, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 29, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 29, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 29, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 29, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 29, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 29, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "EnumBase":30
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 *             if v == value:             # <<<<<<<<<<<<<<
 *                 return v
 *         if name is None:
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_v, __pyx_v_value, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 30, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 30, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {

      /* "EnumBase":31
 *         for v in cls:
 *             if v == value:
 *                 return v             # <<<<<<<<<<<<<<
 *         if name is None:
 *             raise ValueError("Unknown enum value: '%s'" % value)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_v);
      __pyx_r = __pyx_v_v;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "EnumBase":30
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 *             if v == value:             # <<<<<<<<<<<<<<
 *                 return v
 *         if name is None:
 */
    }

    /* "EnumBase":29
 * class __Pyx_EnumBase(int, metaclass=__Pyx_EnumMeta):
 *     def __new__(cls, value, name=None):
 *         for v in cls:             # <<<<<<<<<<<<<<
 *             if v == value:
 *                 return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":32
 *             if v == value:
 *                 return v
 *         if name is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown enum value: '%s'" % value)
 *         res = int.__new__(cls, value)
 */
  __pyx_t_5 = (__pyx_v_name == Py_None);
  if (unlikely(__pyx_t_5)) {

    /* "EnumBase":33
 *                 return v
 *         if name is None:
 *             raise ValueError("Unknown enum value: '%s'" % value)             # <<<<<<<<<<<<<<
 *         res = int.__new__(cls, value)
 *         res.name = name
 */
    __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Unknown_enum_value_s, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 33, __pyx_L1_error)

    /* "EnumBase":32
 *             if v == value:
 *                 return v
 *         if name is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown enum value: '%s'" % value)
 *         res = int.__new__(cls, value)
 */
  }

  /* "EnumBase":34
 *         if name is None:
 *             raise ValueError("Unknown enum value: '%s'" % value)
 *         res = int.__new__(cls, value)             # <<<<<<<<<<<<<<
 *         res.name = name
 *         setattr(cls, name, res)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyInt_Type)), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_v_cls, __pyx_v_value};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_v_res = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "EnumBase":35
 *             raise ValueError("Unknown enum value: '%s'" % value)
 *         res = int.__new__(cls, value)
 *         res.name = name             # <<<<<<<<<<<<<<
 *         setattr(cls, name, res)
 *         cls.__members__[name] = res
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_res, __pyx_n_s_name, __pyx_v_name) < 0) __PYX_ERR(1, 35, __pyx_L1_error)

  /* "EnumBase":36
 *         res = int.__new__(cls, value)
 *         res.name = name
 *         setattr(cls, name, res)             # <<<<<<<<<<<<<<
 *         cls.__members__[name] = res
 *         return res
 */
  __pyx_t_8 = PyObject_SetAttr(__pyx_v_cls, __pyx_v_name, __pyx_v_res); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 36, __pyx_L1_error)

  /* "EnumBase":37
 *         res.name = name
 *         setattr(cls, name, res)
 *         cls.__members__[name] = res             # <<<<<<<<<<<<<<
 *         return res
 *     def __repr__(self):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_members); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely((PyObject_SetItem(__pyx_t_4, __pyx_v_name, __pyx_v_res) < 0))) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "EnumBase":38
 *         setattr(cls, name, res)
 *         cls.__members__[name] = res
 *         return res             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "EnumBase":28
 * cdef object __Pyx_EnumBase
 * class __Pyx_EnumBase(int, metaclass=__Pyx_EnumMeta):
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__new__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":39
 *         cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_3__repr__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_EnumBase_3__repr__ = {"__repr__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8EnumBase_14__Pyx_EnumBase_3__repr__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_3__repr__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 39, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__repr__") < 0)) __PYX_ERR(1, 39, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__repr__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 39, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumBase_2__repr__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "EnumBase":40
 *         return res
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(1, 40, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_self)) __PYX_ERR(1, 40, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_s_d, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EnumBase":39
 *         cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":41
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_5__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_EnumBase_5__str__ = {"__str__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8EnumBase_14__Pyx_EnumBase_5__str__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_5__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 41, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__str__") < 0)) __PYX_ERR(1, 41, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__str__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 41, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumBase_4__str__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase_4__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 1);

  /* "EnumBase":42
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 *         return "%s.%s" % (self.__class__.__name__, self.name)             # <<<<<<<<<<<<<<
 * 
 * if PY_VERSION_HEX >= 0x03040000:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(1, 42, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EnumBase":41
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":49
 * cdef object __Pyx_FlagBase
 * class __Pyx_FlagBase(int, metaclass=__Pyx_EnumMeta):
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_FlagBase_1__new__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_FlagBase_1__new__ = {"__new__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8EnumBase_14__Pyx_FlagBase_1__new__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_FlagBase_1__new__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__new__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cls,&__pyx_n_s_value,&__pyx_n_s_name,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cls)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 49, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 49, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__new__", 0, 2, 3, 1); __PYX_ERR(1, 49, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 49, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__new__") < 0)) __PYX_ERR(1, 49, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cls = values[0];
    __pyx_v_value = values[1];
    __pyx_v_name = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__new__", 0, 2, 3, __pyx_nargs); __PYX_ERR(1, 49, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("EnumBase.__Pyx_FlagBase.__new__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_FlagBase___new__(__pyx_self, __pyx_v_cls, __pyx_v_value, __pyx_v_name);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_FlagBase___new__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_value, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_res = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__new__", 1);

  /* "EnumBase":50
 * class __Pyx_FlagBase(int, metaclass=__Pyx_EnumMeta):
 *     def __new__(cls, value, name=None):
 *         for v in cls:             # <<<<<<<<<<<<<<
 *             if v == value:
 *                 return v
 */
  if (likely(PyList_CheckExact(__pyx_v_cls)) || PyTuple_CheckExact(__pyx_v_cls)) {
    __pyx_t_1 = __pyx_v_cls; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_cls); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 50, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 50, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 50, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 50, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 50, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 50, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 50, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 50, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "EnumBase":51
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 *             if v == value:             # <<<<<<<<<<<<<<
 *                 return v
 *         res = int.__new__(cls, value)
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_v, __pyx_v_value, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {

      /* "EnumBase":52
 *         for v in cls:
 *             if v == value:
 *                 return v             # <<<<<<<<<<<<<<
 *         res = int.__new__(cls, value)
 *         if name is None:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_v);
      __pyx_r = __pyx_v_v;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "EnumBase":51
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 *             if v == value:             # <<<<<<<<<<<<<<
 *                 return v
 *         res = int.__new__(cls, value)
 */
    }

    /* "EnumBase":50
 * class __Pyx_FlagBase(int, metaclass=__Pyx_EnumMeta):
 *     def __new__(cls, value, name=None):
 *         for v in cls:             # <<<<<<<<<<<<<<
 *             if v == value:
 *                 return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":53
 *             if v == value:
 *                 return v
 *         res = int.__new__(cls, value)             # <<<<<<<<<<<<<<
 *         if name is None:
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyInt_Type)), __pyx_n_s_new); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_v_cls, __pyx_v_value};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_res = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "EnumBase":54
 *                 return v
 *         res = int.__new__(cls, value)
 *         if name is None:             # <<<<<<<<<<<<<<
 * 
 *             res.name = ""
 */
  __pyx_t_5 = (__pyx_v_name == Py_None);
  if (__pyx_t_5) {

    /* "EnumBase":56
 *         if name is None:
 * 
 *             res.name = ""             # <<<<<<<<<<<<<<
 *         else:
 *             res.name = name
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_res, __pyx_n_s_name, __pyx_kp_s_) < 0) __PYX_ERR(1, 56, __pyx_L1_error)

    /* "EnumBase":54
 *                 return v
 *         res = int.__new__(cls, value)
 *         if name is None:             # <<<<<<<<<<<<<<
 * 
 *             res.name = ""
 */
    goto __pyx_L7;
  }

  /* "EnumBase":58
 *             res.name = ""
 *         else:
 *             res.name = name             # <<<<<<<<<<<<<<
 *             setattr(cls, name, res)
 *             cls.__members__[name] = res
 */
  /*else*/ {
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_res, __pyx_n_s_name, __pyx_v_name) < 0) __PYX_ERR(1, 58, __pyx_L1_error)

    /* "EnumBase":59
 *         else:
 *             res.name = name
 *             setattr(cls, name, res)             # <<<<<<<<<<<<<<
 *             cls.__members__[name] = res
 *         return res
 */
    __pyx_t_8 = PyObject_SetAttr(__pyx_v_cls, __pyx_v_name, __pyx_v_res); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 59, __pyx_L1_error)

    /* "EnumBase":60
 *             res.name = name
 *             setattr(cls, name, res)
 *             cls.__members__[name] = res             # <<<<<<<<<<<<<<
 *         return res
 *     def __repr__(self):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_members); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_v_name, __pyx_v_res) < 0))) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L7:;

  /* "EnumBase":61
 *             setattr(cls, name, res)
 *             cls.__members__[name] = res
 *         return res             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "EnumBase":49
 * cdef object __Pyx_FlagBase
 * class __Pyx_FlagBase(int, metaclass=__Pyx_EnumMeta):
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("EnumBase.__Pyx_FlagBase.__new__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":62
 *             cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_FlagBase_3__repr__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_FlagBase_3__repr__ = {"__repr__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8EnumBase_14__Pyx_FlagBase_3__repr__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_FlagBase_3__repr__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 62, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__repr__") < 0)) __PYX_ERR(1, 62, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__repr__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 62, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("EnumBase.__Pyx_FlagBase.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_FlagBase_2__repr__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_FlagBase_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "EnumBase":63
 *         return res
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(1, 63, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_self)) __PYX_ERR(1, 63, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_s_d, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EnumBase":62
 *             cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EnumBase.__Pyx_FlagBase.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":64
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_FlagBase_5__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_FlagBase_5__str__ = {"__str__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8EnumBase_14__Pyx_FlagBase_5__str__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_FlagBase_5__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 64, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__str__") < 0)) __PYX_ERR(1, 64, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__str__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 64, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("EnumBase.__Pyx_FlagBase.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_FlagBase_4__str__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_FlagBase_4__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 1);

  /* "EnumBase":65
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 *         return "%s.%s" % (self.__class__.__name__, self.name)             # <<<<<<<<<<<<<<
 * 
 * if PY_VERSION_HEX >= 0x03060000:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(1, 65, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EnumBase":64
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EnumBase.__Pyx_FlagBase.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle___Pyx_EnumMeta(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_1__pyx_unpickle___Pyx_EnumMeta(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_1__pyx_unpickle___Pyx_EnumMeta = {"__pyx_unpickle___Pyx_EnumMeta", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8EnumBase_1__pyx_unpickle___Pyx_EnumMeta, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8EnumBase_1__pyx_unpickle___Pyx_EnumMeta(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle___Pyx_EnumMeta (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle___Pyx_EnumMeta", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle___Pyx_EnumMeta", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle___Pyx_EnumMeta") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle___Pyx_EnumMeta", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("EnumBase.__pyx_unpickle___Pyx_EnumMeta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase___pyx_unpickle___Pyx_EnumMeta(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase___pyx_unpickle___Pyx_EnumMeta(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle___Pyx_EnumMeta", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__2, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = __Pyx_EnumMeta.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = __Pyx_EnumMeta.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = __Pyx_EnumMeta.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype___Pyx_EnumMeta), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = __Pyx_EnumMeta.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = __Pyx_EnumMeta.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_unpickle___Pyx_EnumMeta__set_state(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = __Pyx_EnumMeta.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle___Pyx_EnumMeta(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("EnumBase.__pyx_unpickle___Pyx_EnumMeta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_unpickle___Pyx_EnumMeta__set_state(struct __pyx_obj___Pyx_EnumMeta *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle___Pyx_EnumMeta__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("EnumBase.__pyx_unpickle___Pyx_EnumMeta__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":33
 *     """
 *     cdef c.PDF* _ptr
 *     cdef set_ptr(self, c.PDF* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

static PyObject *__pyx_f_6python_6lhapdf_3PDF_set_ptr(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, LHAPDF::PDF *__pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ptr", 1);

  /* "python/lhapdf.pyx":34
 *     cdef c.PDF* _ptr
 *     cdef set_ptr(self, c.PDF* ptr):
 *         self._ptr = ptr             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_ptr = __pyx_v_ptr;

  /* "python/lhapdf.pyx":33
 *     """
 *     cdef c.PDF* _ptr
 *     cdef set_ptr(self, c.PDF* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":36
 *         self._ptr = ptr
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._ptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6python_6lhapdf_3PDF_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6python_6lhapdf_3PDF_1__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_6python_6lhapdf_3PDF___dealloc__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6python_6lhapdf_3PDF___dealloc__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {

  /* "python/lhapdf.pyx":37
 * 
 *     def __dealloc__(self):
 *         del self._ptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->_ptr;

  /* "python/lhapdf.pyx":36
 *         self._ptr = ptr
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._ptr
 * 
 */

  /* function exit code */
}

/* "python/lhapdf.pyx":39
 *         del self._ptr
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def memberID(self):
 *         "The PDF set member number of this PDF."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_8memberID_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_8memberID_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_8memberID___get__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_8memberID___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":42
 *     def memberID(self):
 *         "The PDF set member number of this PDF."
 *         return self._ptr.memberID()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->memberID();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 42, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":39
 *         del self._ptr
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def memberID(self):
 *         "The PDF set member number of this PDF."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDF.memberID.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":44
 *         return self._ptr.memberID()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def lhapdfID(self):
 *         "The LHAPDF ID number of this PDF member."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_8lhapdfID_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_8lhapdfID_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_8lhapdfID___get__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_8lhapdfID___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":47
 *     def lhapdfID(self):
 *         "The LHAPDF ID number of this PDF member."
 *         return self._ptr.lhapdfID()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->lhapdfID();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 47, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":44
 *         return self._ptr.memberID()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def lhapdfID(self):
 *         "The LHAPDF ID number of this PDF member."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDF.lhapdfID.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":49
 *         return self._ptr.lhapdfID()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def type(self):
 *         "The type of PDF member, e.g. central, error."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_4type_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_4type___get__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_4type___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":52
 *     def type(self):
 *         "The type of PDF member, e.g. central, error."
 *         return self._ptr.type()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->type();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 52, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":49
 *         return self._ptr.lhapdfID()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def type(self):
 *         "The type of PDF member, e.g. central, error."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDF.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":54
 *         return self._ptr.type()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def description(self):
 *         "Description of this PDF member."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_11description_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_11description_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_11description___get__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_11description___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":57
 *     def description(self):
 *         "Description of this PDF member."
 *         return self._ptr.description()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->description();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 57, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":54
 *         return self._ptr.type()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def description(self):
 *         "Description of this PDF member."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDF.description.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":59
 *         return self._ptr.description()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def orderQCD(self):
 *         "Max number of loops involved in this PDF's evolution."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_8orderQCD_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_8orderQCD_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_8orderQCD___get__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_8orderQCD___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":62
 *     def orderQCD(self):
 *         "Max number of loops involved in this PDF's evolution."
 *         return self._ptr.orderQCD()             # <<<<<<<<<<<<<<
 *     # Alias
 *     #qcdOrder = orderQCD
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->orderQCD();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 62, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":59
 *         return self._ptr.description()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def orderQCD(self):
 *         "Max number of loops involved in this PDF's evolution."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDF.orderQCD.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":66
 *     #qcdOrder = orderQCD
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def xMin(self):
 *         "Minimum valid value of x to be used with this PDF"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_4xMin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_4xMin_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_4xMin___get__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_4xMin___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":69
 *     def xMin(self):
 *         "Minimum valid value of x to be used with this PDF"
 *         return self._ptr.xMin()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->xMin()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":66
 *     #qcdOrder = orderQCD
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def xMin(self):
 *         "Minimum valid value of x to be used with this PDF"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDF.xMin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":71
 *         return self._ptr.xMin()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def xMax(self):
 *         "Maximum valid value of x to be used with this PDF"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_4xMax_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_4xMax_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_4xMax___get__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_4xMax___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":74
 *     def xMax(self):
 *         "Maximum valid value of x to be used with this PDF"
 *         return self._ptr.xMax()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->xMax()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":71
 *         return self._ptr.xMin()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def xMax(self):
 *         "Maximum valid value of x to be used with this PDF"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDF.xMax.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":76
 *         return self._ptr.xMax()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def q2Min(self):
 *         "Minimum valid value of x to be used with this PDF"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_5q2Min_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_5q2Min_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_5q2Min___get__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_5q2Min___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":79
 *     def q2Min(self):
 *         "Minimum valid value of x to be used with this PDF"
 *         return self._ptr.q2Min()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->q2Min()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":76
 *         return self._ptr.xMax()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def q2Min(self):
 *         "Minimum valid value of x to be used with this PDF"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDF.q2Min.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":81
 *         return self._ptr.q2Min()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def q2Max(self):
 *         "Maximum valid value of x to be used with this PDF"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_5q2Max_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_5q2Max_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_5q2Max___get__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_5q2Max___get__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":84
 *     def q2Max(self):
 *         "Maximum valid value of x to be used with this PDF"
 *         return self._ptr.q2Max()             # <<<<<<<<<<<<<<
 * 
 *     # def alphaS(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->q2Max()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":81
 *         return self._ptr.q2Min()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def q2Max(self):
 *         "Maximum valid value of x to be used with this PDF"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDF.q2Max.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":94
 *     #     return obj
 * 
 *     def alphasQ(self, q):             # <<<<<<<<<<<<<<
 *         "Return alpha_s at q"
 *         return self._ptr.alphasQ(q)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_3alphasQ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_2alphasQ, "PDF.alphasQ(self, q)\nReturn alpha_s at q");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_3alphasQ = {"alphasQ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_3alphasQ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_2alphasQ};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_3alphasQ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_q = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alphasQ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 94, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "alphasQ") < 0)) __PYX_ERR(0, 94, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_q = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("alphasQ", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 94, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDF.alphasQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_2alphasQ(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v_q);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_2alphasQ(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alphasQ", 1);

  /* "python/lhapdf.pyx":96
 *     def alphasQ(self, q):
 *         "Return alpha_s at q"
 *         return self._ptr.alphasQ(q)             # <<<<<<<<<<<<<<
 * 
 *     def alphasQ2(self, q2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_q); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_ptr->alphasQ(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 96, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":94
 *     #     return obj
 * 
 *     def alphasQ(self, q):             # <<<<<<<<<<<<<<
 *         "Return alpha_s at q"
 *         return self._ptr.alphasQ(q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDF.alphasQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":98
 *         return self._ptr.alphasQ(q)
 * 
 *     def alphasQ2(self, q2):             # <<<<<<<<<<<<<<
 *         "Return alpha_s at q2"
 *         return self._ptr.alphasQ2(q2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_5alphasQ2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_4alphasQ2, "PDF.alphasQ2(self, q2)\nReturn alpha_s at q2");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_5alphasQ2 = {"alphasQ2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_5alphasQ2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_4alphasQ2};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_5alphasQ2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_q2 = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alphasQ2 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q2,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "alphasQ2") < 0)) __PYX_ERR(0, 98, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_q2 = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("alphasQ2", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 98, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDF.alphasQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_4alphasQ2(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v_q2);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_4alphasQ2(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alphasQ2", 1);

  /* "python/lhapdf.pyx":100
 *     def alphasQ2(self, q2):
 *         "Return alpha_s at q2"
 *         return self._ptr.alphasQ2(q2)             # <<<<<<<<<<<<<<
 * 
 *     def xfxQ(self, *args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_q2); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 100, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_ptr->alphasQ2(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 100, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":98
 *         return self._ptr.alphasQ(q)
 * 
 *     def alphasQ2(self, q2):             # <<<<<<<<<<<<<<
 *         "Return alpha_s at q2"
 *         return self._ptr.alphasQ2(q2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDF.alphasQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":102
 *         return self._ptr.alphasQ2(q2)
 * 
 *     def xfxQ(self, *args):             # <<<<<<<<<<<<<<
 *         """Return the PDF xf(x,Q2) value for the given parton ID, x, and Q values.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_7xfxQ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_6xfxQ, "PDF.xfxQ(self, *args)\nReturn the PDF xf(x,Q2) value for the given parton ID, x, and Q values.\n\n        Two forms of arguments are allowed:\n        3-args: (pid, x, q)\n          If all are scalars, a scalar is returned; if pid is a sequence, a list is\n          returned; if x and q are sequences of the same length, they will be zipped\n          and a (maybe nested) list of the return values as for scalar x/q will be returned.\n          If pid is None, behave like the 2-arg version.\n        2-args: (x, q)\n          As for 3 args, but always returning results for all PIDs, as a dict. The return\n          will be many such dicts in a zipped list if x/q are sequences.\n        ");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_7xfxQ = {"xfxQ", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_7xfxQ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_6xfxQ};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_7xfxQ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xfxQ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "xfxQ", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_6xfxQ(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_6xfxQ(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_pid = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_q = NULL;
  PyObject *__pyx_v_eachx = NULL;
  PyObject *__pyx_v_eachq = NULL;
  PyObject *__pyx_v_eachpid = NULL;
  PyObject *__pyx_7genexpr__pyx_v_pid = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_pid = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *(*__pyx_t_17)(PyObject *);
  Py_ssize_t __pyx_t_18;
  PyObject *(*__pyx_t_19)(PyObject *);
  double __pyx_t_20;
  double __pyx_t_21;
  double __pyx_t_22;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("xfxQ", 1);

  /* "python/lhapdf.pyx":118
 *         # TODO: Reduce duplication between Q and Q2 variants?
 *         # If only we'd used PID as the final arg rather than the first, then we could have made it optional/default None...
 *         if len(args) == 3:             # <<<<<<<<<<<<<<
 *             pid, x, q = args
 *             if pid is None:
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 118, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 3);
  if (__pyx_t_2) {

    /* "python/lhapdf.pyx":119
 *         # If only we'd used PID as the final arg rather than the first, then we could have made it optional/default None...
 *         if len(args) == 3:
 *             pid, x, q = args             # <<<<<<<<<<<<<<
 *             if pid is None:
 *                 return self.xfxQ(x, q)
 */
    if (1) {
      PyObject* sequence = __pyx_v_args;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 119, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
    }
    __pyx_v_pid = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_x = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_q = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "python/lhapdf.pyx":120
 *         if len(args) == 3:
 *             pid, x, q = args
 *             if pid is None:             # <<<<<<<<<<<<<<
 *                 return self.xfxQ(x, q)
 *             try:
 */
    __pyx_t_2 = (__pyx_v_pid == Py_None);
    if (__pyx_t_2) {

      /* "python/lhapdf.pyx":121
 *             pid, x, q = args
 *             if pid is None:
 *                 return self.xfxQ(x, q)             # <<<<<<<<<<<<<<
 *             try:
 *                 try:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_xfxQ); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_q};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "python/lhapdf.pyx":120
 *         if len(args) == 3:
 *             pid, x, q = args
 *             if pid is None:             # <<<<<<<<<<<<<<
 *                 return self.xfxQ(x, q)
 *             try:
 */
    }

    /* "python/lhapdf.pyx":122
 *             if pid is None:
 *                 return self.xfxQ(x, q)
 *             try:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "python/lhapdf.pyx":123
 *                 return self.xfxQ(x, q)
 *             try:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 *                 except TypeError:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_12);
          /*try:*/ {

            /* "python/lhapdf.pyx":124
 *             try:
 *                 try:
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]             # <<<<<<<<<<<<<<
 *                 except TypeError:
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 124, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_zip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_13 = NULL;
            __pyx_t_6 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_13)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_13);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
                __pyx_t_6 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_v_x, __pyx_v_q};
              __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L11_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
            if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
              __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3);
              __pyx_t_1 = 0;
              __pyx_t_14 = NULL;
            } else {
              __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L11_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 124, __pyx_L11_error)
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            for (;;) {
              if (likely(!__pyx_t_14)) {
                if (likely(PyList_CheckExact(__pyx_t_3))) {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 124, __pyx_L11_error)
                    #endif
                    if (__pyx_t_1 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 124, __pyx_L11_error)
                  #else
                  __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L11_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 124, __pyx_L11_error)
                    #endif
                    if (__pyx_t_1 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 124, __pyx_L11_error)
                  #else
                  __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L11_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_14(__pyx_t_3);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 124, __pyx_L11_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
                PyObject* sequence = __pyx_t_4;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 124, __pyx_L11_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_15 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_15 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_13);
                __Pyx_INCREF(__pyx_t_15);
                #else
                __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 124, __pyx_L11_error)
                __Pyx_GOTREF(__pyx_t_13);
                __pyx_t_15 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 124, __pyx_L11_error)
                __Pyx_GOTREF(__pyx_t_15);
                #endif
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_16 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 124, __pyx_L11_error)
                __Pyx_GOTREF(__pyx_t_16);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_17 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_16);
                index = 0; __pyx_t_13 = __pyx_t_17(__pyx_t_16); if (unlikely(!__pyx_t_13)) goto __pyx_L19_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_13);
                index = 1; __pyx_t_15 = __pyx_t_17(__pyx_t_16); if (unlikely(!__pyx_t_15)) goto __pyx_L19_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_15);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_16), 2) < 0) __PYX_ERR(0, 124, __pyx_L11_error)
                __pyx_t_17 = NULL;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                goto __pyx_L20_unpacking_done;
                __pyx_L19_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                __pyx_t_17 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 124, __pyx_L11_error)
                __pyx_L20_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_eachx, __pyx_t_13);
              __pyx_t_13 = 0;
              __Pyx_XDECREF_SET(__pyx_v_eachq, __pyx_t_15);
              __pyx_t_15 = 0;
              __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L11_error)
              __Pyx_GOTREF(__pyx_t_4);
              if (likely(PyList_CheckExact(__pyx_v_pid)) || PyTuple_CheckExact(__pyx_v_pid)) {
                __pyx_t_15 = __pyx_v_pid; __Pyx_INCREF(__pyx_t_15);
                __pyx_t_18 = 0;
                __pyx_t_19 = NULL;
              } else {
                __pyx_t_18 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_v_pid); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 124, __pyx_L11_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_19 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_15); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 124, __pyx_L11_error)
              }
              for (;;) {
                if (likely(!__pyx_t_19)) {
                  if (likely(PyList_CheckExact(__pyx_t_15))) {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_15);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 124, __pyx_L11_error)
                      #endif
                      if (__pyx_t_18 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_13 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_18); __Pyx_INCREF(__pyx_t_13); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 124, __pyx_L11_error)
                    #else
                    __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 124, __pyx_L11_error)
                    __Pyx_GOTREF(__pyx_t_13);
                    #endif
                  } else {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_15);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 124, __pyx_L11_error)
                      #endif
                      if (__pyx_t_18 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_18); __Pyx_INCREF(__pyx_t_13); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 124, __pyx_L11_error)
                    #else
                    __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 124, __pyx_L11_error)
                    __Pyx_GOTREF(__pyx_t_13);
                    #endif
                  }
                } else {
                  __pyx_t_13 = __pyx_t_19(__pyx_t_15);
                  if (unlikely(!__pyx_t_13)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 124, __pyx_L11_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_13);
                }
                __Pyx_XDECREF_SET(__pyx_v_eachpid, __pyx_t_13);
                __pyx_t_13 = 0;
                __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_eachpid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L11_error)
                __pyx_t_20 = __pyx_PyFloat_AsDouble(__pyx_v_eachx); if (unlikely((__pyx_t_20 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L11_error)
                __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_eachq); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L11_error)
                try {
                  __pyx_t_22 = __pyx_v_self->_ptr->xfxQ(__pyx_t_6, __pyx_t_20, __pyx_t_21);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 124, __pyx_L11_error)
                }
                __pyx_t_13 = PyFloat_FromDouble(__pyx_t_22); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 124, __pyx_L11_error)
                __Pyx_GOTREF(__pyx_t_13);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_13))) __PYX_ERR(0, 124, __pyx_L11_error)
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              }
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 124, __pyx_L11_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_r = __pyx_t_5;
            __pyx_t_5 = 0;
            goto __pyx_L15_try_return;

            /* "python/lhapdf.pyx":123
 *                 return self.xfxQ(x, q)
 *             try:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 *                 except TypeError:
 */
          }
          __pyx_L11_error:;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "python/lhapdf.pyx":125
 *                 try:
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 *                 except TypeError:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]
 *             except TypeError:
 */
          __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
          if (__pyx_t_6) {
            __Pyx_AddTraceback("python.lhapdf.PDF.xfxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_3, &__pyx_t_4) < 0) __PYX_ERR(0, 125, __pyx_L13_except_error)
            __Pyx_XGOTREF(__pyx_t_5);
            __Pyx_XGOTREF(__pyx_t_3);
            __Pyx_XGOTREF(__pyx_t_4);

            /* "python/lhapdf.pyx":126
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 *                 except TypeError:
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 try:
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_15 = PyList_New(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 126, __pyx_L13_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_zip); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 126, __pyx_L13_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_23 = NULL;
            __pyx_t_6 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_16))) {
              __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_16);
              if (likely(__pyx_t_23)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                __Pyx_INCREF(__pyx_t_23);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_16, function);
                __pyx_t_6 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_23, __pyx_v_x, __pyx_v_q};
              __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
              if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 126, __pyx_L13_except_error)
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
            if (likely(PyList_CheckExact(__pyx_t_13)) || PyTuple_CheckExact(__pyx_t_13)) {
              __pyx_t_16 = __pyx_t_13; __Pyx_INCREF(__pyx_t_16);
              __pyx_t_1 = 0;
              __pyx_t_14 = NULL;
            } else {
              __pyx_t_1 = -1; __pyx_t_16 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 126, __pyx_L13_except_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_16); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 126, __pyx_L13_except_error)
            }
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            for (;;) {
              if (likely(!__pyx_t_14)) {
                if (likely(PyList_CheckExact(__pyx_t_16))) {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_16);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 126, __pyx_L13_except_error)
                    #endif
                    if (__pyx_t_1 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_13 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_1); __Pyx_INCREF(__pyx_t_13); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 126, __pyx_L13_except_error)
                  #else
                  __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_16, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 126, __pyx_L13_except_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  #endif
                } else {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_16);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 126, __pyx_L13_except_error)
                    #endif
                    if (__pyx_t_1 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_1); __Pyx_INCREF(__pyx_t_13); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 126, __pyx_L13_except_error)
                  #else
                  __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_16, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 126, __pyx_L13_except_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  #endif
                }
              } else {
                __pyx_t_13 = __pyx_t_14(__pyx_t_16);
                if (unlikely(!__pyx_t_13)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 126, __pyx_L13_except_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_13);
              }
              if ((likely(PyTuple_CheckExact(__pyx_t_13))) || (PyList_CheckExact(__pyx_t_13))) {
                PyObject* sequence = __pyx_t_13;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 126, __pyx_L13_except_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_23 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_24 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_23 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_24 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_23);
                __Pyx_INCREF(__pyx_t_24);
                #else
                __pyx_t_23 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 126, __pyx_L13_except_error)
                __Pyx_GOTREF(__pyx_t_23);
                __pyx_t_24 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 126, __pyx_L13_except_error)
                __Pyx_GOTREF(__pyx_t_24);
                #endif
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_25 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 126, __pyx_L13_except_error)
                __Pyx_GOTREF(__pyx_t_25);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                __pyx_t_17 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_25);
                index = 0; __pyx_t_23 = __pyx_t_17(__pyx_t_25); if (unlikely(!__pyx_t_23)) goto __pyx_L29_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_23);
                index = 1; __pyx_t_24 = __pyx_t_17(__pyx_t_25); if (unlikely(!__pyx_t_24)) goto __pyx_L29_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_24);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_25), 2) < 0) __PYX_ERR(0, 126, __pyx_L13_except_error)
                __pyx_t_17 = NULL;
                __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                goto __pyx_L30_unpacking_done;
                __pyx_L29_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                __pyx_t_17 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 126, __pyx_L13_except_error)
                __pyx_L30_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_eachx, __pyx_t_23);
              __pyx_t_23 = 0;
              __Pyx_XDECREF_SET(__pyx_v_eachq, __pyx_t_24);
              __pyx_t_24 = 0;
              __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_pid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 126, __pyx_L13_except_error)
              __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_eachx); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 126, __pyx_L13_except_error)
              __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_eachq); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 126, __pyx_L13_except_error)
              try {
                __pyx_t_20 = __pyx_v_self->_ptr->xfxQ(__pyx_t_6, __pyx_t_22, __pyx_t_21);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 126, __pyx_L13_except_error)
              }
              __pyx_t_13 = PyFloat_FromDouble(__pyx_t_20); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 126, __pyx_L13_except_error)
              __Pyx_GOTREF(__pyx_t_13);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_15, (PyObject*)__pyx_t_13))) __PYX_ERR(0, 126, __pyx_L13_except_error)
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            }
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_r = __pyx_t_15;
            __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            goto __pyx_L14_except_return;
          }
          goto __pyx_L13_except_error;

          /* "python/lhapdf.pyx":123
 *                 return self.xfxQ(x, q)
 *             try:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 *                 except TypeError:
 */
          __pyx_L13_except_error:;
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          goto __pyx_L5_error;
          __pyx_L15_try_return:;
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          goto __pyx_L9_try_return;
          __pyx_L14_except_return:;
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          goto __pyx_L9_try_return;
        }

        /* "python/lhapdf.pyx":122
 *             if pid is None:
 *                 return self.xfxQ(x, q)
 *             try:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 */
      }
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "python/lhapdf.pyx":127
 *                 except TypeError:
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("python.lhapdf.PDF.xfxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_5) < 0) __PYX_ERR(0, 127, __pyx_L7_except_error)
        __Pyx_XGOTREF(__pyx_t_4);
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_5);

        /* "python/lhapdf.pyx":128
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]
 *             except TypeError:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]
 *                 except TypeError:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_10);
          /*try:*/ {

            /* "python/lhapdf.pyx":129
 *             except TypeError:
 *                 try:
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]             # <<<<<<<<<<<<<<
 *                 except TypeError:
 *                     return self._ptr.xfxQ(pid, x, q)
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_15 = PyList_New(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 129, __pyx_L34_error)
            __Pyx_GOTREF(__pyx_t_15);
            if (likely(PyList_CheckExact(__pyx_v_pid)) || PyTuple_CheckExact(__pyx_v_pid)) {
              __pyx_t_16 = __pyx_v_pid; __Pyx_INCREF(__pyx_t_16);
              __pyx_t_1 = 0;
              __pyx_t_14 = NULL;
            } else {
              __pyx_t_1 = -1; __pyx_t_16 = PyObject_GetIter(__pyx_v_pid); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 129, __pyx_L34_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_16); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 129, __pyx_L34_error)
            }
            for (;;) {
              if (likely(!__pyx_t_14)) {
                if (likely(PyList_CheckExact(__pyx_t_16))) {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_16);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 129, __pyx_L34_error)
                    #endif
                    if (__pyx_t_1 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_13 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_1); __Pyx_INCREF(__pyx_t_13); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 129, __pyx_L34_error)
                  #else
                  __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_16, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 129, __pyx_L34_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  #endif
                } else {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_16);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 129, __pyx_L34_error)
                    #endif
                    if (__pyx_t_1 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_1); __Pyx_INCREF(__pyx_t_13); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 129, __pyx_L34_error)
                  #else
                  __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_16, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 129, __pyx_L34_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  #endif
                }
              } else {
                __pyx_t_13 = __pyx_t_14(__pyx_t_16);
                if (unlikely(!__pyx_t_13)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 129, __pyx_L34_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_13);
              }
              __Pyx_XDECREF_SET(__pyx_v_eachpid, __pyx_t_13);
              __pyx_t_13 = 0;
              __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_eachpid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 129, __pyx_L34_error)
              __pyx_t_20 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_20 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 129, __pyx_L34_error)
              __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_q); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 129, __pyx_L34_error)
              try {
                __pyx_t_22 = __pyx_v_self->_ptr->xfxQ(__pyx_t_6, __pyx_t_20, __pyx_t_21);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 129, __pyx_L34_error)
              }
              __pyx_t_13 = PyFloat_FromDouble(__pyx_t_22); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 129, __pyx_L34_error)
              __Pyx_GOTREF(__pyx_t_13);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_15, (PyObject*)__pyx_t_13))) __PYX_ERR(0, 129, __pyx_L34_error)
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            }
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_r = __pyx_t_15;
            __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            goto __pyx_L38_try_return;

            /* "python/lhapdf.pyx":128
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]
 *             except TypeError:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]
 *                 except TypeError:
 */
          }
          __pyx_L34_error:;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
          __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
          __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "python/lhapdf.pyx":130
 *                 try:
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]
 *                 except TypeError:             # <<<<<<<<<<<<<<
 *                     return self._ptr.xfxQ(pid, x, q)
 *         elif len(args) == 2:
 */
          __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
          if (__pyx_t_6) {
            __Pyx_AddTraceback("python.lhapdf.PDF.xfxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_13) < 0) __PYX_ERR(0, 130, __pyx_L36_except_error)
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_13);

            /* "python/lhapdf.pyx":131
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]
 *                 except TypeError:
 *                     return self._ptr.xfxQ(pid, x, q)             # <<<<<<<<<<<<<<
 *         elif len(args) == 2:
 *             x, q = args
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_pid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L36_except_error)
            __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L36_except_error)
            __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_q); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L36_except_error)
            try {
              __pyx_t_20 = __pyx_v_self->_ptr->xfxQ(__pyx_t_6, __pyx_t_22, __pyx_t_21);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 131, __pyx_L36_except_error)
            }
            __pyx_t_24 = PyFloat_FromDouble(__pyx_t_20); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 131, __pyx_L36_except_error)
            __Pyx_GOTREF(__pyx_t_24);
            __pyx_r = __pyx_t_24;
            __pyx_t_24 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            goto __pyx_L37_except_return;
          }
          goto __pyx_L36_except_error;

          /* "python/lhapdf.pyx":128
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]
 *             except TypeError:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]
 *                 except TypeError:
 */
          __pyx_L36_except_error:;
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
          goto __pyx_L7_except_error;
          __pyx_L38_try_return:;
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
          goto __pyx_L8_except_return;
          __pyx_L37_except_return:;
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
          goto __pyx_L8_except_return;
        }
      }
      goto __pyx_L7_except_error;

      /* "python/lhapdf.pyx":122
 *             if pid is None:
 *                 return self.xfxQ(x, q)
 *             try:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 */
      __pyx_L7_except_error:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L9_try_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L8_except_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
    }

    /* "python/lhapdf.pyx":118
 *         # TODO: Reduce duplication between Q and Q2 variants?
 *         # If only we'd used PID as the final arg rather than the first, then we could have made it optional/default None...
 *         if len(args) == 3:             # <<<<<<<<<<<<<<
 *             pid, x, q = args
 *             if pid is None:
 */
  }

  /* "python/lhapdf.pyx":132
 *                 except TypeError:
 *                     return self._ptr.xfxQ(pid, x, q)
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             x, q = args
 *             try:
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 132, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 2);
  if (likely(__pyx_t_2)) {

    /* "python/lhapdf.pyx":133
 *                     return self._ptr.xfxQ(pid, x, q)
 *         elif len(args) == 2:
 *             x, q = args             # <<<<<<<<<<<<<<
 *             try:
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]
 */
    if (1) {
      PyObject* sequence = __pyx_v_args;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 133, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
    }
    __pyx_v_x = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_q = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "python/lhapdf.pyx":134
 *         elif len(args) == 2:
 *             x, q = args
 *             try:             # <<<<<<<<<<<<<<
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]
 *             except TypeError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "python/lhapdf.pyx":135
 *             x, q = args
 *             try:
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return {pid : self._ptr.xfxQ(pid, x, q) for pid in self.flavors()}
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L47_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_zip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 135, __pyx_L47_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_13 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_v_x, __pyx_v_q};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 135, __pyx_L47_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4);
          __pyx_t_1 = 0;
          __pyx_t_14 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 135, __pyx_L47_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 135, __pyx_L47_error)
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_14)) {
            if (likely(PyList_CheckExact(__pyx_t_4))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 135, __pyx_L47_error)
                #endif
                if (__pyx_t_1 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 135, __pyx_L47_error)
              #else
              __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 135, __pyx_L47_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 135, __pyx_L47_error)
                #endif
                if (__pyx_t_1 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 135, __pyx_L47_error)
              #else
              __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 135, __pyx_L47_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_14(__pyx_t_4);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 135, __pyx_L47_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
            PyObject* sequence = __pyx_t_5;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 135, __pyx_L47_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_16 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_16 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_16);
            #else
            __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 135, __pyx_L47_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_16 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 135, __pyx_L47_error)
            __Pyx_GOTREF(__pyx_t_16);
            #endif
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_15 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 135, __pyx_L47_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_17 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_15);
            index = 0; __pyx_t_13 = __pyx_t_17(__pyx_t_15); if (unlikely(!__pyx_t_13)) goto __pyx_L55_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_13);
            index = 1; __pyx_t_16 = __pyx_t_17(__pyx_t_15); if (unlikely(!__pyx_t_16)) goto __pyx_L55_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_16);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_15), 2) < 0) __PYX_ERR(0, 135, __pyx_L47_error)
            __pyx_t_17 = NULL;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            goto __pyx_L56_unpacking_done;
            __pyx_L55_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_17 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 135, __pyx_L47_error)
            __pyx_L56_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_eachx, __pyx_t_13);
          __pyx_t_13 = 0;
          __Pyx_XDECREF_SET(__pyx_v_eachq, __pyx_t_16);
          __pyx_t_16 = 0;
          { /* enter inner scope */
            __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 135, __pyx_L59_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_13 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flavors); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 135, __pyx_L59_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_15 = NULL;
            __pyx_t_6 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_13))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_13);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_13, function);
                __pyx_t_6 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_15, NULL};
              __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 135, __pyx_L59_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            }
            if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
              __pyx_t_13 = __pyx_t_16; __Pyx_INCREF(__pyx_t_13);
              __pyx_t_18 = 0;
              __pyx_t_19 = NULL;
            } else {
              __pyx_t_18 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 135, __pyx_L59_error)
              __Pyx_GOTREF(__pyx_t_13);
              __pyx_t_19 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_13); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 135, __pyx_L59_error)
            }
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            for (;;) {
              if (likely(!__pyx_t_19)) {
                if (likely(PyList_CheckExact(__pyx_t_13))) {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_13);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 135, __pyx_L59_error)
                    #endif
                    if (__pyx_t_18 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_16 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_18); __Pyx_INCREF(__pyx_t_16); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 135, __pyx_L59_error)
                  #else
                  __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_13, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 135, __pyx_L59_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  #endif
                } else {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_13);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 135, __pyx_L59_error)
                    #endif
                    if (__pyx_t_18 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_18); __Pyx_INCREF(__pyx_t_16); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 135, __pyx_L59_error)
                  #else
                  __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_13, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 135, __pyx_L59_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  #endif
                }
              } else {
                __pyx_t_16 = __pyx_t_19(__pyx_t_13);
                if (unlikely(!__pyx_t_16)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 135, __pyx_L59_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_16);
              }
              __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_pid, __pyx_t_16);
              __pyx_t_16 = 0;
              __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_7genexpr__pyx_v_pid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 135, __pyx_L59_error)
              __pyx_t_20 = __pyx_PyFloat_AsDouble(__pyx_v_eachx); if (unlikely((__pyx_t_20 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 135, __pyx_L59_error)
              __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_eachq); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 135, __pyx_L59_error)
              try {
                __pyx_t_22 = __pyx_v_self->_ptr->xfxQ(__pyx_t_6, __pyx_t_20, __pyx_t_21);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 135, __pyx_L59_error)
              }
              __pyx_t_16 = PyFloat_FromDouble(__pyx_t_22); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 135, __pyx_L59_error)
              __Pyx_GOTREF(__pyx_t_16);
              if (unlikely(PyDict_SetItem(__pyx_t_5, (PyObject*)__pyx_7genexpr__pyx_v_pid, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 135, __pyx_L59_error)
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_7genexpr__pyx_v_pid); __pyx_7genexpr__pyx_v_pid = 0;
            goto __pyx_L63_exit_scope;
            __pyx_L59_error:;
            __Pyx_XDECREF(__pyx_7genexpr__pyx_v_pid); __pyx_7genexpr__pyx_v_pid = 0;
            goto __pyx_L47_error;
            __pyx_L63_exit_scope:;
          } /* exit inner scope */
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 135, __pyx_L47_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L51_try_return;

        /* "python/lhapdf.pyx":134
 *         elif len(args) == 2:
 *             x, q = args
 *             try:             # <<<<<<<<<<<<<<
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]
 *             except TypeError:
 */
      }
      __pyx_L47_error:;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "python/lhapdf.pyx":136
 *             try:
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return {pid : self._ptr.xfxQ(pid, x, q) for pid in self.flavors()}
 *         else:
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("python.lhapdf.PDF.xfxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 136, __pyx_L49_except_error)
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_4);
        __Pyx_XGOTREF(__pyx_t_5);

        /* "python/lhapdf.pyx":137
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]
 *             except TypeError:
 *                 return {pid : self._ptr.xfxQ(pid, x, q) for pid in self.flavors()}             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Wrong number of arguments given to xfxQ: 2 or 3 required, %d provided" % len(args))
 */
        __Pyx_XDECREF(__pyx_r);
        { /* enter inner scope */
          __pyx_t_13 = PyDict_New(); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 137, __pyx_L69_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flavors); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 137, __pyx_L69_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_24 = NULL;
          __pyx_t_6 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_24)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_24);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
              __pyx_t_6 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_24, NULL};
            __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
            __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
            if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 137, __pyx_L69_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
            __pyx_t_15 = __pyx_t_16; __Pyx_INCREF(__pyx_t_15);
            __pyx_t_1 = 0;
            __pyx_t_14 = NULL;
          } else {
            __pyx_t_1 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 137, __pyx_L69_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 137, __pyx_L69_error)
          }
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          for (;;) {
            if (likely(!__pyx_t_14)) {
              if (likely(PyList_CheckExact(__pyx_t_15))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_15);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 137, __pyx_L69_error)
                  #endif
                  if (__pyx_t_1 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_16 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_1); __Pyx_INCREF(__pyx_t_16); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 137, __pyx_L69_error)
                #else
                __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 137, __pyx_L69_error)
                __Pyx_GOTREF(__pyx_t_16);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_15);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 137, __pyx_L69_error)
                  #endif
                  if (__pyx_t_1 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_1); __Pyx_INCREF(__pyx_t_16); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 137, __pyx_L69_error)
                #else
                __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 137, __pyx_L69_error)
                __Pyx_GOTREF(__pyx_t_16);
                #endif
              }
            } else {
              __pyx_t_16 = __pyx_t_14(__pyx_t_15);
              if (unlikely(!__pyx_t_16)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 137, __pyx_L69_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_16);
            }
            __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_pid, __pyx_t_16);
            __pyx_t_16 = 0;
            __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_8genexpr1__pyx_v_pid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 137, __pyx_L69_error)
            __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 137, __pyx_L69_error)
            __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_q); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 137, __pyx_L69_error)
            try {
              __pyx_t_20 = __pyx_v_self->_ptr->xfxQ(__pyx_t_6, __pyx_t_22, __pyx_t_21);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 137, __pyx_L69_error)
            }
            __pyx_t_16 = PyFloat_FromDouble(__pyx_t_20); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 137, __pyx_L69_error)
            __Pyx_GOTREF(__pyx_t_16);
            if (unlikely(PyDict_SetItem(__pyx_t_13, (PyObject*)__pyx_8genexpr1__pyx_v_pid, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 137, __pyx_L69_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_pid); __pyx_8genexpr1__pyx_v_pid = 0;
          goto __pyx_L73_exit_scope;
          __pyx_L69_error:;
          __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_pid); __pyx_8genexpr1__pyx_v_pid = 0;
          goto __pyx_L49_except_error;
          __pyx_L73_exit_scope:;
        } /* exit inner scope */
        __pyx_r = __pyx_t_13;
        __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L50_except_return;
      }
      goto __pyx_L49_except_error;

      /* "python/lhapdf.pyx":134
 *         elif len(args) == 2:
 *             x, q = args
 *             try:             # <<<<<<<<<<<<<<
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]
 *             except TypeError:
 */
      __pyx_L49_except_error:;
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L51_try_return:;
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L50_except_return:;
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      goto __pyx_L0;
    }

    /* "python/lhapdf.pyx":132
 *                 except TypeError:
 *                     return self._ptr.xfxQ(pid, x, q)
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             x, q = args
 *             try:
 */
  }

  /* "python/lhapdf.pyx":139
 *                 return {pid : self._ptr.xfxQ(pid, x, q) for pid in self.flavors()}
 *         else:
 *             raise Exception("Wrong number of arguments given to xfxQ: 2 or 3 required, %d provided" % len(args))             # <<<<<<<<<<<<<<
 * 
 *     def xfxQ2(self, *args):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 139, __pyx_L1_error)
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Wrong_number_of_arguments_given, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 139, __pyx_L1_error)
  }

  /* "python/lhapdf.pyx":102
 *         return self._ptr.alphasQ2(q2)
 * 
 *     def xfxQ(self, *args):             # <<<<<<<<<<<<<<
 *         """Return the PDF xf(x,Q2) value for the given parton ID, x, and Q values.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_AddTraceback("python.lhapdf.PDF.xfxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pid);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_q);
  __Pyx_XDECREF(__pyx_v_eachx);
  __Pyx_XDECREF(__pyx_v_eachq);
  __Pyx_XDECREF(__pyx_v_eachpid);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_pid);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_pid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":141
 *             raise Exception("Wrong number of arguments given to xfxQ: 2 or 3 required, %d provided" % len(args))
 * 
 *     def xfxQ2(self, *args):             # <<<<<<<<<<<<<<
 *         """Return the PDF xf(x,Q2) value for the given parton ID, x, and Q2 values.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_9xfxQ2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_8xfxQ2, "PDF.xfxQ2(self, *args)\nReturn the PDF xf(x,Q2) value for the given parton ID, x, and Q2 values.\n\n        Two forms of arguments are allowed:\n        3-args: (pid, x, q2)\n          If all are scalars, a scalar is returned; if pid is a sequence, a list is\n          returned; if x and q2 are sequences of the same length, they will be zipped\n          and a (maybe nested) list of the return values as for scalar x/q2 will be returned.\n          If pid is None, behave like the 2-arg version.\n        2-args: (x, q2)\n          As for 3 args, but always returning results for all PIDs, as a dict. The return\n          will be many such dicts in a zipped list if x/q2 are sequences.\n        ");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_9xfxQ2 = {"xfxQ2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_9xfxQ2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_8xfxQ2};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_9xfxQ2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xfxQ2 (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "xfxQ2", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_8xfxQ2(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_8xfxQ2(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_pid = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_q2 = NULL;
  PyObject *__pyx_v_eachx = NULL;
  PyObject *__pyx_v_eachq2 = NULL;
  PyObject *__pyx_v_eachpid = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_pid = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_pid = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *(*__pyx_t_17)(PyObject *);
  Py_ssize_t __pyx_t_18;
  PyObject *(*__pyx_t_19)(PyObject *);
  double __pyx_t_20;
  double __pyx_t_21;
  double __pyx_t_22;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("xfxQ2", 1);

  /* "python/lhapdf.pyx":157
 *         # TODO: Reduce duplication between Q and Q2 variants?
 *         # If only we'd used PID as the final arg rather than the first, then we could have made it optional/default None...
 *         if len(args) == 3:             # <<<<<<<<<<<<<<
 *             pid, x, q2 = args
 *             if pid is None:
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 157, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 3);
  if (__pyx_t_2) {

    /* "python/lhapdf.pyx":158
 *         # If only we'd used PID as the final arg rather than the first, then we could have made it optional/default None...
 *         if len(args) == 3:
 *             pid, x, q2 = args             # <<<<<<<<<<<<<<
 *             if pid is None:
 *                 return self.xfxQ2(x, q2)
 */
    if (1) {
      PyObject* sequence = __pyx_v_args;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 158, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
    }
    __pyx_v_pid = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_x = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_q2 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "python/lhapdf.pyx":159
 *         if len(args) == 3:
 *             pid, x, q2 = args
 *             if pid is None:             # <<<<<<<<<<<<<<
 *                 return self.xfxQ2(x, q2)
 *             try:
 */
    __pyx_t_2 = (__pyx_v_pid == Py_None);
    if (__pyx_t_2) {

      /* "python/lhapdf.pyx":160
 *             pid, x, q2 = args
 *             if pid is None:
 *                 return self.xfxQ2(x, q2)             # <<<<<<<<<<<<<<
 *             try:
 *                 try:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_xfxQ2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_q2};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "python/lhapdf.pyx":159
 *         if len(args) == 3:
 *             pid, x, q2 = args
 *             if pid is None:             # <<<<<<<<<<<<<<
 *                 return self.xfxQ2(x, q2)
 *             try:
 */
    }

    /* "python/lhapdf.pyx":161
 *             if pid is None:
 *                 return self.xfxQ2(x, q2)
 *             try:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "python/lhapdf.pyx":162
 *                 return self.xfxQ2(x, q2)
 *             try:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 *                 except TypeError:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_12);
          /*try:*/ {

            /* "python/lhapdf.pyx":163
 *             try:
 *                 try:
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]             # <<<<<<<<<<<<<<
 *                 except TypeError:
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 163, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_zip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 163, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_13 = NULL;
            __pyx_t_6 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_13)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_13);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
                __pyx_t_6 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_v_x, __pyx_v_q2};
              __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 163, __pyx_L11_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
            if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
              __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3);
              __pyx_t_1 = 0;
              __pyx_t_14 = NULL;
            } else {
              __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 163, __pyx_L11_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 163, __pyx_L11_error)
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            for (;;) {
              if (likely(!__pyx_t_14)) {
                if (likely(PyList_CheckExact(__pyx_t_3))) {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 163, __pyx_L11_error)
                    #endif
                    if (__pyx_t_1 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 163, __pyx_L11_error)
                  #else
                  __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 163, __pyx_L11_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 163, __pyx_L11_error)
                    #endif
                    if (__pyx_t_1 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 163, __pyx_L11_error)
                  #else
                  __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 163, __pyx_L11_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_14(__pyx_t_3);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 163, __pyx_L11_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
                PyObject* sequence = __pyx_t_4;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 163, __pyx_L11_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_15 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_15 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_13);
                __Pyx_INCREF(__pyx_t_15);
                #else
                __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 163, __pyx_L11_error)
                __Pyx_GOTREF(__pyx_t_13);
                __pyx_t_15 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 163, __pyx_L11_error)
                __Pyx_GOTREF(__pyx_t_15);
                #endif
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_16 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 163, __pyx_L11_error)
                __Pyx_GOTREF(__pyx_t_16);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_17 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_16);
                index = 0; __pyx_t_13 = __pyx_t_17(__pyx_t_16); if (unlikely(!__pyx_t_13)) goto __pyx_L19_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_13);
                index = 1; __pyx_t_15 = __pyx_t_17(__pyx_t_16); if (unlikely(!__pyx_t_15)) goto __pyx_L19_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_15);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_16), 2) < 0) __PYX_ERR(0, 163, __pyx_L11_error)
                __pyx_t_17 = NULL;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                goto __pyx_L20_unpacking_done;
                __pyx_L19_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                __pyx_t_17 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 163, __pyx_L11_error)
                __pyx_L20_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_eachx, __pyx_t_13);
              __pyx_t_13 = 0;
              __Pyx_XDECREF_SET(__pyx_v_eachq2, __pyx_t_15);
              __pyx_t_15 = 0;
              __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 163, __pyx_L11_error)
              __Pyx_GOTREF(__pyx_t_4);
              if (likely(PyList_CheckExact(__pyx_v_pid)) || PyTuple_CheckExact(__pyx_v_pid)) {
                __pyx_t_15 = __pyx_v_pid; __Pyx_INCREF(__pyx_t_15);
                __pyx_t_18 = 0;
                __pyx_t_19 = NULL;
              } else {
                __pyx_t_18 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_v_pid); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 163, __pyx_L11_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_19 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_15); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 163, __pyx_L11_error)
              }
              for (;;) {
                if (likely(!__pyx_t_19)) {
                  if (likely(PyList_CheckExact(__pyx_t_15))) {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_15);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 163, __pyx_L11_error)
                      #endif
                      if (__pyx_t_18 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_13 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_18); __Pyx_INCREF(__pyx_t_13); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 163, __pyx_L11_error)
                    #else
                    __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 163, __pyx_L11_error)
                    __Pyx_GOTREF(__pyx_t_13);
                    #endif
                  } else {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_15);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 163, __pyx_L11_error)
                      #endif
                      if (__pyx_t_18 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_18); __Pyx_INCREF(__pyx_t_13); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 163, __pyx_L11_error)
                    #else
                    __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 163, __pyx_L11_error)
                    __Pyx_GOTREF(__pyx_t_13);
                    #endif
                  }
                } else {
                  __pyx_t_13 = __pyx_t_19(__pyx_t_15);
                  if (unlikely(!__pyx_t_13)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 163, __pyx_L11_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_13);
                }
                __Pyx_XDECREF_SET(__pyx_v_eachpid, __pyx_t_13);
                __pyx_t_13 = 0;
                __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_eachpid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L11_error)
                __pyx_t_20 = __pyx_PyFloat_AsDouble(__pyx_v_eachx); if (unlikely((__pyx_t_20 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L11_error)
                __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_eachq2); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L11_error)
                try {
                  __pyx_t_22 = __pyx_v_self->_ptr->xfxQ2(__pyx_t_6, __pyx_t_20, __pyx_t_21);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 163, __pyx_L11_error)
                }
                __pyx_t_13 = PyFloat_FromDouble(__pyx_t_22); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 163, __pyx_L11_error)
                __Pyx_GOTREF(__pyx_t_13);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_13))) __PYX_ERR(0, 163, __pyx_L11_error)
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              }
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 163, __pyx_L11_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_r = __pyx_t_5;
            __pyx_t_5 = 0;
            goto __pyx_L15_try_return;

            /* "python/lhapdf.pyx":162
 *                 return self.xfxQ2(x, q2)
 *             try:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 *                 except TypeError:
 */
          }
          __pyx_L11_error:;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "python/lhapdf.pyx":164
 *                 try:
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 *                 except TypeError:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 */
          __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
          if (__pyx_t_6) {
            __Pyx_AddTraceback("python.lhapdf.PDF.xfxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_3, &__pyx_t_4) < 0) __PYX_ERR(0, 164, __pyx_L13_except_error)
            __Pyx_XGOTREF(__pyx_t_5);
            __Pyx_XGOTREF(__pyx_t_3);
            __Pyx_XGOTREF(__pyx_t_4);

            /* "python/lhapdf.pyx":165
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 *                 except TypeError:
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 try:
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_15 = PyList_New(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 165, __pyx_L13_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_zip); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 165, __pyx_L13_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_23 = NULL;
            __pyx_t_6 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_16))) {
              __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_16);
              if (likely(__pyx_t_23)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                __Pyx_INCREF(__pyx_t_23);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_16, function);
                __pyx_t_6 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_23, __pyx_v_x, __pyx_v_q2};
              __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
              if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 165, __pyx_L13_except_error)
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
            if (likely(PyList_CheckExact(__pyx_t_13)) || PyTuple_CheckExact(__pyx_t_13)) {
              __pyx_t_16 = __pyx_t_13; __Pyx_INCREF(__pyx_t_16);
              __pyx_t_1 = 0;
              __pyx_t_14 = NULL;
            } else {
              __pyx_t_1 = -1; __pyx_t_16 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 165, __pyx_L13_except_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_16); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 165, __pyx_L13_except_error)
            }
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            for (;;) {
              if (likely(!__pyx_t_14)) {
                if (likely(PyList_CheckExact(__pyx_t_16))) {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_16);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 165, __pyx_L13_except_error)
                    #endif
                    if (__pyx_t_1 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_13 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_1); __Pyx_INCREF(__pyx_t_13); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 165, __pyx_L13_except_error)
                  #else
                  __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_16, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 165, __pyx_L13_except_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  #endif
                } else {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_16);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 165, __pyx_L13_except_error)
                    #endif
                    if (__pyx_t_1 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_1); __Pyx_INCREF(__pyx_t_13); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 165, __pyx_L13_except_error)
                  #else
                  __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_16, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 165, __pyx_L13_except_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  #endif
                }
              } else {
                __pyx_t_13 = __pyx_t_14(__pyx_t_16);
                if (unlikely(!__pyx_t_13)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 165, __pyx_L13_except_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_13);
              }
              if ((likely(PyTuple_CheckExact(__pyx_t_13))) || (PyList_CheckExact(__pyx_t_13))) {
                PyObject* sequence = __pyx_t_13;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 165, __pyx_L13_except_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_23 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_24 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_23 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_24 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_23);
                __Pyx_INCREF(__pyx_t_24);
                #else
                __pyx_t_23 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 165, __pyx_L13_except_error)
                __Pyx_GOTREF(__pyx_t_23);
                __pyx_t_24 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 165, __pyx_L13_except_error)
                __Pyx_GOTREF(__pyx_t_24);
                #endif
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_25 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 165, __pyx_L13_except_error)
                __Pyx_GOTREF(__pyx_t_25);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                __pyx_t_17 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_25);
                index = 0; __pyx_t_23 = __pyx_t_17(__pyx_t_25); if (unlikely(!__pyx_t_23)) goto __pyx_L29_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_23);
                index = 1; __pyx_t_24 = __pyx_t_17(__pyx_t_25); if (unlikely(!__pyx_t_24)) goto __pyx_L29_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_24);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_25), 2) < 0) __PYX_ERR(0, 165, __pyx_L13_except_error)
                __pyx_t_17 = NULL;
                __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                goto __pyx_L30_unpacking_done;
                __pyx_L29_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                __pyx_t_17 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 165, __pyx_L13_except_error)
                __pyx_L30_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_eachx, __pyx_t_23);
              __pyx_t_23 = 0;
              __Pyx_XDECREF_SET(__pyx_v_eachq2, __pyx_t_24);
              __pyx_t_24 = 0;
              __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_pid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L13_except_error)
              __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_eachx); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L13_except_error)
              __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_eachq2); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L13_except_error)
              try {
                __pyx_t_20 = __pyx_v_self->_ptr->xfxQ2(__pyx_t_6, __pyx_t_22, __pyx_t_21);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 165, __pyx_L13_except_error)
              }
              __pyx_t_13 = PyFloat_FromDouble(__pyx_t_20); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 165, __pyx_L13_except_error)
              __Pyx_GOTREF(__pyx_t_13);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_15, (PyObject*)__pyx_t_13))) __PYX_ERR(0, 165, __pyx_L13_except_error)
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            }
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_r = __pyx_t_15;
            __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            goto __pyx_L14_except_return;
          }
          goto __pyx_L13_except_error;

          /* "python/lhapdf.pyx":162
 *                 return self.xfxQ2(x, q2)
 *             try:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 *                 except TypeError:
 */
          __pyx_L13_except_error:;
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          goto __pyx_L5_error;
          __pyx_L15_try_return:;
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          goto __pyx_L9_try_return;
          __pyx_L14_except_return:;
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          goto __pyx_L9_try_return;
        }

        /* "python/lhapdf.pyx":161
 *             if pid is None:
 *                 return self.xfxQ2(x, q2)
 *             try:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 */
      }
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "python/lhapdf.pyx":166
 *                 except TypeError:
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("python.lhapdf.PDF.xfxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_5) < 0) __PYX_ERR(0, 166, __pyx_L7_except_error)
        __Pyx_XGOTREF(__pyx_t_4);
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_5);

        /* "python/lhapdf.pyx":167
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]
 *                 except TypeError:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_10);
          /*try:*/ {

            /* "python/lhapdf.pyx":168
 *             except TypeError:
 *                 try:
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]             # <<<<<<<<<<<<<<
 *                 except TypeError:
 *                     return self._ptr.xfxQ2(pid, x, q2)
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_15 = PyList_New(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 168, __pyx_L34_error)
            __Pyx_GOTREF(__pyx_t_15);
            if (likely(PyList_CheckExact(__pyx_v_pid)) || PyTuple_CheckExact(__pyx_v_pid)) {
              __pyx_t_16 = __pyx_v_pid; __Pyx_INCREF(__pyx_t_16);
              __pyx_t_1 = 0;
              __pyx_t_14 = NULL;
            } else {
              __pyx_t_1 = -1; __pyx_t_16 = PyObject_GetIter(__pyx_v_pid); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 168, __pyx_L34_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_16); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 168, __pyx_L34_error)
            }
            for (;;) {
              if (likely(!__pyx_t_14)) {
                if (likely(PyList_CheckExact(__pyx_t_16))) {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_16);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 168, __pyx_L34_error)
                    #endif
                    if (__pyx_t_1 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_13 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_1); __Pyx_INCREF(__pyx_t_13); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 168, __pyx_L34_error)
                  #else
                  __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_16, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 168, __pyx_L34_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  #endif
                } else {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_16);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 168, __pyx_L34_error)
                    #endif
                    if (__pyx_t_1 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_1); __Pyx_INCREF(__pyx_t_13); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 168, __pyx_L34_error)
                  #else
                  __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_16, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 168, __pyx_L34_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  #endif
                }
              } else {
                __pyx_t_13 = __pyx_t_14(__pyx_t_16);
                if (unlikely(!__pyx_t_13)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 168, __pyx_L34_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_13);
              }
              __Pyx_XDECREF_SET(__pyx_v_eachpid, __pyx_t_13);
              __pyx_t_13 = 0;
              __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_eachpid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L34_error)
              __pyx_t_20 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_20 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L34_error)
              __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_q2); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L34_error)
              try {
                __pyx_t_22 = __pyx_v_self->_ptr->xfxQ2(__pyx_t_6, __pyx_t_20, __pyx_t_21);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 168, __pyx_L34_error)
              }
              __pyx_t_13 = PyFloat_FromDouble(__pyx_t_22); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 168, __pyx_L34_error)
              __Pyx_GOTREF(__pyx_t_13);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_15, (PyObject*)__pyx_t_13))) __PYX_ERR(0, 168, __pyx_L34_error)
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            }
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_r = __pyx_t_15;
            __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            goto __pyx_L38_try_return;

            /* "python/lhapdf.pyx":167
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]
 *                 except TypeError:
 */
          }
          __pyx_L34_error:;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
          __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
          __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "python/lhapdf.pyx":169
 *                 try:
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]
 *                 except TypeError:             # <<<<<<<<<<<<<<
 *                     return self._ptr.xfxQ2(pid, x, q2)
 *         elif len(args) == 2:
 */
          __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
          if (__pyx_t_6) {
            __Pyx_AddTraceback("python.lhapdf.PDF.xfxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_13) < 0) __PYX_ERR(0, 169, __pyx_L36_except_error)
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_13);

            /* "python/lhapdf.pyx":170
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]
 *                 except TypeError:
 *                     return self._ptr.xfxQ2(pid, x, q2)             # <<<<<<<<<<<<<<
 *         elif len(args) == 2:
 *             x, q2 = args
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_pid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L36_except_error)
            __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L36_except_error)
            __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_q2); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L36_except_error)
            try {
              __pyx_t_20 = __pyx_v_self->_ptr->xfxQ2(__pyx_t_6, __pyx_t_22, __pyx_t_21);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 170, __pyx_L36_except_error)
            }
            __pyx_t_24 = PyFloat_FromDouble(__pyx_t_20); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 170, __pyx_L36_except_error)
            __Pyx_GOTREF(__pyx_t_24);
            __pyx_r = __pyx_t_24;
            __pyx_t_24 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            goto __pyx_L37_except_return;
          }
          goto __pyx_L36_except_error;

          /* "python/lhapdf.pyx":167
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]
 *                 except TypeError:
 */
          __pyx_L36_except_error:;
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
          goto __pyx_L7_except_error;
          __pyx_L38_try_return:;
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
          goto __pyx_L8_except_return;
          __pyx_L37_except_return:;
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
          goto __pyx_L8_except_return;
        }
      }
      goto __pyx_L7_except_error;

      /* "python/lhapdf.pyx":161
 *             if pid is None:
 *                 return self.xfxQ2(x, q2)
 *             try:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 */
      __pyx_L7_except_error:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L9_try_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L8_except_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
    }

    /* "python/lhapdf.pyx":157
 *         # TODO: Reduce duplication between Q and Q2 variants?
 *         # If only we'd used PID as the final arg rather than the first, then we could have made it optional/default None...
 *         if len(args) == 3:             # <<<<<<<<<<<<<<
 *             pid, x, q2 = args
 *             if pid is None:
 */
  }

  /* "python/lhapdf.pyx":171
 *                 except TypeError:
 *                     return self._ptr.xfxQ2(pid, x, q2)
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             x, q2 = args
 *             try:
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 171, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 2);
  if (likely(__pyx_t_2)) {

    /* "python/lhapdf.pyx":172
 *                     return self._ptr.xfxQ2(pid, x, q2)
 *         elif len(args) == 2:
 *             x, q2 = args             # <<<<<<<<<<<<<<
 *             try:
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]
 */
    if (1) {
      PyObject* sequence = __pyx_v_args;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 172, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
    }
    __pyx_v_x = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_q2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "python/lhapdf.pyx":173
 *         elif len(args) == 2:
 *             x, q2 = args
 *             try:             # <<<<<<<<<<<<<<
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "python/lhapdf.pyx":174
 *             x, q2 = args
 *             try:
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return {pid : self._ptr.xfxQ2(pid, x, q2) for pid in self.flavors()}
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L47_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_zip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 174, __pyx_L47_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_13 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_v_x, __pyx_v_q2};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 174, __pyx_L47_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4);
          __pyx_t_1 = 0;
          __pyx_t_14 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 174, __pyx_L47_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 174, __pyx_L47_error)
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_14)) {
            if (likely(PyList_CheckExact(__pyx_t_4))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 174, __pyx_L47_error)
                #endif
                if (__pyx_t_1 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 174, __pyx_L47_error)
              #else
              __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 174, __pyx_L47_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 174, __pyx_L47_error)
                #endif
                if (__pyx_t_1 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 174, __pyx_L47_error)
              #else
              __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 174, __pyx_L47_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_14(__pyx_t_4);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 174, __pyx_L47_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
            PyObject* sequence = __pyx_t_5;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 174, __pyx_L47_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_16 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_16 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_16);
            #else
            __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 174, __pyx_L47_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_16 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 174, __pyx_L47_error)
            __Pyx_GOTREF(__pyx_t_16);
            #endif
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_15 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 174, __pyx_L47_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_17 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_15);
            index = 0; __pyx_t_13 = __pyx_t_17(__pyx_t_15); if (unlikely(!__pyx_t_13)) goto __pyx_L55_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_13);
            index = 1; __pyx_t_16 = __pyx_t_17(__pyx_t_15); if (unlikely(!__pyx_t_16)) goto __pyx_L55_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_16);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_15), 2) < 0) __PYX_ERR(0, 174, __pyx_L47_error)
            __pyx_t_17 = NULL;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            goto __pyx_L56_unpacking_done;
            __pyx_L55_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_17 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 174, __pyx_L47_error)
            __pyx_L56_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_eachx, __pyx_t_13);
          __pyx_t_13 = 0;
          __Pyx_XDECREF_SET(__pyx_v_eachq2, __pyx_t_16);
          __pyx_t_16 = 0;
          { /* enter inner scope */
            __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 174, __pyx_L59_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_13 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flavors); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 174, __pyx_L59_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_15 = NULL;
            __pyx_t_6 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_13))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_13);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_13, function);
                __pyx_t_6 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_15, NULL};
              __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 174, __pyx_L59_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            }
            if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
              __pyx_t_13 = __pyx_t_16; __Pyx_INCREF(__pyx_t_13);
              __pyx_t_18 = 0;
              __pyx_t_19 = NULL;
            } else {
              __pyx_t_18 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 174, __pyx_L59_error)
              __Pyx_GOTREF(__pyx_t_13);
              __pyx_t_19 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_13); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 174, __pyx_L59_error)
            }
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            for (;;) {
              if (likely(!__pyx_t_19)) {
                if (likely(PyList_CheckExact(__pyx_t_13))) {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_13);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 174, __pyx_L59_error)
                    #endif
                    if (__pyx_t_18 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_16 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_18); __Pyx_INCREF(__pyx_t_16); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 174, __pyx_L59_error)
                  #else
                  __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_13, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 174, __pyx_L59_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  #endif
                } else {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_13);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 174, __pyx_L59_error)
                    #endif
                    if (__pyx_t_18 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_18); __Pyx_INCREF(__pyx_t_16); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 174, __pyx_L59_error)
                  #else
                  __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_13, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 174, __pyx_L59_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  #endif
                }
              } else {
                __pyx_t_16 = __pyx_t_19(__pyx_t_13);
                if (unlikely(!__pyx_t_16)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 174, __pyx_L59_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_16);
              }
              __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_pid, __pyx_t_16);
              __pyx_t_16 = 0;
              __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_8genexpr2__pyx_v_pid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L59_error)
              __pyx_t_20 = __pyx_PyFloat_AsDouble(__pyx_v_eachx); if (unlikely((__pyx_t_20 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L59_error)
              __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_eachq2); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L59_error)
              try {
                __pyx_t_22 = __pyx_v_self->_ptr->xfxQ2(__pyx_t_6, __pyx_t_20, __pyx_t_21);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 174, __pyx_L59_error)
              }
              __pyx_t_16 = PyFloat_FromDouble(__pyx_t_22); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 174, __pyx_L59_error)
              __Pyx_GOTREF(__pyx_t_16);
              if (unlikely(PyDict_SetItem(__pyx_t_5, (PyObject*)__pyx_8genexpr2__pyx_v_pid, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 174, __pyx_L59_error)
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_pid); __pyx_8genexpr2__pyx_v_pid = 0;
            goto __pyx_L63_exit_scope;
            __pyx_L59_error:;
            __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_pid); __pyx_8genexpr2__pyx_v_pid = 0;
            goto __pyx_L47_error;
            __pyx_L63_exit_scope:;
          } /* exit inner scope */
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 174, __pyx_L47_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L51_try_return;

        /* "python/lhapdf.pyx":173
 *         elif len(args) == 2:
 *             x, q2 = args
 *             try:             # <<<<<<<<<<<<<<
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 */
      }
      __pyx_L47_error:;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "python/lhapdf.pyx":175
 *             try:
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return {pid : self._ptr.xfxQ2(pid, x, q2) for pid in self.flavors()}
 *         else:
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("python.lhapdf.PDF.xfxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 175, __pyx_L49_except_error)
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_4);
        __Pyx_XGOTREF(__pyx_t_5);

        /* "python/lhapdf.pyx":176
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 *                 return {pid : self._ptr.xfxQ2(pid, x, q2) for pid in self.flavors()}             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Wrong number of arguments given to xfxQ2: 2 or 3 required, %d provided" % len(args))
 */
        __Pyx_XDECREF(__pyx_r);
        { /* enter inner scope */
          __pyx_t_13 = PyDict_New(); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 176, __pyx_L69_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flavors); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 176, __pyx_L69_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_24 = NULL;
          __pyx_t_6 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_24)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_24);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
              __pyx_t_6 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_24, NULL};
            __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
            __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
            if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 176, __pyx_L69_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
            __pyx_t_15 = __pyx_t_16; __Pyx_INCREF(__pyx_t_15);
            __pyx_t_1 = 0;
            __pyx_t_14 = NULL;
          } else {
            __pyx_t_1 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 176, __pyx_L69_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 176, __pyx_L69_error)
          }
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          for (;;) {
            if (likely(!__pyx_t_14)) {
              if (likely(PyList_CheckExact(__pyx_t_15))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_15);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 176, __pyx_L69_error)
                  #endif
                  if (__pyx_t_1 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_16 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_1); __Pyx_INCREF(__pyx_t_16); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 176, __pyx_L69_error)
                #else
                __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 176, __pyx_L69_error)
                __Pyx_GOTREF(__pyx_t_16);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_15);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 176, __pyx_L69_error)
                  #endif
                  if (__pyx_t_1 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_1); __Pyx_INCREF(__pyx_t_16); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 176, __pyx_L69_error)
                #else
                __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 176, __pyx_L69_error)
                __Pyx_GOTREF(__pyx_t_16);
                #endif
              }
            } else {
              __pyx_t_16 = __pyx_t_14(__pyx_t_15);
              if (unlikely(!__pyx_t_16)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 176, __pyx_L69_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_16);
            }
            __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_pid, __pyx_t_16);
            __pyx_t_16 = 0;
            __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_8genexpr3__pyx_v_pid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L69_error)
            __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L69_error)
            __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_q2); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L69_error)
            try {
              __pyx_t_20 = __pyx_v_self->_ptr->xfxQ2(__pyx_t_6, __pyx_t_22, __pyx_t_21);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 176, __pyx_L69_error)
            }
            __pyx_t_16 = PyFloat_FromDouble(__pyx_t_20); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 176, __pyx_L69_error)
            __Pyx_GOTREF(__pyx_t_16);
            if (unlikely(PyDict_SetItem(__pyx_t_13, (PyObject*)__pyx_8genexpr3__pyx_v_pid, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 176, __pyx_L69_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_pid); __pyx_8genexpr3__pyx_v_pid = 0;
          goto __pyx_L73_exit_scope;
          __pyx_L69_error:;
          __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_pid); __pyx_8genexpr3__pyx_v_pid = 0;
          goto __pyx_L49_except_error;
          __pyx_L73_exit_scope:;
        } /* exit inner scope */
        __pyx_r = __pyx_t_13;
        __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L50_except_return;
      }
      goto __pyx_L49_except_error;

      /* "python/lhapdf.pyx":173
 *         elif len(args) == 2:
 *             x, q2 = args
 *             try:             # <<<<<<<<<<<<<<
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 */
      __pyx_L49_except_error:;
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L51_try_return:;
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L50_except_return:;
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      goto __pyx_L0;
    }

    /* "python/lhapdf.pyx":171
 *                 except TypeError:
 *                     return self._ptr.xfxQ2(pid, x, q2)
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             x, q2 = args
 *             try:
 */
  }

  /* "python/lhapdf.pyx":178
 *                 return {pid : self._ptr.xfxQ2(pid, x, q2) for pid in self.flavors()}
 *         else:
 *             raise Exception("Wrong number of arguments given to xfxQ2: 2 or 3 required, %d provided" % len(args))             # <<<<<<<<<<<<<<
 * 
 *     def inRangeQ(self, q):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 178, __pyx_L1_error)
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Wrong_number_of_arguments_given_2, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 178, __pyx_L1_error)
  }

  /* "python/lhapdf.pyx":141
 *             raise Exception("Wrong number of arguments given to xfxQ: 2 or 3 required, %d provided" % len(args))
 * 
 *     def xfxQ2(self, *args):             # <<<<<<<<<<<<<<
 *         """Return the PDF xf(x,Q2) value for the given parton ID, x, and Q2 values.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_AddTraceback("python.lhapdf.PDF.xfxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pid);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_q2);
  __Pyx_XDECREF(__pyx_v_eachx);
  __Pyx_XDECREF(__pyx_v_eachq2);
  __Pyx_XDECREF(__pyx_v_eachpid);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_pid);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_pid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":180
 *             raise Exception("Wrong number of arguments given to xfxQ2: 2 or 3 required, %d provided" % len(args))
 * 
 *     def inRangeQ(self, q):             # <<<<<<<<<<<<<<
 *         "Check if the specified Q value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ(q)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_11inRangeQ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_10inRangeQ, "PDF.inRangeQ(self, q)\nCheck if the specified Q value is in the unextrapolated range of this PDF.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_11inRangeQ = {"inRangeQ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_11inRangeQ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_10inRangeQ};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_11inRangeQ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_q = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inRangeQ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "inRangeQ") < 0)) __PYX_ERR(0, 180, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_q = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inRangeQ", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 180, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDF.inRangeQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_10inRangeQ(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v_q);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_10inRangeQ(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inRangeQ", 1);

  /* "python/lhapdf.pyx":182
 *     def inRangeQ(self, q):
 *         "Check if the specified Q value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ(q)             # <<<<<<<<<<<<<<
 * 
 *     def inRangeQ2(self, q2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_q); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 182, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_ptr->inRangeQ(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 182, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":180
 *             raise Exception("Wrong number of arguments given to xfxQ2: 2 or 3 required, %d provided" % len(args))
 * 
 *     def inRangeQ(self, q):             # <<<<<<<<<<<<<<
 *         "Check if the specified Q value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ(q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDF.inRangeQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":184
 *         return self._ptr.inRangeQ(q)
 * 
 *     def inRangeQ2(self, q2):             # <<<<<<<<<<<<<<
 *         "Check if the specified Q2 value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ2(q2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_13inRangeQ2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_12inRangeQ2, "PDF.inRangeQ2(self, q2)\nCheck if the specified Q2 value is in the unextrapolated range of this PDF.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_13inRangeQ2 = {"inRangeQ2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_13inRangeQ2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_12inRangeQ2};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_13inRangeQ2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_q2 = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inRangeQ2 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q2,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 184, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "inRangeQ2") < 0)) __PYX_ERR(0, 184, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_q2 = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inRangeQ2", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 184, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDF.inRangeQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_12inRangeQ2(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v_q2);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_12inRangeQ2(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inRangeQ2", 1);

  /* "python/lhapdf.pyx":186
 *     def inRangeQ2(self, q2):
 *         "Check if the specified Q2 value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ2(q2)             # <<<<<<<<<<<<<<
 * 
 *     def inRangeX(self, x):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_q2); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_ptr->inRangeQ2(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 186, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":184
 *         return self._ptr.inRangeQ(q)
 * 
 *     def inRangeQ2(self, q2):             # <<<<<<<<<<<<<<
 *         "Check if the specified Q2 value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ2(q2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDF.inRangeQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":188
 *         return self._ptr.inRangeQ2(q2)
 * 
 *     def inRangeX(self, x):             # <<<<<<<<<<<<<<
 *         "Check if the specified x value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeX(x)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_15inRangeX(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_14inRangeX, "PDF.inRangeX(self, x)\nCheck if the specified x value is in the unextrapolated range of this PDF.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_15inRangeX = {"inRangeX", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_15inRangeX, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_14inRangeX};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_15inRangeX(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inRangeX (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "inRangeX") < 0)) __PYX_ERR(0, 188, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_x = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inRangeX", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 188, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDF.inRangeX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_14inRangeX(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v_x);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_14inRangeX(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inRangeX", 1);

  /* "python/lhapdf.pyx":190
 *     def inRangeX(self, x):
 *         "Check if the specified x value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeX(x)             # <<<<<<<<<<<<<<
 * 
 *     def inRangeXQ(self, x, q):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_ptr->inRangeX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 190, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":188
 *         return self._ptr.inRangeQ2(q2)
 * 
 *     def inRangeX(self, x):             # <<<<<<<<<<<<<<
 *         "Check if the specified x value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeX(x)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDF.inRangeX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":192
 *         return self._ptr.inRangeX(x)
 * 
 *     def inRangeXQ(self, x, q):             # <<<<<<<<<<<<<<
 *         "Check if the specified x and Q values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ(x, q)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_17inRangeXQ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_16inRangeXQ, "PDF.inRangeXQ(self, x, q)\nCheck if the specified x and Q values are in the unextrapolated range of this PDF.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_17inRangeXQ = {"inRangeXQ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_17inRangeXQ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_16inRangeXQ};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_17inRangeXQ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_q = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inRangeXQ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_q,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("inRangeXQ", 1, 2, 2, 1); __PYX_ERR(0, 192, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "inRangeXQ") < 0)) __PYX_ERR(0, 192, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_q = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inRangeXQ", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 192, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDF.inRangeXQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_16inRangeXQ(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v_x, __pyx_v_q);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_16inRangeXQ(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_q) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inRangeXQ", 1);

  /* "python/lhapdf.pyx":194
 *     def inRangeXQ(self, x, q):
 *         "Check if the specified x and Q values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ(x, q)             # <<<<<<<<<<<<<<
 * 
 *     def inRangeXQ2(self, x, q2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_q); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->_ptr->inRangeXQ(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 194, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":192
 *         return self._ptr.inRangeX(x)
 * 
 *     def inRangeXQ(self, x, q):             # <<<<<<<<<<<<<<
 *         "Check if the specified x and Q values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ(x, q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("python.lhapdf.PDF.inRangeXQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":196
 *         return self._ptr.inRangeXQ(x, q)
 * 
 *     def inRangeXQ2(self, x, q2):             # <<<<<<<<<<<<<<
 *         "Check if the specified x and Q2 values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ2(x, q2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_19inRangeXQ2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_18inRangeXQ2, "PDF.inRangeXQ2(self, x, q2)\nCheck if the specified x and Q2 values are in the unextrapolated range of this PDF.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_19inRangeXQ2 = {"inRangeXQ2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_19inRangeXQ2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_18inRangeXQ2};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_19inRangeXQ2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_q2 = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inRangeXQ2 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_q2,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("inRangeXQ2", 1, 2, 2, 1); __PYX_ERR(0, 196, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "inRangeXQ2") < 0)) __PYX_ERR(0, 196, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_q2 = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inRangeXQ2", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 196, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDF.inRangeXQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_18inRangeXQ2(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v_x, __pyx_v_q2);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_18inRangeXQ2(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_q2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inRangeXQ2", 1);

  /* "python/lhapdf.pyx":198
 *     def inRangeXQ2(self, x, q2):
 *         "Check if the specified x and Q2 values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ2(x, q2)             # <<<<<<<<<<<<<<
 * 
 *     def flavors(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_q2); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->_ptr->inRangeXQ2(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 198, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":196
 *         return self._ptr.inRangeXQ(x, q)
 * 
 *     def inRangeXQ2(self, x, q2):             # <<<<<<<<<<<<<<
 *         "Check if the specified x and Q2 values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ2(x, q2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("python.lhapdf.PDF.inRangeXQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":200
 *         return self._ptr.inRangeXQ2(x, q2)
 * 
 *     def flavors(self):             # <<<<<<<<<<<<<<
 *         "Return the list of parton IDs supported by this PDF."
 *         # TODO: Use Cython >= 0.17 STL type coercion when available
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_21flavors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_20flavors, "PDF.flavors(self)\nReturn the list of parton IDs supported by this PDF.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_21flavors = {"flavors", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_21flavors, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_20flavors};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_21flavors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flavors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("flavors", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "flavors", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_20flavors(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_20flavors(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  std::vector<int>  __pyx_v_flavs;
  std::vector<int> ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<int> ::size_type __pyx_t_2;
  std::vector<int> ::size_type __pyx_t_3;
  std::vector<int> ::size_type __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flavors", 1);

  /* "python/lhapdf.pyx":203
 *         "Return the list of parton IDs supported by this PDF."
 *         # TODO: Use Cython >= 0.17 STL type coercion when available
 *         cdef vector[int] flavs = self._ptr.flavors()             # <<<<<<<<<<<<<<
 *         return [flavs[i] for i in xrange(flavs.size())]
 * 
 */
  __pyx_v_flavs = __pyx_v_self->_ptr->flavors();

  /* "python/lhapdf.pyx":204
 *         # TODO: Use Cython >= 0.17 STL type coercion when available
 *         cdef vector[int] flavs = self._ptr.flavors()
 *         return [flavs[i] for i in xrange(flavs.size())]             # <<<<<<<<<<<<<<
 * 
 *     def hasFlavor(self, pid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_flavs.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_flavs[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":200
 *         return self._ptr.inRangeXQ2(x, q2)
 * 
 *     def flavors(self):             # <<<<<<<<<<<<<<
 *         "Return the list of parton IDs supported by this PDF."
 *         # TODO: Use Cython >= 0.17 STL type coercion when available
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("python.lhapdf.PDF.flavors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":206
 *         return [flavs[i] for i in xrange(flavs.size())]
 * 
 *     def hasFlavor(self, pid):             # <<<<<<<<<<<<<<
 *         "Check if the specified parton ID is contained in this PDF."
 *         return self._ptr.hasFlavor(pid)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_23hasFlavor(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_22hasFlavor, "PDF.hasFlavor(self, pid)\nCheck if the specified parton ID is contained in this PDF.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_23hasFlavor = {"hasFlavor", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_23hasFlavor, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_22hasFlavor};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_23hasFlavor(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_pid = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hasFlavor (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pid,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pid)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 206, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "hasFlavor") < 0)) __PYX_ERR(0, 206, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_pid = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hasFlavor", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 206, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDF.hasFlavor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_22hasFlavor(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v_pid);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_22hasFlavor(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_pid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hasFlavor", 1);

  /* "python/lhapdf.pyx":208
 *     def hasFlavor(self, pid):
 *         "Check if the specified parton ID is contained in this PDF."
 *         return self._ptr.hasFlavor(pid)             # <<<<<<<<<<<<<<
 * 
 *     def quarkMass(self, int id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_pid); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_ptr->hasFlavor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 208, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":206
 *         return [flavs[i] for i in xrange(flavs.size())]
 * 
 *     def hasFlavor(self, pid):             # <<<<<<<<<<<<<<
 *         "Check if the specified parton ID is contained in this PDF."
 *         return self._ptr.hasFlavor(pid)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDF.hasFlavor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":210
 *         return self._ptr.hasFlavor(pid)
 * 
 *     def quarkMass(self, int id):             # <<<<<<<<<<<<<<
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_25quarkMass(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_24quarkMass, "PDF.quarkMass(self, int id)\nGet mass of quark with PID code id");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_25quarkMass = {"quarkMass", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_25quarkMass, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_24quarkMass};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_25quarkMass(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_id;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quarkMass (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "quarkMass") < 0)) __PYX_ERR(0, 210, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("quarkMass", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 210, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDF.quarkMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_24quarkMass(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v_id);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_24quarkMass(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, int __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quarkMass", 1);

  /* "python/lhapdf.pyx":212
 *     def quarkMass(self, int id):
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)             # <<<<<<<<<<<<<<
 * 
 *     def quarkThreshold(self, int id):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->quarkMass(__pyx_v_id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 212, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":210
 *         return self._ptr.hasFlavor(pid)
 * 
 *     def quarkMass(self, int id):             # <<<<<<<<<<<<<<
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDF.quarkMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":214
 *         return self._ptr.quarkMass(id)
 * 
 *     def quarkThreshold(self, int id):             # <<<<<<<<<<<<<<
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_27quarkThreshold(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_26quarkThreshold, "PDF.quarkThreshold(self, int id)\nGet activation threshold of quark with PID code id");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_27quarkThreshold = {"quarkThreshold", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_27quarkThreshold, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_26quarkThreshold};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_27quarkThreshold(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_id;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quarkThreshold (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "quarkThreshold") < 0)) __PYX_ERR(0, 214, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("quarkThreshold", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 214, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDF.quarkThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_26quarkThreshold(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v_id);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_26quarkThreshold(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, int __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quarkThreshold", 1);

  /* "python/lhapdf.pyx":216
 *     def quarkThreshold(self, int id):
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)             # <<<<<<<<<<<<<<
 * 
 *     cdef _set(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->quarkThreshold(__pyx_v_id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 216, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":214
 *         return self._ptr.quarkMass(id)
 * 
 *     def quarkThreshold(self, int id):             # <<<<<<<<<<<<<<
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDF.quarkThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":218
 *         return self._ptr.quarkThreshold(id)
 * 
 *     cdef _set(self):             # <<<<<<<<<<<<<<
 *         cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *         obj.set_ptr(&self._ptr.set())
 */

static PyObject *__pyx_f_6python_6lhapdf_3PDF__set(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set", 1);

  /* "python/lhapdf.pyx":219
 * 
 *     cdef _set(self):
 *         cdef PDFSet obj = PDFSet.__new__(PDFSet)             # <<<<<<<<<<<<<<
 *         obj.set_ptr(&self._ptr.set())
 *         return obj
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_PDFSet(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_PDFSet), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_obj = ((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":220
 *     cdef _set(self):
 *         cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *         obj.set_ptr(&self._ptr.set())             # <<<<<<<<<<<<<<
 *         return obj
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_PDFSet *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, (&__pyx_v_self->_ptr->set())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":221
 *         cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *         obj.set_ptr(&self._ptr.set())
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     def set(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_obj);
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":218
 *         return self._ptr.quarkThreshold(id)
 * 
 *     cdef _set(self):             # <<<<<<<<<<<<<<
 *         cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *         obj.set_ptr(&self._ptr.set())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDF._set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":223
 *         return obj
 * 
 *     def set(self):             # <<<<<<<<<<<<<<
 *         "Return the corresponding PDFSet"
 *         return self._set()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_29set(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_28set, "PDF.set(self)\nReturn the corresponding PDFSet");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_29set = {"set", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_29set, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_28set};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_29set(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("set", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_28set(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_28set(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set", 1);

  /* "python/lhapdf.pyx":225
 *     def set(self):
 *         "Return the corresponding PDFSet"
 *         return self._set()             # <<<<<<<<<<<<<<
 * 
 *     cdef _info(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_PDF *)__pyx_v_self->__pyx_vtab)->_set(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":223
 *         return obj
 * 
 *     def set(self):             # <<<<<<<<<<<<<<
 *         "Return the corresponding PDFSet"
 *         return self._set()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDF.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":227
 *         return self._set()
 * 
 *     cdef _info(self):             # <<<<<<<<<<<<<<
 *         cdef PDFInfo obj = PDFInfo.__new__(PDFInfo)
 *         obj.set_ptr(&self._ptr.info())
 */

static PyObject *__pyx_f_6python_6lhapdf_3PDF__info(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  struct __pyx_obj_6python_6lhapdf_PDFInfo *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_info", 1);

  /* "python/lhapdf.pyx":228
 * 
 *     cdef _info(self):
 *         cdef PDFInfo obj = PDFInfo.__new__(PDFInfo)             # <<<<<<<<<<<<<<
 *         obj.set_ptr(&self._ptr.info())
 *         obj.set_parent(self)
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_PDFInfo(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_PDFInfo), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_obj = ((struct __pyx_obj_6python_6lhapdf_PDFInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":229
 *     cdef _info(self):
 *         cdef PDFInfo obj = PDFInfo.__new__(PDFInfo)
 *         obj.set_ptr(&self._ptr.info())             # <<<<<<<<<<<<<<
 *         obj.set_parent(self)
 *         return obj
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_PDFInfo *)__pyx_v_obj->__pyx_base.__pyx_vtab)->__pyx_base.set_ptr(((struct __pyx_obj_6python_6lhapdf_Info *)__pyx_v_obj), (&__pyx_v_self->_ptr->info())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":230
 *         cdef PDFInfo obj = PDFInfo.__new__(PDFInfo)
 *         obj.set_ptr(&self._ptr.info())
 *         obj.set_parent(self)             # <<<<<<<<<<<<<<
 *         return obj
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_PDFInfo *)__pyx_v_obj->__pyx_base.__pyx_vtab)->set_parent(__pyx_v_obj, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":231
 *         obj.set_ptr(&self._ptr.info())
 *         obj.set_parent(self)
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     def info(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_obj);
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":227
 *         return self._set()
 * 
 *     cdef _info(self):             # <<<<<<<<<<<<<<
 *         cdef PDFInfo obj = PDFInfo.__new__(PDFInfo)
 *         obj.set_ptr(&self._ptr.info())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDF._info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":233
 *         return obj
 * 
 *     def info(self):             # <<<<<<<<<<<<<<
 *         "Return the corresponding PDFInfo"
 *         return self._info()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_31info(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_30info, "PDF.info(self)\nReturn the corresponding PDFInfo");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_31info = {"info", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_31info, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_30info};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_31info(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("info (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("info", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "info", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_30info(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_30info(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("info", 1);

  /* "python/lhapdf.pyx":235
 *     def info(self):
 *         "Return the corresponding PDFInfo"
 *         return self._info()             # <<<<<<<<<<<<<<
 * 
 *     def _print(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_PDF *)__pyx_v_self->__pyx_vtab)->_info(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":233
 *         return obj
 * 
 *     def info(self):             # <<<<<<<<<<<<<<
 *         "Return the corresponding PDFInfo"
 *         return self._info()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDF.info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":237
 *         return self._info()
 * 
 *     def _print(self):             # <<<<<<<<<<<<<<
 *         "Print a short summary to stdout"
 *         self._ptr._print()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_33_print(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_32_print, "PDF._print(self)\nPrint a short summary to stdout");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_33_print = {"_print", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_33_print, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_32_print};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_33_print(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_print (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_print", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_print", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_32_print(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_32_print(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_print", 1);

  /* "python/lhapdf.pyx":239
 *     def _print(self):
 *         "Print a short summary to stdout"
 *         self._ptr._print()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  try {
    __pyx_v_self->_ptr->print();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 239, __pyx_L1_error)
  }

  /* "python/lhapdf.pyx":237
 *         return self._info()
 * 
 *     def _print(self):             # <<<<<<<<<<<<<<
 *         "Print a short summary to stdout"
 *         self._ptr._print()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDF._print", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":241
 *         self._ptr._print()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         #self._ptr._print()
 *         s = "PDF<{}/{:d}, {}, LHAPDF ID={:d}; {:d} flavors, x > {:2.1e}, Q2 < {:2.1e} GeV2>"\
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_35__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_35__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_34__repr__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_34__repr__(struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "python/lhapdf.pyx":244
 *         #self._ptr._print()
 *         s = "PDF<{}/{:d}, {}, LHAPDF ID={:d}; {:d} flavors, x > {:2.1e}, Q2 < {:2.1e} GeV2>"\
 *             .format(self.set().name, self.memberID, self.type, self.lhapdfID,             # <<<<<<<<<<<<<<
 *                     len(self.flavors()), self.xMin, self.q2Max)
 *         return s
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_PDF_d_LHAPDF_ID_d_d_flavors_x_2, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memberID); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lhapdfID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "python/lhapdf.pyx":245
 *         s = "PDF<{}/{:d}, {}, LHAPDF ID={:d}; {:d} flavors, x > {:2.1e}, Q2 < {:2.1e} GeV2>"\
 *             .format(self.set().name, self.memberID, self.type, self.lhapdfID,
 *                     len(self.flavors()), self.xMin, self.q2Max)             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flavors); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __pyx_t_11 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_xMin); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_q2Max); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[8] = {__pyx_t_12, __pyx_t_4, __pyx_t_3, __pyx_t_5, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 7+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":246
 *             .format(self.set().name, self.memberID, self.type, self.lhapdfID,
 *                     len(self.flavors()), self.xMin, self.q2Max)
 *         return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":241
 *         self._ptr._print()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         #self._ptr._print()
 *         s = "PDF<{}/{:d}, {}, LHAPDF ID={:d}; {:d} flavors, x > {:2.1e}, Q2 < {:2.1e} GeV2>"\
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("python.lhapdf.PDF.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_37__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_36__reduce_cython__, "PDF.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_37__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_37__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_36__reduce_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_37__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_36__reduce_cython__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__ptr_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDF.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_39__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_3PDF_38__setstate_cython__, "PDF.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3PDF_39__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_39__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_38__setstate_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_3PDF_39__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDF.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_3PDF_38__setstate_cython__(((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_3PDF_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__ptr_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDF.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":254
 *     """
 *     cdef c.Info* _ptr
 *     cdef set_ptr(self, c.Info* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

static PyObject *__pyx_f_6python_6lhapdf_4Info_set_ptr(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self, LHAPDF::Info *__pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ptr", 1);

  /* "python/lhapdf.pyx":255
 *     cdef c.Info* _ptr
 *     cdef set_ptr(self, c.Info* ptr):
 *         self._ptr = ptr             # <<<<<<<<<<<<<<
 * 
 *     # def metadata(self):
 */
  __pyx_v_self->_ptr = __pyx_v_ptr;

  /* "python/lhapdf.pyx":254
 *     """
 *     cdef c.Info* _ptr
 *     cdef set_ptr(self, c.Info* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":261
 *     #     return self._ptr.metadata()
 * 
 *     def keys(self):             # <<<<<<<<<<<<<<
 *         "Get the list of metadata keys"
 *         return self._ptr.keys()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_4Info_1keys(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_4Info_keys, "Info.keys(self)\nGet the list of metadata keys");
static PyMethodDef __pyx_mdef_6python_6lhapdf_4Info_1keys = {"keys", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_1keys, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_keys};
static PyObject *__pyx_pw_6python_6lhapdf_4Info_1keys(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("keys (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("keys", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "keys", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_4Info_keys(((struct __pyx_obj_6python_6lhapdf_Info *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_4Info_keys(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("keys", 1);

  /* "python/lhapdf.pyx":263
 *     def keys(self):
 *         "Get the list of metadata keys"
 *         return self._ptr.keys()             # <<<<<<<<<<<<<<
 * 
 *     def keys_local(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->_ptr->keys()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":261
 *     #     return self._ptr.metadata()
 * 
 *     def keys(self):             # <<<<<<<<<<<<<<
 *         "Get the list of metadata keys"
 *         return self._ptr.keys()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.Info.keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":265
 *         return self._ptr.keys()
 * 
 *     def keys_local(self):             # <<<<<<<<<<<<<<
 *         "Get the list of metadata keys at local level (config/set/member)"
 *         return self._ptr.keys_local()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_4Info_3keys_local(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_4Info_2keys_local, "Info.keys_local(self)\nGet the list of metadata keys at local level (config/set/member)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_4Info_3keys_local = {"keys_local", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_3keys_local, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_2keys_local};
static PyObject *__pyx_pw_6python_6lhapdf_4Info_3keys_local(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("keys_local (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("keys_local", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "keys_local", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_4Info_2keys_local(((struct __pyx_obj_6python_6lhapdf_Info *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_4Info_2keys_local(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("keys_local", 1);

  /* "python/lhapdf.pyx":267
 *     def keys_local(self):
 *         "Get the list of metadata keys at local level (config/set/member)"
 *         return self._ptr.keys_local()             # <<<<<<<<<<<<<<
 * 
 *     def has_key(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->_ptr->keys_local()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":265
 *         return self._ptr.keys()
 * 
 *     def keys_local(self):             # <<<<<<<<<<<<<<
 *         "Get the list of metadata keys at local level (config/set/member)"
 *         return self._ptr.keys_local()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.Info.keys_local", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":269
 *         return self._ptr.keys_local()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_4Info_5has_key(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_4Info_4has_key, "Info.has_key(self, key)\nReturn whether or not metadata for this key exists");
static PyMethodDef __pyx_mdef_6python_6lhapdf_4Info_5has_key = {"has_key", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_5has_key, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_4has_key};
static PyObject *__pyx_pw_6python_6lhapdf_4Info_5has_key(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 269, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "has_key") < 0)) __PYX_ERR(0, 269, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_key", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 269, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.Info.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_4Info_4has_key(((struct __pyx_obj_6python_6lhapdf_Info *)__pyx_v_self), __pyx_v_key);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_4Info_4has_key(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_key", 1);

  /* "python/lhapdf.pyx":271
 *     def has_key(self, key):
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(key)             # <<<<<<<<<<<<<<
 * 
 *     def has_key_local(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->has_key(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":269
 *         return self._ptr.keys_local()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.Info.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":273
 *         return self._ptr.has_key(key)
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_4Info_7has_key_local(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_4Info_6has_key_local, "Info.has_key_local(self, key)\nReturns whether or not metadata for this key exists at a local level (config/set/member)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_4Info_7has_key_local = {"has_key_local", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_7has_key_local, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_6has_key_local};
static PyObject *__pyx_pw_6python_6lhapdf_4Info_7has_key_local(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key_local (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 273, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "has_key_local") < 0)) __PYX_ERR(0, 273, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_key_local", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 273, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.Info.has_key_local", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_4Info_6has_key_local(((struct __pyx_obj_6python_6lhapdf_Info *)__pyx_v_self), __pyx_v_key);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_4Info_6has_key_local(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_key_local", 1);

  /* "python/lhapdf.pyx":275
 *     def has_key_local(self, key):
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(key)             # <<<<<<<<<<<<<<
 * 
 *     # def get_entry(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->has_key_local(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":273
 *         return self._ptr.has_key(key)
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.Info.has_key_local", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":281
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         """\
 *         Returns metadata entry for this key if it exists, otherwise returns a fallback value.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_4Info_9get_entry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_4Info_8get_entry, "Info.get_entry(self, key, fallback=None)\n        Returns metadata entry for this key if it exists, otherwise returns a fallback value.\n\n        The string will be automatically converted to Python native types as far as possible\n        -- more complex types are possible if the yaml module is installed.\n        ");
static PyMethodDef __pyx_mdef_6python_6lhapdf_4Info_9get_entry = {"get_entry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_9get_entry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_8get_entry};
static PyObject *__pyx_pw_6python_6lhapdf_4Info_9get_entry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_fallback = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_entry (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_fallback,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fallback);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_entry") < 0)) __PYX_ERR(0, 281, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_fallback = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_entry", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 281, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.Info.get_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_4Info_8get_entry(((struct __pyx_obj_6python_6lhapdf_Info *)__pyx_v_self), __pyx_v_key, __pyx_v_fallback);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_4Info_8get_entry(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fallback) {
  PyObject *__pyx_v_rtn = NULL;
  PyObject *__pyx_v_ast = NULL;
  PyObject *__pyx_v_yaml = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  std::string __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_entry", 1);

  /* "python/lhapdf.pyx":288
 *         -- more complex types are possible if the yaml module is installed.
 *         """
 *         rtn = fallback             # <<<<<<<<<<<<<<
 *         try:
 *             rtn = self._ptr.get_entry(key, str(fallback))
 */
  __Pyx_INCREF(__pyx_v_fallback);
  __pyx_v_rtn = __pyx_v_fallback;

  /* "python/lhapdf.pyx":289
 *         """
 *         rtn = fallback
 *         try:             # <<<<<<<<<<<<<<
 *             rtn = self._ptr.get_entry(key, str(fallback))
 *             try:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "python/lhapdf.pyx":290
 *         rtn = fallback
 *         try:
 *             rtn = self._ptr.get_entry(key, str(fallback))             # <<<<<<<<<<<<<<
 *             try:
 *                 import ast
 */
      __pyx_t_4 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L3_error)
      __pyx_t_5 = __Pyx_PyObject_Str(__pyx_v_fallback); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 290, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      try {
        __pyx_t_7 = __pyx_v_self->_ptr->get_entry(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4), __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 290, __pyx_L3_error)
      }
      __pyx_t_5 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 290, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_rtn, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "python/lhapdf.pyx":291
 *         try:
 *             rtn = self._ptr.get_entry(key, str(fallback))
 *             try:             # <<<<<<<<<<<<<<
 *                 import ast
 *                 rtn = ast.literal_eval(rtn)
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {

          /* "python/lhapdf.pyx":292
 *             rtn = self._ptr.get_entry(key, str(fallback))
 *             try:
 *                 import ast             # <<<<<<<<<<<<<<
 *                 rtn = ast.literal_eval(rtn)
 *             except:
 */
          __pyx_t_5 = __Pyx_ImportDottedModuleRelFirst(__pyx_n_s_ast, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_v_ast = __pyx_t_5;
          __pyx_t_5 = 0;

          /* "python/lhapdf.pyx":293
 *             try:
 *                 import ast
 *                 rtn = ast.literal_eval(rtn)             # <<<<<<<<<<<<<<
 *             except:
 *                 try:
 */
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_ast, __pyx_n_s_literal_eval); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 293, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = NULL;
          __pyx_t_13 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_12)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_12);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
              __pyx_t_13 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_v_rtn};
            __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF_SET(__pyx_v_rtn, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "python/lhapdf.pyx":291
 *         try:
 *             rtn = self._ptr.get_entry(key, str(fallback))
 *             try:             # <<<<<<<<<<<<<<
 *                 import ast
 *                 rtn = ast.literal_eval(rtn)
 */
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L14_try_end;
        __pyx_L9_error:;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "python/lhapdf.pyx":294
 *                 import ast
 *                 rtn = ast.literal_eval(rtn)
 *             except:             # <<<<<<<<<<<<<<
 *                 try:
 *                     import yaml
 */
        /*except:*/ {
          __Pyx_AddTraceback("python.lhapdf.Info.get_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(0, 294, __pyx_L11_except_error)
          __Pyx_XGOTREF(__pyx_t_5);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_12);

          /* "python/lhapdf.pyx":295
 *                 rtn = ast.literal_eval(rtn)
 *             except:
 *                 try:             # <<<<<<<<<<<<<<
 *                     import yaml
 *                     rtn = yaml.full_load(rtn)
 */
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            /*try:*/ {

              /* "python/lhapdf.pyx":296
 *             except:
 *                 try:
 *                     import yaml             # <<<<<<<<<<<<<<
 *                     rtn = yaml.full_load(rtn)
 *                 except:
 */
              __pyx_t_17 = __Pyx_ImportDottedModuleRelFirst(__pyx_n_s_yaml, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 296, __pyx_L17_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_v_yaml = __pyx_t_17;
              __pyx_t_17 = 0;

              /* "python/lhapdf.pyx":297
 *                 try:
 *                     import yaml
 *                     rtn = yaml.full_load(rtn)             # <<<<<<<<<<<<<<
 *                 except:
 *                     pass
 */
              __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_v_yaml, __pyx_n_s_full_load); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 297, __pyx_L17_error)
              __Pyx_GOTREF(__pyx_t_18);
              __pyx_t_19 = NULL;
              __pyx_t_13 = 0;
              #if CYTHON_UNPACK_METHODS
              if (likely(PyMethod_Check(__pyx_t_18))) {
                __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_18);
                if (likely(__pyx_t_19)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
                  __Pyx_INCREF(__pyx_t_19);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_18, function);
                  __pyx_t_13 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_19, __pyx_v_rtn};
                __pyx_t_17 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
                __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
                if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 297, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              }
              __Pyx_DECREF_SET(__pyx_v_rtn, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "python/lhapdf.pyx":295
 *                 rtn = ast.literal_eval(rtn)
 *             except:
 *                 try:             # <<<<<<<<<<<<<<
 *                     import yaml
 *                     rtn = yaml.full_load(rtn)
 */
            }
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            goto __pyx_L24_try_end;
            __pyx_L17_error:;
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;

            /* "python/lhapdf.pyx":298
 *                     import yaml
 *                     rtn = yaml.full_load(rtn)
 *                 except:             # <<<<<<<<<<<<<<
 *                     pass
 *         except:
 */
            /*except:*/ {
              __Pyx_ErrRestore(0,0,0);
              goto __pyx_L18_exception_handled;
            }
            __pyx_L18_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_L24_try_end:;
          }
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L10_exception_handled;
        }

        /* "python/lhapdf.pyx":291
 *         try:
 *             rtn = self._ptr.get_entry(key, str(fallback))
 *             try:             # <<<<<<<<<<<<<<
 *                 import ast
 *                 rtn = ast.literal_eval(rtn)
 */
        __pyx_L11_except_error:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L3_error;
        __pyx_L10_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L14_try_end:;
      }

      /* "python/lhapdf.pyx":289
 *         """
 *         rtn = fallback
 *         try:             # <<<<<<<<<<<<<<
 *             rtn = self._ptr.get_entry(key, str(fallback))
 *             try:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "python/lhapdf.pyx":300
 *                 except:
 *                     pass
 *         except:             # <<<<<<<<<<<<<<
 *             pass
 *         return rtn
 */
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "python/lhapdf.pyx":302
 *         except:
 *             pass
 *         return rtn             # <<<<<<<<<<<<<<
 * 
 *     def set_entry(self, key, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_rtn);
  __pyx_r = __pyx_v_rtn;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":281
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         """\
 *         Returns metadata entry for this key if it exists, otherwise returns a fallback value.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rtn);
  __Pyx_XDECREF(__pyx_v_ast);
  __Pyx_XDECREF(__pyx_v_yaml);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":304
 *         return rtn
 * 
 *     def set_entry(self, key, value):             # <<<<<<<<<<<<<<
 *         "Set a metadata key"
 *         self._ptr.set_entry(key, str(value))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_4Info_11set_entry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_4Info_10set_entry, "Info.set_entry(self, key, value)\nSet a metadata key");
static PyMethodDef __pyx_mdef_6python_6lhapdf_4Info_11set_entry = {"set_entry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_11set_entry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_10set_entry};
static PyObject *__pyx_pw_6python_6lhapdf_4Info_11set_entry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_entry (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 304, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 304, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("set_entry", 1, 2, 2, 1); __PYX_ERR(0, 304, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_entry") < 0)) __PYX_ERR(0, 304, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_entry", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 304, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.Info.set_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_4Info_10set_entry(((struct __pyx_obj_6python_6lhapdf_Info *)__pyx_v_self), __pyx_v_key, __pyx_v_value);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_4Info_10set_entry(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_entry", 1);

  /* "python/lhapdf.pyx":306
 *     def set_entry(self, key, value):
 *         "Set a metadata key"
 *         self._ptr.set_entry(key, str(value))             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Str(__pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->_ptr->set_entry(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1), __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3));

  /* "python/lhapdf.pyx":304
 *         return rtn
 * 
 *     def set_entry(self, key, value):             # <<<<<<<<<<<<<<
 *         "Set a metadata key"
 *         self._ptr.set_entry(key, str(value))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.Info.set_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":308
 *         self._ptr.set_entry(key, str(value))
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "Info<{:d} keys, {:d} local>".format(len(self.keys()), len(self.keys_local()))
 *         return s
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_4Info_13__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_4Info_13__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_4Info_12__repr__(((struct __pyx_obj_6python_6lhapdf_Info *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_4Info_12__repr__(struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "python/lhapdf.pyx":309
 * 
 *     def __repr__(self):
 *         s = "Info<{:d} keys, {:d} local>".format(len(self.keys()), len(self.keys_local()))             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Info_d_keys_d_local, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_keys); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_7 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_keys_local); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_7 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":310
 *     def __repr__(self):
 *         s = "Info<{:d} keys, {:d} local>".format(len(self.keys()), len(self.keys_local()))
 *         return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":308
 *         self._ptr.set_entry(key, str(value))
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "Info<{:d} keys, {:d} local>".format(len(self.keys()), len(self.keys_local()))
 *         return s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("python.lhapdf.Info.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_4Info_15__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_4Info_14__reduce_cython__, "Info.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_4Info_15__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_15__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_14__reduce_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_4Info_15__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_4Info_14__reduce_cython__(((struct __pyx_obj_6python_6lhapdf_Info *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_4Info_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__ptr_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.Info.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_4Info_17__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_4Info_16__setstate_cython__, "Info.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_4Info_17__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_17__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_16__setstate_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_4Info_17__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.Info.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_4Info_16__setstate_cython__(((struct __pyx_obj_6python_6lhapdf_Info *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_4Info_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__ptr_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.Info.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":336
 *     #     pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def central(self):
 *         return self._obj.central
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_7central_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_7central_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_7central___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_7central___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":338
 *     @property
 *     def central(self):
 *         return self._obj.central             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.central); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":336
 *     #     pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def central(self):
 *         return self._obj.central
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.central.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":340
 *         return self._obj.central
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errplus(self):
 *         return self._obj.errplus
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_7errplus_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_7errplus_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_7errplus___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_7errplus___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":342
 *     @property
 *     def errplus(self):
 *         return self._obj.errplus             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.errplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":340
 *         return self._obj.central
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errplus(self):
 *         return self._obj.errplus
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errplus.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":344
 *         return self._obj.errplus
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errminus(self):
 *         return self._obj.errminus
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_8errminus_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_8errminus_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_8errminus___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_8errminus___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":346
 *     @property
 *     def errminus(self):
 *         return self._obj.errminus             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.errminus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":344
 *         return self._obj.errplus
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errminus(self):
 *         return self._obj.errminus
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errminus.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":348
 *         return self._obj.errminus
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errsymm(self):
 *         return self._obj.errsymm
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_7errsymm_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_7errsymm_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_7errsymm___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_7errsymm___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":350
 *     @property
 *     def errsymm(self):
 *         return self._obj.errsymm             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.errsymm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":348
 *         return self._obj.errminus
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errsymm(self):
 *         return self._obj.errsymm
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errsymm.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":352
 *         return self._obj.errsymm
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def scale(self):
 *         return self._obj.scale
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_5scale_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_5scale_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_5scale___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_5scale___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":354
 *     @property
 *     def scale(self):
 *         return self._obj.scale             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.scale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":352
 *         return self._obj.errsymm
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def scale(self):
 *         return self._obj.scale
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.scale.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":356
 *         return self._obj.scale
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errplus_pdf(self):
 *         return self._obj.errplus_pdf
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_11errplus_pdf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_11errplus_pdf_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_11errplus_pdf___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_11errplus_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":358
 *     @property
 *     def errplus_pdf(self):
 *         return self._obj.errplus_pdf             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.errplus_pdf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":356
 *         return self._obj.scale
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errplus_pdf(self):
 *         return self._obj.errplus_pdf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errplus_pdf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":360
 *         return self._obj.errplus_pdf
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errminus_pdf(self):
 *         return self._obj.errminus_pdf
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_12errminus_pdf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_12errminus_pdf_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_12errminus_pdf___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_12errminus_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":362
 *     @property
 *     def errminus_pdf(self):
 *         return self._obj.errminus_pdf             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.errminus_pdf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":360
 *         return self._obj.errplus_pdf
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errminus_pdf(self):
 *         return self._obj.errminus_pdf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errminus_pdf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":364
 *         return self._obj.errminus_pdf
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errsymm_pdf(self):
 *         return self._obj.errsymm_pdf
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_11errsymm_pdf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_11errsymm_pdf_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_11errsymm_pdf___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_11errsymm_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":366
 *     @property
 *     def errsymm_pdf(self):
 *         return self._obj.errsymm_pdf             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.errsymm_pdf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":364
 *         return self._obj.errminus_pdf
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errsymm_pdf(self):
 *         return self._obj.errsymm_pdf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errsymm_pdf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":368
 *         return self._obj.errsymm_pdf
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errplus_par(self):
 *         return self._obj.errplus_par
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_11errplus_par_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_11errplus_par_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_11errplus_par___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_11errplus_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":370
 *     @property
 *     def errplus_par(self):
 *         return self._obj.errplus_par             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.errplus_par); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":368
 *         return self._obj.errsymm_pdf
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errplus_par(self):
 *         return self._obj.errplus_par
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errplus_par.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":372
 *         return self._obj.errplus_par
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errminus_par(self):
 *         return self._obj.errminus_par
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_12errminus_par_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_12errminus_par_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_12errminus_par___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_12errminus_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":374
 *     @property
 *     def errminus_par(self):
 *         return self._obj.errminus_par             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.errminus_par); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":372
 *         return self._obj.errplus_par
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errminus_par(self):
 *         return self._obj.errminus_par
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errminus_par.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":376
 *         return self._obj.errminus_par
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errsymm_par(self):
 *         return self._obj.errsymm_par
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_11errsymm_par_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_11errsymm_par_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_11errsymm_par___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_11errsymm_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":378
 *     @property
 *     def errsymm_par(self):
 *         return self._obj.errsymm_par             # <<<<<<<<<<<<<<
 * 
 *     # Deprecated: remove
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.errsymm_par); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":376
 *         return self._obj.errminus_par
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errsymm_par(self):
 *         return self._obj.errsymm_par
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errsymm_par.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":381
 * 
 *     # Deprecated: remove
 *     @property             # <<<<<<<<<<<<<<
 *     def err_par(self):
 *         return self._obj.err_par
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_7err_par_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_7err_par_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_7err_par___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_7err_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":383
 *     @property
 *     def err_par(self):
 *         return self._obj.err_par             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.err_par); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":381
 * 
 *     # Deprecated: remove
 *     @property             # <<<<<<<<<<<<<<
 *     def err_par(self):
 *         return self._obj.err_par
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.err_par.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":385
 *         return self._obj.err_par
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errparts(self):
 *         return self._obj.errparts
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_8errparts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_8errparts_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_8errparts___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_8errparts___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":387
 *     @property
 *     def errparts(self):
 *         return self._obj.errparts             # <<<<<<<<<<<<<<
 * 
 *     #-------------
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(__pyx_v_self->_obj.errparts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":385
 *         return self._obj.err_par
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errparts(self):
 *         return self._obj.errparts
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errparts.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":391
 *     #-------------
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errs(self):
 *         return [self.errminus, self.errplus]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_4errs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_4errs_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_4errs___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_4errs___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":393
 *     @property
 *     def errs(self):
 *         return [self.errminus, self.errplus]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errminus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errplus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 393, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":391
 *     #-------------
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errs(self):
 *         return [self.errminus, self.errplus]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":395
 *         return [self.errminus, self.errplus]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errs_pdf(self):
 *         return [self.errminus_pdf, self.errplus_pdf]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_8errs_pdf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_8errs_pdf_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_8errs_pdf___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_8errs_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":397
 *     @property
 *     def errs_pdf(self):
 *         return [self.errminus_pdf, self.errplus_pdf]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errminus_pdf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errplus_pdf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 397, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":395
 *         return [self.errminus, self.errplus]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errs_pdf(self):
 *         return [self.errminus_pdf, self.errplus_pdf]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errs_pdf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":399
 *         return [self.errminus_pdf, self.errplus_pdf]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errmin(self):
 *         return self.central - self.errminus
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_6errmin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_6errmin_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_6errmin___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_6errmin___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":401
 *     @property
 *     def errmin(self):
 *         return self.central - self.errminus             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_central); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errminus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":399
 *         return [self.errminus_pdf, self.errplus_pdf]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errmin(self):
 *         return self.central - self.errminus
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errmin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":403
 *         return self.central - self.errminus
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errmax(self):
 *         return self.central + self.errplus
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_6errmax_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_6errmax_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_6errmax___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_6errmax___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":405
 *     @property
 *     def errmax(self):
 *         return self.central + self.errplus             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_central); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errplus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":403
 *         return self.central - self.errminus
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errmax(self):
 *         return self.central + self.errplus
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errmax.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":407
 *         return self.central + self.errplus
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errrange(self):
 *         return [self.errmin, self.errmax]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_8errrange_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_8errrange_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_8errrange___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_8errrange___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":409
 *     @property
 *     def errrange(self):
 *         return [self.errmin, self.errmax]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errmin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errmax); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 409, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":407
 *         return self.central + self.errplus
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errrange(self):
 *         return [self.errmin, self.errmax]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errrange.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":411
 *         return [self.errmin, self.errmax]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errmin_pdf(self):
 *         return self.central - self.errminus_pdf
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_10errmin_pdf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_10errmin_pdf_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_10errmin_pdf___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_10errmin_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":413
 *     @property
 *     def errmin_pdf(self):
 *         return self.central - self.errminus_pdf             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_central); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errminus_pdf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":411
 *         return [self.errmin, self.errmax]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errmin_pdf(self):
 *         return self.central - self.errminus_pdf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errmin_pdf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":415
 *         return self.central - self.errminus_pdf
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errmax_pdf(self):
 *         return self.central + self.errplus_pdf
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_10errmax_pdf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_10errmax_pdf_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_10errmax_pdf___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_10errmax_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":417
 *     @property
 *     def errmax_pdf(self):
 *         return self.central + self.errplus_pdf             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_central); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errplus_pdf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":415
 *         return self.central - self.errminus_pdf
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errmax_pdf(self):
 *         return self.central + self.errplus_pdf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errmax_pdf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":419
 *         return self.central + self.errplus_pdf
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errrange_pdf(self):
 *         return [self.errmin_pdf, self.errmax_pdf]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_12errrange_pdf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_12errrange_pdf_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_12errrange_pdf___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_12errrange_pdf___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":421
 *     @property
 *     def errrange_pdf(self):
 *         return [self.errmin_pdf, self.errmax_pdf]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errmin_pdf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errmax_pdf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":419
 *         return self.central + self.errplus_pdf
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errrange_pdf(self):
 *         return [self.errmin_pdf, self.errmax_pdf]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errrange_pdf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":423
 *         return [self.errmin_pdf, self.errmax_pdf]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errmin_par(self):
 *         return self.central - self.errminus_par
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_10errmin_par_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_10errmin_par_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_10errmin_par___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_10errmin_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":425
 *     @property
 *     def errmin_par(self):
 *         return self.central - self.errminus_par             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_central); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errminus_par); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":423
 *         return [self.errmin_pdf, self.errmax_pdf]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errmin_par(self):
 *         return self.central - self.errminus_par
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errmin_par.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":427
 *         return self.central - self.errminus_par
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errmax_par(self):
 *         return self.central + self.errplus_par
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_10errmax_par_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_10errmax_par_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_10errmax_par___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_10errmax_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":429
 *     @property
 *     def errmax_par(self):
 *         return self.central + self.errplus_par             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_central); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errplus_par); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":427
 *         return self.central - self.errminus_par
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errmax_par(self):
 *         return self.central + self.errplus_par
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errmax_par.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":431
 *         return self.central + self.errplus_par
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errrange_par(self):
 *         return [self.errmin_par, self.errmax_par]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_12errrange_par_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_12errrange_par_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_12errrange_par___get__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_12errrange_par___get__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":433
 *     @property
 *     def errrange_par(self):
 *         return [self.errmin_par, self.errmax_par]             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errmin_par); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errmax_par); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":431
 *         return self.central + self.errplus_par
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errrange_par(self):
 *         return [self.errmin_par, self.errmax_par]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.errrange_par.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":435
 *         return [self.errmin_par, self.errmax_par]
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "PDFUncertainty<{:2.1e} +{:2.1e} -{:2.1e}; {:d} components>"\
 *             .format(self.central, self.errplus, self.errminus, len(self.errparts))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_1__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty___repr__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty___repr__(struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "python/lhapdf.pyx":437
 *     def __repr__(self):
 *         s = "PDFUncertainty<{:2.1e} +{:2.1e} -{:2.1e}; {:d} components>"\
 *             .format(self.central, self.errplus, self.errminus, len(self.errparts))             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_PDFUncertainty_2_1e_2_1e_2_1e_d, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_central); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errplus); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errminus); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errparts); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_9 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_8, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 4+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":438
 *         s = "PDFUncertainty<{:2.1e} +{:2.1e} -{:2.1e}; {:d} components>"\
 *             .format(self.central, self.errplus, self.errminus, len(self.errparts))
 *         return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":435
 *         return [self.errmin_par, self.errmax_par]
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "PDFUncertainty<{:2.1e} +{:2.1e} -{:2.1e}; {:d} components>"\
 *             .format(self.central, self.errplus, self.errminus, len(self.errparts))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_14PDFUncertainty_2__reduce_cython__, "PDFUncertainty.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_14PDFUncertainty_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_14PDFUncertainty_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_14PDFUncertainty_2__reduce_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_2__reduce_cython__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_Pickling_of_struct_members_such, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_14PDFUncertainty_4__setstate_cython__, "PDFUncertainty.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_14PDFUncertainty_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_14PDFUncertainty_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_14PDFUncertainty_4__setstate_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_14PDFUncertainty_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_14PDFUncertainty_4__setstate_cython__(((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14PDFUncertainty_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_Pickling_of_struct_members_such, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDFUncertainty.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":457
 *     #     pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def qparts(self):
 *         return self._obj.qparts
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_6qparts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_6qparts_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_10PDFErrInfo_6qparts___get__(((struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_6qparts___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":459
 *     @property
 *     def qparts(self):
 *         return self._obj.qparts             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_std_3a__3a_string_2c_size_t_3e____3e___(__pyx_v_self->_obj.qparts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":457
 *     #     pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def qparts(self):
 *         return self._obj.qparts
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFErrInfo.qparts.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":461
 *         return self._obj.qparts
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def confLevel(self):
 *         return self._obj.conflevel
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_9confLevel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_9confLevel_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_10PDFErrInfo_9confLevel___get__(((struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_9confLevel___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":463
 *     @property
 *     def confLevel(self):
 *         return self._obj.conflevel             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_obj.conflevel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":461
 *         return self._obj.qparts
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def confLevel(self):
 *         return self._obj.conflevel
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFErrInfo.confLevel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":465
 *         return self._obj.conflevel
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errType(self):
 *         return self._obj.errtype
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_7errType_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_7errType_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_10PDFErrInfo_7errType___get__(((struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_7errType___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":467
 *     @property
 *     def errType(self):
 *         return self._obj.errtype             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_v_self->_obj.errtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":465
 *         return self._obj.conflevel
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errType(self):
 *         return self._obj.errtype
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFErrInfo.errType.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":469
 *         return self._obj.errtype
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def coreType(self):
 *         return self._obj.coreType()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_8coreType_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_8coreType_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_10PDFErrInfo_8coreType___get__(((struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_8coreType___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":471
 *     @property
 *     def coreType(self):
 *         return self._obj.coreType()             # <<<<<<<<<<<<<<
 * 
 *     # @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_v_self->_obj.coreType()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":469
 *         return self._obj.errtype
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def coreType(self):
 *         return self._obj.coreType()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFErrInfo.coreType.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":477
 *     #     return self._obj.qpartName(index)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def qpartNames(self):
 *         return self._obj.qpartNames()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_10qpartNames_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_10qpartNames_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_10PDFErrInfo_10qpartNames___get__(((struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_10qpartNames___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":479
 *     @property
 *     def qpartNames(self):
 *         return self._obj.qpartNames()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->_obj.qpartNames()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":477
 *     #     return self._obj.qpartName(index)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def qpartNames(self):
 *         return self._obj.qpartNames()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFErrInfo.qpartNames.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":481
 *         return self._obj.qpartNames()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nmemCore(self):
 *         return self._obj.nmemCore()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_8nmemCore_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_8nmemCore_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_10PDFErrInfo_8nmemCore___get__(((struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_8nmemCore___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":483
 *     @property
 *     def nmemCore(self):
 *         return self._obj.nmemCore()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_obj.nmemCore()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":481
 *         return self._obj.qpartNames()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nmemCore(self):
 *         return self._obj.nmemCore()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFErrInfo.nmemCore.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":485
 *         return self._obj.nmemCore()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nmemPar(self):
 *         return self._obj.nmemPar()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_7nmemPar_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_7nmemPar_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_10PDFErrInfo_7nmemPar___get__(((struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_7nmemPar___get__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":487
 *     @property
 *     def nmemPar(self):
 *         return self._obj.nmemPar()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_obj.nmemPar()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":485
 *         return self._obj.nmemCore()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nmemPar(self):
 *         return self._obj.nmemPar()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFErrInfo.nmemPar.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":489
 *         return self._obj.nmemPar()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "PDFErrInfo<{}, {}%>".format(self.qparts, self.confLevel)
 *         return s
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_1__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_10PDFErrInfo___repr__(((struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo___repr__(struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "python/lhapdf.pyx":490
 * 
 *     def __repr__(self):
 *         s = "PDFErrInfo<{}, {}%>".format(self.qparts, self.confLevel)             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_PDFErrInfo, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_qparts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_confLevel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":491
 *     def __repr__(self):
 *         s = "PDFErrInfo<{}, {}%>".format(self.qparts, self.confLevel)
 *         return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":489
 *         return self._obj.nmemPar()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "PDFErrInfo<{}, {}%>".format(self.qparts, self.confLevel)
 *         return s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("python.lhapdf.PDFErrInfo.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_10PDFErrInfo_2__reduce_cython__, "PDFErrInfo.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_10PDFErrInfo_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_10PDFErrInfo_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_10PDFErrInfo_2__reduce_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_10PDFErrInfo_2__reduce_cython__(((struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__obj_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDFErrInfo.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_10PDFErrInfo_4__setstate_cython__, "PDFErrInfo.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_10PDFErrInfo_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_10PDFErrInfo_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_10PDFErrInfo_4__setstate_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_10PDFErrInfo_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDFErrInfo.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_10PDFErrInfo_4__setstate_cython__(((struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_10PDFErrInfo_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__obj_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDFErrInfo.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":501
 *     """
 *     cdef c.PDFSet* _ptr
 *     cdef set_ptr(self, c.PDFSet* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

static PyObject *__pyx_f_6python_6lhapdf_6PDFSet_set_ptr(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, LHAPDF::PDFSet *__pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ptr", 1);

  /* "python/lhapdf.pyx":502
 *     cdef c.PDFSet* _ptr
 *     cdef set_ptr(self, c.PDFSet* ptr):
 *         self._ptr = ptr             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_ptr = __pyx_v_ptr;

  /* "python/lhapdf.pyx":501
 *     """
 *     cdef c.PDFSet* _ptr
 *     cdef set_ptr(self, c.PDFSet* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":504
 *         self._ptr = ptr
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static void __pyx_pw_6python_6lhapdf_6PDFSet_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6python_6lhapdf_6PDFSet_1__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_6python_6lhapdf_6PDFSet___dealloc__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6python_6lhapdf_6PDFSet___dealloc__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {

  /* function exit code */
}

/* "python/lhapdf.pyx":507
 *         pass
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         "The total number of members in this set."
 *         return self._ptr.size()
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6python_6lhapdf_6PDFSet_3__len__(PyObject *__pyx_v_self); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_2__len__, "The total number of members in this set.");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6python_6lhapdf_6PDFSet_2__len__;
#endif
static Py_ssize_t __pyx_pw_6python_6lhapdf_6PDFSet_3__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_2__len__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6python_6lhapdf_6PDFSet_2__len__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "python/lhapdf.pyx":509
 *     def __len__(self):
 *         "The total number of members in this set."
 *         return self._ptr.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->size();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 509, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":507
 *         pass
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         "The total number of members in this set."
 *         return self._ptr.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDFSet.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "python/lhapdf.pyx":511
 *         return self._ptr.size()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def size(self):
 *         "The total number of members in this set."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_4size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_4size___get__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_4size___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":514
 *     def size(self):
 *         "The total number of members in this set."
 *         return self._ptr.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->size();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 514, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":511
 *         return self._ptr.size()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def size(self):
 *         "The total number of members in this set."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":516
 *         return self._ptr.size()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errSize(self):
 *         "The number of error members in this set."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_7errSize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_7errSize_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_7errSize___get__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_7errSize___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":519
 *     def errSize(self):
 *         "The number of error members in this set."
 *         return self._ptr.errSize()             # <<<<<<<<<<<<<<
 *     @property
 *     def errorSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->errSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 519, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":516
 *         return self._ptr.size()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errSize(self):
 *         "The number of error members in this set."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.errSize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":520
 *         "The number of error members in this set."
 *         return self._ptr.errSize()
 *     @property             # <<<<<<<<<<<<<<
 *     def errorSize(self):
 *         "The number of error members in this set."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_9errorSize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_9errorSize_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_9errorSize___get__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_9errorSize___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":523
 *     def errorSize(self):
 *         "The number of error members in this set."
 *         return self._ptr.errSize()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->errSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 523, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":520
 *         "The number of error members in this set."
 *         return self._ptr.errSize()
 *     @property             # <<<<<<<<<<<<<<
 *     def errorSize(self):
 *         "The number of error members in this set."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.errorSize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":525
 *         return self._ptr.errSize()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self):
 *         "Name of this PDF's containing set."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_4name_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_4name___get__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_4name___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":528
 *     def name(self):
 *         "Name of this PDF's containing set."
 *         return self._ptr.name()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->name();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 528, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":525
 *         return self._ptr.errSize()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self):
 *         "Name of this PDF's containing set."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":530
 *         return self._ptr.name()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def description(self):
 *         "Description of this PDF's set."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_11description_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_11description_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_11description___get__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_11description___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":533
 *     def description(self):
 *         "Description of this PDF's set."
 *         return self._ptr.description()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_v_self->_ptr->description()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":530
 *         return self._ptr.name()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def description(self):
 *         "Description of this PDF's set."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.description.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":535
 *         return self._ptr.description()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def lhapdfID(self):
 *         "First LHAPDF global index in this PDF set."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_8lhapdfID_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_8lhapdfID_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_8lhapdfID___get__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_8lhapdfID___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":538
 *     def lhapdfID(self):
 *         "First LHAPDF global index in this PDF set."
 *         return self._ptr.lhapdfID()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->lhapdfID();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 538, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":535
 *         return self._ptr.description()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def lhapdfID(self):
 *         "First LHAPDF global index in this PDF set."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.lhapdfID.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":540
 *         return self._ptr.lhapdfID()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def dataversion(self):
 *         "Version of this PDF set's data files."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_11dataversion_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_11dataversion_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_11dataversion___get__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_11dataversion___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":543
 *     def dataversion(self):
 *         "Version of this PDF set's data files."
 *         return self._ptr.dataversion()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->dataversion();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 543, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":540
 *         return self._ptr.lhapdfID()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def dataversion(self):
 *         "Version of this PDF set's data files."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.dataversion.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":545
 *         return self._ptr.dataversion()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errorType(self):
 *         "Type of error treatment in this PDF set."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_9errorType_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_9errorType_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_9errorType___get__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_9errorType___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":548
 *     def errorType(self):
 *         "Type of error treatment in this PDF set."
 *         return self._ptr.errorType()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->errorType();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 548, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":545
 *         return self._ptr.dataversion()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errorType(self):
 *         "Type of error treatment in this PDF set."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.errorType.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":550
 *         return self._ptr.errorType()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errorInfo(self):
 *         "Type of error treatment in this PDF set."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_9errorInfo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_9errorInfo_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_9errorInfo___get__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_9errorInfo___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  struct LHAPDF::PDFErrInfo __pyx_v_ei;
  struct __pyx_obj_6python_6lhapdf_PDFErrInfo *__pyx_v_pei = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct LHAPDF::PDFErrInfo __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":553
 *     def errorInfo(self):
 *         "Type of error treatment in this PDF set."
 *         cdef c.PDFErrInfo ei = self._ptr.errorInfo()             # <<<<<<<<<<<<<<
 *         pei = PDFErrInfo()
 *         pei._obj = ei
 */
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->errorInfo();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 553, __pyx_L1_error)
  }
  __pyx_v_ei = __pyx_t_1;

  /* "python/lhapdf.pyx":554
 *         "Type of error treatment in this PDF set."
 *         cdef c.PDFErrInfo ei = self._ptr.errorInfo()
 *         pei = PDFErrInfo()             # <<<<<<<<<<<<<<
 *         pei._obj = ei
 *         return pei
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6python_6lhapdf_PDFErrInfo)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_pei = ((struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "python/lhapdf.pyx":555
 *         cdef c.PDFErrInfo ei = self._ptr.errorInfo()
 *         pei = PDFErrInfo()
 *         pei._obj = ei             # <<<<<<<<<<<<<<
 *         return pei
 * 
 */
  __pyx_v_pei->_obj = __pyx_v_ei;

  /* "python/lhapdf.pyx":556
 *         pei = PDFErrInfo()
 *         pei._obj = ei
 *         return pei             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_pei);
  __pyx_r = ((PyObject *)__pyx_v_pei);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":550
 *         return self._ptr.errorType()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errorInfo(self):
 *         "Type of error treatment in this PDF set."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.errorInfo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pei);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":558
 *         return pei
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errorConfLevel(self):
 *         "Confidence level of error treatment in percent, if one is defined for this set."
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_14errorConfLevel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_14errorConfLevel_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_14errorConfLevel___get__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_14errorConfLevel___get__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":561
 *     def errorConfLevel(self):
 *         "Confidence level of error treatment in percent, if one is defined for this set."
 *         return self._ptr.errorConfLevel()             # <<<<<<<<<<<<<<
 * 
 *     def mkPDF(self, mem):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->errorConfLevel();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 561, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":558
 *         return pei
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def errorConfLevel(self):
 *         "Confidence level of error treatment in percent, if one is defined for this set."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.errorConfLevel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":563
 *         return self._ptr.errorConfLevel()
 * 
 *     def mkPDF(self, mem):             # <<<<<<<<<<<<<<
 *         cdef c.PDF* ptr = self._ptr.mkPDF(mem)
 *         cdef PDF obj
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_5mkPDF(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_4mkPDF, "PDFSet.mkPDF(self, mem)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_5mkPDF = {"mkPDF", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_5mkPDF, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_4mkPDF};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_5mkPDF(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_mem = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkPDF (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mem,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mem)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "mkPDF") < 0)) __PYX_ERR(0, 563, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_mem = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mkPDF", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 563, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDFSet.mkPDF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_4mkPDF(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v_mem);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_4mkPDF(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_mem) {
  LHAPDF::PDF *__pyx_v_ptr;
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkPDF", 1);

  /* "python/lhapdf.pyx":564
 * 
 *     def mkPDF(self, mem):
 *         cdef c.PDF* ptr = self._ptr.mkPDF(mem)             # <<<<<<<<<<<<<<
 *         cdef PDF obj
 *         obj = PDF.__new__(PDF)
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_mem); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L1_error)
  __pyx_v_ptr = __pyx_v_self->_ptr->mkPDF(__pyx_t_1);

  /* "python/lhapdf.pyx":566
 *         cdef c.PDF* ptr = self._ptr.mkPDF(mem)
 *         cdef PDF obj
 *         obj = PDF.__new__(PDF)             # <<<<<<<<<<<<<<
 *         obj.set_ptr(ptr)
 *         return obj
 */
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_PDF(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_PDF), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_2);
  __pyx_v_obj = ((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "python/lhapdf.pyx":567
 *         cdef PDF obj
 *         obj = PDF.__new__(PDF)
 *         obj.set_ptr(ptr)             # <<<<<<<<<<<<<<
 *         return obj
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6python_6lhapdf_PDF *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_v_ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "python/lhapdf.pyx":568
 *         obj = PDF.__new__(PDF)
 *         obj.set_ptr(ptr)
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     def mkPDFs(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_obj);
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":563
 *         return self._ptr.errorConfLevel()
 * 
 *     def mkPDF(self, mem):             # <<<<<<<<<<<<<<
 *         cdef c.PDF* ptr = self._ptr.mkPDF(mem)
 *         cdef PDF obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.mkPDF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":570
 *         return obj
 * 
 *     def mkPDFs(self):             # <<<<<<<<<<<<<<
 *         cdef vector[c.PDF*] ptrs = self._ptr.mkPDFs()
 *         cdef PDF obj
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_7mkPDFs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_6mkPDFs, "PDFSet.mkPDFs(self)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_7mkPDFs = {"mkPDFs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_7mkPDFs, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_6mkPDFs};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_7mkPDFs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkPDFs (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("mkPDFs", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "mkPDFs", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_6mkPDFs(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_6mkPDFs(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  std::vector<LHAPDF::PDF *>  __pyx_v_ptrs;
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_obj = 0;
  PyObject *__pyx_v_objs = NULL;
  LHAPDF::PDF *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<LHAPDF::PDF *> ::iterator __pyx_t_2;
  LHAPDF::PDF *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkPDFs", 1);

  /* "python/lhapdf.pyx":571
 * 
 *     def mkPDFs(self):
 *         cdef vector[c.PDF*] ptrs = self._ptr.mkPDFs()             # <<<<<<<<<<<<<<
 *         cdef PDF obj
 *         objs = []
 */
  __pyx_v_ptrs = __pyx_v_self->_ptr->mkPDFs();

  /* "python/lhapdf.pyx":573
 *         cdef vector[c.PDF*] ptrs = self._ptr.mkPDFs()
 *         cdef PDF obj
 *         objs = []             # <<<<<<<<<<<<<<
 *         for ptr in ptrs:
 *             obj = PDF.__new__(PDF)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_objs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":574
 *         cdef PDF obj
 *         objs = []
 *         for ptr in ptrs:             # <<<<<<<<<<<<<<
 *             obj = PDF.__new__(PDF)
 *             obj.set_ptr(ptr)
 */
  __pyx_t_2 = __pyx_v_ptrs.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_ptrs.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_ptr = __pyx_t_3;

    /* "python/lhapdf.pyx":575
 *         objs = []
 *         for ptr in ptrs:
 *             obj = PDF.__new__(PDF)             # <<<<<<<<<<<<<<
 *             obj.set_ptr(ptr)
 *             objs.append(obj)
 */
    __pyx_t_1 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_PDF(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_PDF), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_obj, ((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "python/lhapdf.pyx":576
 *         for ptr in ptrs:
 *             obj = PDF.__new__(PDF)
 *             obj.set_ptr(ptr)             # <<<<<<<<<<<<<<
 *             objs.append(obj)
 *         return objs
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_PDF *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_v_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "python/lhapdf.pyx":577
 *             obj = PDF.__new__(PDF)
 *             obj.set_ptr(ptr)
 *             objs.append(obj)             # <<<<<<<<<<<<<<
 *         return objs
 * 
 */
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_objs, ((PyObject *)__pyx_v_obj)); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 577, __pyx_L1_error)

    /* "python/lhapdf.pyx":574
 *         cdef PDF obj
 *         objs = []
 *         for ptr in ptrs:             # <<<<<<<<<<<<<<
 *             obj = PDF.__new__(PDF)
 *             obj.set_ptr(ptr)
 */
  }

  /* "python/lhapdf.pyx":578
 *             obj.set_ptr(ptr)
 *             objs.append(obj)
 *         return objs             # <<<<<<<<<<<<<<
 * 
 *     # def metadata(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_objs);
  __pyx_r = __pyx_v_objs;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":570
 *         return obj
 * 
 *     def mkPDFs(self):             # <<<<<<<<<<<<<<
 *         cdef vector[c.PDF*] ptrs = self._ptr.mkPDFs()
 *         cdef PDF obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.mkPDFs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_objs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":584
 *     #     return self._ptr.metadata()
 * 
 *     def keys(self):             # <<<<<<<<<<<<<<
 *         "Return the total list of info keys"
 *         return self._ptr.keys()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_9keys(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_8keys, "PDFSet.keys(self)\nReturn the total list of info keys");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_9keys = {"keys", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_9keys, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_8keys};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_9keys(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("keys (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("keys", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "keys", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_8keys(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_8keys(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("keys", 1);

  /* "python/lhapdf.pyx":586
 *     def keys(self):
 *         "Return the total list of info keys"
 *         return self._ptr.keys()             # <<<<<<<<<<<<<<
 * 
 *     def keys_local(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->_ptr->keys()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":584
 *     #     return self._ptr.metadata()
 * 
 *     def keys(self):             # <<<<<<<<<<<<<<
 *         "Return the total list of info keys"
 *         return self._ptr.keys()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":588
 *         return self._ptr.keys()
 * 
 *     def keys_local(self):             # <<<<<<<<<<<<<<
 *         "Return the list of info keys defined at local level (config/set/member)"
 *         return self._ptr.keys_local()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_11keys_local(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_10keys_local, "PDFSet.keys_local(self)\nReturn the list of info keys defined at local level (config/set/member)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_11keys_local = {"keys_local", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_11keys_local, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_10keys_local};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_11keys_local(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("keys_local (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("keys_local", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "keys_local", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_10keys_local(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_10keys_local(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("keys_local", 1);

  /* "python/lhapdf.pyx":590
 *     def keys_local(self):
 *         "Return the list of info keys defined at local level (config/set/member)"
 *         return self._ptr.keys_local()             # <<<<<<<<<<<<<<
 * 
 *     def has_key(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->_ptr->keys_local()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":588
 *         return self._ptr.keys()
 * 
 *     def keys_local(self):             # <<<<<<<<<<<<<<
 *         "Return the list of info keys defined at local level (config/set/member)"
 *         return self._ptr.keys_local()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.keys_local", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":592
 *         return self._ptr.keys_local()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_13has_key(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_12has_key, "PDFSet.has_key(self, key)\nReturn whether or not metadata for this key exists");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_13has_key = {"has_key", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_13has_key, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_12has_key};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_13has_key(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "has_key") < 0)) __PYX_ERR(0, 592, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_key", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 592, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDFSet.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_12has_key(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v_key);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_12has_key(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_key", 1);

  /* "python/lhapdf.pyx":594
 *     def has_key(self, key):
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(key)             # <<<<<<<<<<<<<<
 * 
 *     def has_key_local(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 594, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->has_key(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":592
 *         return self._ptr.keys_local()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":596
 *         return self._ptr.has_key(key)
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_15has_key_local(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_14has_key_local, "PDFSet.has_key_local(self, key)\nReturns whether or not metadata for this key exists at a local level (config/set/member)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_15has_key_local = {"has_key_local", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_15has_key_local, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_14has_key_local};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_15has_key_local(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key_local (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "has_key_local") < 0)) __PYX_ERR(0, 596, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_key_local", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 596, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDFSet.has_key_local", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_14has_key_local(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v_key);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_14has_key_local(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_key_local", 1);

  /* "python/lhapdf.pyx":598
 *     def has_key_local(self, key):
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(key)             # <<<<<<<<<<<<<<
 * 
 *     # def get_entry(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->has_key_local(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":596
 *         return self._ptr.has_key(key)
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.has_key_local", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":604
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(key, str(fallback))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_17get_entry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_16get_entry, "PDFSet.get_entry(self, key, fallback=None)\nReturns metadata entry for this key if it exists, otherwise returns a fallback value");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_17get_entry = {"get_entry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_17get_entry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_16get_entry};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_17get_entry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_fallback = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_entry (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_fallback,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 604, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fallback);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 604, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_entry") < 0)) __PYX_ERR(0, 604, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_fallback = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_entry", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 604, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDFSet.get_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_16get_entry(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v_key, __pyx_v_fallback);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_16get_entry(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fallback) {
  std::string __pyx_v_rtn;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  std::string __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_entry", 1);

  /* "python/lhapdf.pyx":606
 *     def get_entry(self, key, fallback=None):
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(key, str(fallback))             # <<<<<<<<<<<<<<
 *         return rtn if str(rtn) != str(fallback) else fallback
 * 
 */
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Str(__pyx_v_fallback); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  try {
    __pyx_t_4 = __pyx_v_self->_ptr->get_entry(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1), __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 606, __pyx_L1_error)
  }
  __pyx_v_rtn = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

  /* "python/lhapdf.pyx":607
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(key, str(fallback))
 *         return rtn if str(rtn) != str(fallback) else fallback             # <<<<<<<<<<<<<<
 * 
 *     def _print(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_v_rtn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Str(__pyx_v_fallback); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_8) {
    __pyx_t_7 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_v_rtn); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __pyx_t_7;
    __pyx_t_7 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_fallback);
    __pyx_t_2 = __pyx_v_fallback;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":604
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(key, str(fallback))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.get_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":609
 *         return rtn if str(rtn) != str(fallback) else fallback
 * 
 *     def _print(self):             # <<<<<<<<<<<<<<
 *         "Print a short summary to stdout"
 *         self._ptr._print()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_19_print(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_18_print, "PDFSet._print(self)\nPrint a short summary to stdout");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_19_print = {"_print", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_19_print, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_18_print};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_19_print(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_print (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_print", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_print", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_18_print(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_18_print(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_print", 1);

  /* "python/lhapdf.pyx":611
 *     def _print(self):
 *         "Print a short summary to stdout"
 *         self._ptr._print()             # <<<<<<<<<<<<<<
 * 
 *     def uncertainty(self, vals, cl=68.268949, alternative=False):
 */
  try {
    __pyx_v_self->_ptr->print();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 611, __pyx_L1_error)
  }

  /* "python/lhapdf.pyx":609
 *         return rtn if str(rtn) != str(fallback) else fallback
 * 
 *     def _print(self):             # <<<<<<<<<<<<<<
 *         "Print a short summary to stdout"
 *         self._ptr._print()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDFSet._print", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":613
 *         self._ptr._print()
 * 
 *     def uncertainty(self, vals, cl=68.268949, alternative=False):             # <<<<<<<<<<<<<<
 *         """\
 *         Return a PDFUncertainty object corresponding to central value and errors computed
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_21uncertainty(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_20uncertainty, "PDFSet.uncertainty(self, vals, cl=68.268949, alternative=False)\n        Return a PDFUncertainty object corresponding to central value and errors computed\n        from the vals list. If unspecified (as a percentage), the confidence level cl defaults\n        to 1-sigma.\n\n        For replicas, by default (alternative=False) the central value is given by\n        the mean and the uncertainty by the standard deviation (possibly rescaled to cl), but\n        setting alternative=True will instead construct a confidence interval from the\n        probability distribution of replicas, with the central value given by the median.\n\n        A breakdown of uncertainties into quadrature components is available from the\n        PDFUncertainty object, grouped as per the qParts from errorInfo() -> PDFErrInfo.\n        ");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_21uncertainty = {"uncertainty", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_21uncertainty, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_20uncertainty};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_21uncertainty(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_vals = 0;
  PyObject *__pyx_v_cl = 0;
  PyObject *__pyx_v_alternative = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uncertainty (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vals,&__pyx_n_s_cl,&__pyx_n_s_alternative,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_float_68_268949));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_vals)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cl);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_alternative);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "uncertainty") < 0)) __PYX_ERR(0, 613, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vals = values[0];
    __pyx_v_cl = values[1];
    __pyx_v_alternative = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("uncertainty", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 613, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDFSet.uncertainty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_20uncertainty(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v_vals, __pyx_v_cl, __pyx_v_alternative);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_20uncertainty(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_vals, PyObject *__pyx_v_cl, PyObject *__pyx_v_alternative) {
  struct LHAPDF::PDFUncertainty __pyx_v_unc;
  struct __pyx_obj_6python_6lhapdf_PDFUncertainty *__pyx_v_punc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  double __pyx_t_2;
  bool __pyx_t_3;
  struct LHAPDF::PDFUncertainty __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("uncertainty", 1);

  /* "python/lhapdf.pyx":627
 *         PDFUncertainty object, grouped as per the qParts from errorInfo() -> PDFErrInfo.
 *         """
 *         cdef c.PDFUncertainty unc = self._ptr.uncertainty(vals, cl, alternative)             # <<<<<<<<<<<<<<
 *         punc = PDFUncertainty()
 *         punc._obj = unc
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_vals); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_cl); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_alternative); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_self->_ptr->uncertainty(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 627, __pyx_L1_error)
  }
  __pyx_v_unc = __pyx_t_4;

  /* "python/lhapdf.pyx":628
 *         """
 *         cdef c.PDFUncertainty unc = self._ptr.uncertainty(vals, cl, alternative)
 *         punc = PDFUncertainty()             # <<<<<<<<<<<<<<
 *         punc._obj = unc
 *         return punc
 */
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6python_6lhapdf_PDFUncertainty)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_punc = ((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "python/lhapdf.pyx":629
 *         cdef c.PDFUncertainty unc = self._ptr.uncertainty(vals, cl, alternative)
 *         punc = PDFUncertainty()
 *         punc._obj = unc             # <<<<<<<<<<<<<<
 *         return punc
 * 
 */
  __pyx_v_punc->_obj = __pyx_v_unc;

  /* "python/lhapdf.pyx":630
 *         punc = PDFUncertainty()
 *         punc._obj = unc
 *         return punc             # <<<<<<<<<<<<<<
 * 
 *     def correlation(self, valsA, valsB):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_punc);
  __pyx_r = ((PyObject *)__pyx_v_punc);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":613
 *         self._ptr._print()
 * 
 *     def uncertainty(self, vals, cl=68.268949, alternative=False):             # <<<<<<<<<<<<<<
 *         """\
 *         Return a PDFUncertainty object corresponding to central value and errors computed
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.uncertainty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_punc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":632
 *         return punc
 * 
 *     def correlation(self, valsA, valsB):             # <<<<<<<<<<<<<<
 *         """Return the PDF correlation between valsA and valsB using appropriate formulae for this set."""
 *         return self._ptr.correlation(valsA, valsB)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_23correlation(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_22correlation, "PDFSet.correlation(self, valsA, valsB)\nReturn the PDF correlation between valsA and valsB using appropriate formulae for this set.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_23correlation = {"correlation", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_23correlation, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_22correlation};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_23correlation(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_valsA = 0;
  PyObject *__pyx_v_valsB = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("correlation (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_valsA,&__pyx_n_s_valsB,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_valsA)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_valsB)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("correlation", 1, 2, 2, 1); __PYX_ERR(0, 632, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "correlation") < 0)) __PYX_ERR(0, 632, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_valsA = values[0];
    __pyx_v_valsB = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("correlation", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 632, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDFSet.correlation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_22correlation(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v_valsA, __pyx_v_valsB);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_22correlation(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_valsA, PyObject *__pyx_v_valsB) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  std::vector<double>  __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("correlation", 1);

  /* "python/lhapdf.pyx":634
 *     def correlation(self, valsA, valsB):
 *         """Return the PDF correlation between valsA and valsB using appropriate formulae for this set."""
 *         return self._ptr.correlation(valsA, valsB)             # <<<<<<<<<<<<<<
 * 
 *     def randomValueFromHessian(self, vals, randoms, symmetrise=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_valsA); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_double(__pyx_v_valsB); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->_ptr->correlation(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 634, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":632
 *         return punc
 * 
 *     def correlation(self, valsA, valsB):             # <<<<<<<<<<<<<<
 *         """Return the PDF correlation between valsA and valsB using appropriate formulae for this set."""
 *         return self._ptr.correlation(valsA, valsB)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.correlation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":636
 *         return self._ptr.correlation(valsA, valsB)
 * 
 *     def randomValueFromHessian(self, vals, randoms, symmetrise=True):             # <<<<<<<<<<<<<<
 *         """Return a random value from Hessian vals and Gaussian random numbers."""
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_25randomValueFromHessian(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_24randomValueFromHessian, "PDFSet.randomValueFromHessian(self, vals, randoms, symmetrise=True)\nReturn a random value from Hessian vals and Gaussian random numbers.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_25randomValueFromHessian = {"randomValueFromHessian", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_25randomValueFromHessian, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_24randomValueFromHessian};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_25randomValueFromHessian(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_vals = 0;
  PyObject *__pyx_v_randoms = 0;
  PyObject *__pyx_v_symmetrise = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("randomValueFromHessian (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vals,&__pyx_n_s_randoms,&__pyx_n_s_symmetrise,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_vals)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_randoms)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("randomValueFromHessian", 0, 2, 3, 1); __PYX_ERR(0, 636, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_symmetrise);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "randomValueFromHessian") < 0)) __PYX_ERR(0, 636, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vals = values[0];
    __pyx_v_randoms = values[1];
    __pyx_v_symmetrise = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("randomValueFromHessian", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 636, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDFSet.randomValueFromHessian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_24randomValueFromHessian(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v_vals, __pyx_v_randoms, __pyx_v_symmetrise);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_24randomValueFromHessian(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_vals, PyObject *__pyx_v_randoms, PyObject *__pyx_v_symmetrise) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  std::vector<double>  __pyx_t_2;
  bool __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("randomValueFromHessian", 1);

  /* "python/lhapdf.pyx":638
 *     def randomValueFromHessian(self, vals, randoms, symmetrise=True):
 *         """Return a random value from Hessian vals and Gaussian random numbers."""
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)             # <<<<<<<<<<<<<<
 * 
 *     def _checkPdfType(self, pdftypes):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_vals); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 638, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_double(__pyx_v_randoms); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 638, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_symmetrise); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 638, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_self->_ptr->randomValueFromHessian(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 638, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":636
 *         return self._ptr.correlation(valsA, valsB)
 * 
 *     def randomValueFromHessian(self, vals, randoms, symmetrise=True):             # <<<<<<<<<<<<<<
 *         """Return a random value from Hessian vals and Gaussian random numbers."""
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.randomValueFromHessian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":640
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)
 * 
 *     def _checkPdfType(self, pdftypes):             # <<<<<<<<<<<<<<
 *         """Check that the PdfType of each member matches the ErrorType of the set."""
 *         self._ptr._checkPdfType(pdftypes)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_27_checkPdfType(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_26_checkPdfType, "PDFSet._checkPdfType(self, pdftypes)\nCheck that the PdfType of each member matches the ErrorType of the set.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_27_checkPdfType = {"_checkPdfType", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_27_checkPdfType, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_26_checkPdfType};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_27_checkPdfType(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_pdftypes = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_checkPdfType (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pdftypes,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pdftypes)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_checkPdfType") < 0)) __PYX_ERR(0, 640, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_pdftypes = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_checkPdfType", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 640, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDFSet._checkPdfType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_26_checkPdfType(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v_pdftypes);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_26_checkPdfType(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_pdftypes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_checkPdfType", 1);

  /* "python/lhapdf.pyx":642
 *     def _checkPdfType(self, pdftypes):
 *         """Check that the PdfType of each member matches the ErrorType of the set."""
 *         self._ptr._checkPdfType(pdftypes)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_pdftypes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 642, __pyx_L1_error)
  try {
    __pyx_v_self->_ptr->_checkPdfType(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 642, __pyx_L1_error)
  }

  /* "python/lhapdf.pyx":640
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)
 * 
 *     def _checkPdfType(self, pdftypes):             # <<<<<<<<<<<<<<
 *         """Check that the PdfType of each member matches the ErrorType of the set."""
 *         self._ptr._checkPdfType(pdftypes)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDFSet._checkPdfType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":644
 *         self._ptr._checkPdfType(pdftypes)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "PDFSet<{}, {:d} {} vars: {:d} keys, {:d} local>".format(self.name, self.errSize, self.errorType,
 *                                                                      len(self.keys()), len(self.keys_local()))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_29__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_29__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_28__repr__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_28__repr__(struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "python/lhapdf.pyx":645
 * 
 *     def __repr__(self):
 *         s = "PDFSet<{}, {:d} {} vars: {:d} keys, {:d} local>".format(self.name, self.errSize, self.errorType,             # <<<<<<<<<<<<<<
 *                                                                      len(self.keys()), len(self.keys_local()))
 *         return s
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_PDFSet_d_vars_d_keys_d_local, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errSize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_errorType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "python/lhapdf.pyx":646
 *     def __repr__(self):
 *         s = "PDFSet<{}, {:d} {} vars: {:d} keys, {:d} local>".format(self.name, self.errSize, self.errorType,
 *                                                                      len(self.keys()), len(self.keys_local()))             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_keys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_9 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_10 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_keys_local); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = NULL;
  __pyx_t_9 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_9 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_t_10 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_9 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[6] = {__pyx_t_8, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 5+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":647
 *         s = "PDFSet<{}, {:d} {} vars: {:d} keys, {:d} local>".format(self.name, self.errSize, self.errorType,
 *                                                                      len(self.keys()), len(self.keys_local()))
 *         return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":644
 *         self._ptr._checkPdfType(pdftypes)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "PDFSet<{}, {:d} {} vars: {:d} keys, {:d} local>".format(self.name, self.errSize, self.errorType,
 *                                                                      len(self.keys()), len(self.keys_local()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("python.lhapdf.PDFSet.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_31__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_30__reduce_cython__, "PDFSet.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_31__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_31__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_30__reduce_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_31__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_30__reduce_cython__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_30__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__ptr_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDFSet.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_33__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6PDFSet_32__setstate_cython__, "PDFSet.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6PDFSet_33__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_33__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_32__setstate_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_6PDFSet_33__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDFSet.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6PDFSet_32__setstate_cython__(((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6PDFSet_32__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__ptr_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDFSet.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":657
 *     cdef object _parent
 * 
 *     cdef set_parent(self, parent):             # <<<<<<<<<<<<<<
 *         # Keep a reference to the parent PDF object to prevent Python from removing it.
 *         self._parent = parent
 */

static PyObject *__pyx_f_6python_6lhapdf_7PDFInfo_set_parent(struct __pyx_obj_6python_6lhapdf_PDFInfo *__pyx_v_self, PyObject *__pyx_v_parent) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_parent", 1);

  /* "python/lhapdf.pyx":659
 *     cdef set_parent(self, parent):
 *         # Keep a reference to the parent PDF object to prevent Python from removing it.
 *         self._parent = parent             # <<<<<<<<<<<<<<
 * 
 *     # cdef c.PDFInfo* _ptr
 */
  __Pyx_INCREF(__pyx_v_parent);
  __Pyx_GIVEREF(__pyx_v_parent);
  __Pyx_GOTREF(__pyx_v_self->_parent);
  __Pyx_DECREF(__pyx_v_self->_parent);
  __pyx_v_self->_parent = __pyx_v_parent;

  /* "python/lhapdf.pyx":657
 *     cdef object _parent
 * 
 *     cdef set_parent(self, parent):             # <<<<<<<<<<<<<<
 *         # Keep a reference to the parent PDF object to prevent Python from removing it.
 *         self._parent = parent
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":686
 *     #     return rtn if str(rtn) != str(fallback) else fallback
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "PDFInfo<{}: {:d} keys, {:d} local>".format(self._parent.name(),
 *                                                         len(self.keys()), len(self.keys_local()))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_7PDFInfo_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_7PDFInfo_1__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_7PDFInfo___repr__(((struct __pyx_obj_6python_6lhapdf_PDFInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_7PDFInfo___repr__(struct __pyx_obj_6python_6lhapdf_PDFInfo *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "python/lhapdf.pyx":687
 * 
 *     def __repr__(self):
 *         s = "PDFInfo<{}: {:d} keys, {:d} local>".format(self._parent.name(),             # <<<<<<<<<<<<<<
 *                                                         len(self.keys()), len(self.keys_local()))
 *         return s
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_PDFInfo_d_keys_d_local, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_parent, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "python/lhapdf.pyx":688
 *     def __repr__(self):
 *         s = "PDFInfo<{}: {:d} keys, {:d} local>".format(self._parent.name(),
 *                                                         len(self.keys()), len(self.keys_local()))             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_keys); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_8 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_keys_local); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_8 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 3+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":689
 *         s = "PDFInfo<{}: {:d} keys, {:d} local>".format(self._parent.name(),
 *                                                         len(self.keys()), len(self.keys_local()))
 *         return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":686
 *     #     return rtn if str(rtn) != str(fallback) else fallback
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "PDFInfo<{}: {:d} keys, {:d} local>".format(self._parent.name(),
 *                                                         len(self.keys()), len(self.keys_local()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("python.lhapdf.PDFInfo.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_7PDFInfo_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_7PDFInfo_2__reduce_cython__, "PDFInfo.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_7PDFInfo_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_7PDFInfo_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_7PDFInfo_2__reduce_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_7PDFInfo_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_7PDFInfo_2__reduce_cython__(((struct __pyx_obj_6python_6lhapdf_PDFInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_7PDFInfo_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__ptr_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDFInfo.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_7PDFInfo_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_7PDFInfo_4__setstate_cython__, "PDFInfo.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_7PDFInfo_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_7PDFInfo_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_7PDFInfo_4__setstate_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_7PDFInfo_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.PDFInfo.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_7PDFInfo_4__setstate_cython__(((struct __pyx_obj_6python_6lhapdf_PDFInfo *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_7PDFInfo_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_PDFInfo *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__ptr_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.PDFInfo.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":699
 *     cdef object _parent
 * 
 *     cdef set_ptr(self, c.AlphaS* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

static PyObject *__pyx_f_6python_6lhapdf_6AlphaS_set_ptr(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, LHAPDF::AlphaS *__pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ptr", 1);

  /* "python/lhapdf.pyx":700
 * 
 *     cdef set_ptr(self, c.AlphaS* ptr):
 *         self._ptr = ptr             # <<<<<<<<<<<<<<
 * 
 *     cdef set_parent(self, parent):
 */
  __pyx_v_self->_ptr = __pyx_v_ptr;

  /* "python/lhapdf.pyx":699
 *     cdef object _parent
 * 
 *     cdef set_ptr(self, c.AlphaS* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":702
 *         self._ptr = ptr
 * 
 *     cdef set_parent(self, parent):             # <<<<<<<<<<<<<<
 *         # Keep a reference to the parent PDF object to prevent python from removing it.
 *         self._parent = parent
 */

static PyObject *__pyx_f_6python_6lhapdf_6AlphaS_set_parent(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, PyObject *__pyx_v_parent) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_parent", 1);

  /* "python/lhapdf.pyx":704
 *     cdef set_parent(self, parent):
 *         # Keep a reference to the parent PDF object to prevent python from removing it.
 *         self._parent = parent             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_parent);
  __Pyx_GIVEREF(__pyx_v_parent);
  __Pyx_GOTREF(__pyx_v_self->_parent);
  __Pyx_DECREF(__pyx_v_self->_parent);
  __pyx_v_self->_parent = __pyx_v_parent;

  /* "python/lhapdf.pyx":702
 *         self._ptr = ptr
 * 
 *     cdef set_parent(self, parent):             # <<<<<<<<<<<<<<
 *         # Keep a reference to the parent PDF object to prevent python from removing it.
 *         self._parent = parent
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":706
 *         self._parent = parent
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def type(self):
 *         "Get the method of alpha_s calculation as a string"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_4type_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_4type___get__(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_4type___get__(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "python/lhapdf.pyx":709
 *     def type(self):
 *         "Get the method of alpha_s calculation as a string"
 *         return self._ptr.type()             # <<<<<<<<<<<<<<
 * 
 *     def alphasQ(self, double q):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->type();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 709, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":706
 *         self._parent = parent
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def type(self):
 *         "Get the method of alpha_s calculation as a string"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.AlphaS.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":711
 *         return self._ptr.type()
 * 
 *     def alphasQ(self, double q):             # <<<<<<<<<<<<<<
 *         "Get alpha_s value at scale q"
 *         return self._ptr.alphasQ(q)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_1alphasQ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_alphasQ, "AlphaS.alphasQ(self, double q)\nGet alpha_s value at scale q");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_1alphasQ = {"alphasQ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_1alphasQ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_alphasQ};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_1alphasQ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_q;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alphasQ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 711, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "alphasQ") < 0)) __PYX_ERR(0, 711, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_q = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 711, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("alphasQ", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 711, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.alphasQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_alphasQ(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_q);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_alphasQ(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alphasQ", 1);

  /* "python/lhapdf.pyx":713
 *     def alphasQ(self, double q):
 *         "Get alpha_s value at scale q"
 *         return self._ptr.alphasQ(q)             # <<<<<<<<<<<<<<
 * 
 *     def alphasQ2(self, double q2):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->alphasQ(__pyx_v_q);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 713, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":711
 *         return self._ptr.type()
 * 
 *     def alphasQ(self, double q):             # <<<<<<<<<<<<<<
 *         "Get alpha_s value at scale q"
 *         return self._ptr.alphasQ(q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.AlphaS.alphasQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":715
 *         return self._ptr.alphasQ(q)
 * 
 *     def alphasQ2(self, double q2):             # <<<<<<<<<<<<<<
 *         "Get alpha_s value at scale q"
 *         return self._ptr.alphasQ2(q2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_3alphasQ2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_2alphasQ2, "AlphaS.alphasQ2(self, double q2)\nGet alpha_s value at scale q");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_3alphasQ2 = {"alphasQ2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_3alphasQ2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_2alphasQ2};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_3alphasQ2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_q2;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alphasQ2 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q2,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "alphasQ2") < 0)) __PYX_ERR(0, 715, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_q2 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_q2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("alphasQ2", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 715, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.alphasQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_2alphasQ2(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_q2);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_2alphasQ2(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alphasQ2", 1);

  /* "python/lhapdf.pyx":717
 *     def alphasQ2(self, double q2):
 *         "Get alpha_s value at scale q"
 *         return self._ptr.alphasQ2(q2)             # <<<<<<<<<<<<<<
 * 
 *     def numFlavorsQ(self, double q):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->alphasQ2(__pyx_v_q2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 717, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":715
 *         return self._ptr.alphasQ(q)
 * 
 *     def alphasQ2(self, double q2):             # <<<<<<<<<<<<<<
 *         "Get alpha_s value at scale q"
 *         return self._ptr.alphasQ2(q2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.AlphaS.alphasQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":719
 *         return self._ptr.alphasQ2(q2)
 * 
 *     def numFlavorsQ(self, double q):             # <<<<<<<<<<<<<<
 *         "Get number of active flavors at scale q"
 *         return self._ptr.numFlavorsQ(q)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_5numFlavorsQ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_4numFlavorsQ, "AlphaS.numFlavorsQ(self, double q)\nGet number of active flavors at scale q");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_5numFlavorsQ = {"numFlavorsQ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_5numFlavorsQ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_4numFlavorsQ};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_5numFlavorsQ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_q;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("numFlavorsQ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 719, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "numFlavorsQ") < 0)) __PYX_ERR(0, 719, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_q = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 719, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("numFlavorsQ", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 719, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.numFlavorsQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_4numFlavorsQ(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_q);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_4numFlavorsQ(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("numFlavorsQ", 1);

  /* "python/lhapdf.pyx":721
 *     def numFlavorsQ(self, double q):
 *         "Get number of active flavors at scale q"
 *         return self._ptr.numFlavorsQ(q)             # <<<<<<<<<<<<<<
 * 
 *     def numFlavorsQ2(self, double q2):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->numFlavorsQ(__pyx_v_q);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 721, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":719
 *         return self._ptr.alphasQ2(q2)
 * 
 *     def numFlavorsQ(self, double q):             # <<<<<<<<<<<<<<
 *         "Get number of active flavors at scale q"
 *         return self._ptr.numFlavorsQ(q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.AlphaS.numFlavorsQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":723
 *         return self._ptr.numFlavorsQ(q)
 * 
 *     def numFlavorsQ2(self, double q2):             # <<<<<<<<<<<<<<
 *         "Get number of active flavors at scale q"
 *         return self._ptr.numFlavorsQ2(q2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_7numFlavorsQ2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_6numFlavorsQ2, "AlphaS.numFlavorsQ2(self, double q2)\nGet number of active flavors at scale q");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_7numFlavorsQ2 = {"numFlavorsQ2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_7numFlavorsQ2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_6numFlavorsQ2};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_7numFlavorsQ2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_q2;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("numFlavorsQ2 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q2,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "numFlavorsQ2") < 0)) __PYX_ERR(0, 723, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_q2 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_q2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("numFlavorsQ2", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 723, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.numFlavorsQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_6numFlavorsQ2(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_q2);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_6numFlavorsQ2(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("numFlavorsQ2", 1);

  /* "python/lhapdf.pyx":725
 *     def numFlavorsQ2(self, double q2):
 *         "Get number of active flavors at scale q"
 *         return self._ptr.numFlavorsQ2(q2)             # <<<<<<<<<<<<<<
 * 
 *     def quarkMass(self, int id):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->numFlavorsQ2(__pyx_v_q2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 725, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":723
 *         return self._ptr.numFlavorsQ(q)
 * 
 *     def numFlavorsQ2(self, double q2):             # <<<<<<<<<<<<<<
 *         "Get number of active flavors at scale q"
 *         return self._ptr.numFlavorsQ2(q2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.AlphaS.numFlavorsQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":727
 *         return self._ptr.numFlavorsQ2(q2)
 * 
 *     def quarkMass(self, int id):             # <<<<<<<<<<<<<<
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_9quarkMass(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_8quarkMass, "AlphaS.quarkMass(self, int id)\nGet mass of quark with PID code id");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_9quarkMass = {"quarkMass", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_9quarkMass, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_8quarkMass};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_9quarkMass(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_id;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quarkMass (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "quarkMass") < 0)) __PYX_ERR(0, 727, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("quarkMass", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 727, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.quarkMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_8quarkMass(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_id);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_8quarkMass(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quarkMass", 1);

  /* "python/lhapdf.pyx":729
 *     def quarkMass(self, int id):
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)             # <<<<<<<<<<<<<<
 * 
 *     def setQuarkMass(self, int id, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->quarkMass(__pyx_v_id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 729, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":727
 *         return self._ptr.numFlavorsQ2(q2)
 * 
 *     def quarkMass(self, int id):             # <<<<<<<<<<<<<<
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.AlphaS.quarkMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":731
 *         return self._ptr.quarkMass(id)
 * 
 *     def setQuarkMass(self, int id, double value):             # <<<<<<<<<<<<<<
 *         "Set mass of quark with PID code id"
 *         self._ptr.setQuarkMass(id, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_11setQuarkMass(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_10setQuarkMass, "AlphaS.setQuarkMass(self, int id, double value)\nSet mass of quark with PID code id");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_11setQuarkMass = {"setQuarkMass", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_11setQuarkMass, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_10setQuarkMass};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_11setQuarkMass(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_id;
  double __pyx_v_value;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setQuarkMass (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 731, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 731, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("setQuarkMass", 1, 2, 2, 1); __PYX_ERR(0, 731, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setQuarkMass") < 0)) __PYX_ERR(0, 731, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 731, __pyx_L3_error)
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 731, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setQuarkMass", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 731, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setQuarkMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_10setQuarkMass(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_id, __pyx_v_value);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_10setQuarkMass(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id, double __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setQuarkMass", 1);

  /* "python/lhapdf.pyx":733
 *     def setQuarkMass(self, int id, double value):
 *         "Set mass of quark with PID code id"
 *         self._ptr.setQuarkMass(id, value)             # <<<<<<<<<<<<<<
 * 
 *     def quarkThreshold(self, int id):
 */
  try {
    __pyx_v_self->_ptr->setQuarkMass(__pyx_v_id, __pyx_v_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 733, __pyx_L1_error)
  }

  /* "python/lhapdf.pyx":731
 *         return self._ptr.quarkMass(id)
 * 
 *     def setQuarkMass(self, int id, double value):             # <<<<<<<<<<<<<<
 *         "Set mass of quark with PID code id"
 *         self._ptr.setQuarkMass(id, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setQuarkMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":735
 *         self._ptr.setQuarkMass(id, value)
 * 
 *     def quarkThreshold(self, int id):             # <<<<<<<<<<<<<<
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_13quarkThreshold(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_12quarkThreshold, "AlphaS.quarkThreshold(self, int id)\nGet activation threshold of quark with PID code id");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_13quarkThreshold = {"quarkThreshold", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_13quarkThreshold, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_12quarkThreshold};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_13quarkThreshold(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_id;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quarkThreshold (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 735, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "quarkThreshold") < 0)) __PYX_ERR(0, 735, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 735, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("quarkThreshold", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 735, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.quarkThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_12quarkThreshold(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_id);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_12quarkThreshold(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quarkThreshold", 1);

  /* "python/lhapdf.pyx":737
 *     def quarkThreshold(self, int id):
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)             # <<<<<<<<<<<<<<
 * 
 *     def setQuarkThreshold(self, int id, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->quarkThreshold(__pyx_v_id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 737, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":735
 *         self._ptr.setQuarkMass(id, value)
 * 
 *     def quarkThreshold(self, int id):             # <<<<<<<<<<<<<<
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.AlphaS.quarkThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":739
 *         return self._ptr.quarkThreshold(id)
 * 
 *     def setQuarkThreshold(self, int id, double value):             # <<<<<<<<<<<<<<
 *         "Set activation threshold of quark with PID code id"
 *         self._ptr.setQuarkThreshold(id, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_15setQuarkThreshold(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_14setQuarkThreshold, "AlphaS.setQuarkThreshold(self, int id, double value)\nSet activation threshold of quark with PID code id");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_15setQuarkThreshold = {"setQuarkThreshold", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_15setQuarkThreshold, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_14setQuarkThreshold};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_15setQuarkThreshold(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_id;
  double __pyx_v_value;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setQuarkThreshold (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 739, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 739, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("setQuarkThreshold", 1, 2, 2, 1); __PYX_ERR(0, 739, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setQuarkThreshold") < 0)) __PYX_ERR(0, 739, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 739, __pyx_L3_error)
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 739, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setQuarkThreshold", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 739, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setQuarkThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_14setQuarkThreshold(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_id, __pyx_v_value);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_14setQuarkThreshold(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id, double __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setQuarkThreshold", 1);

  /* "python/lhapdf.pyx":741
 *     def setQuarkThreshold(self, int id, double value):
 *         "Set activation threshold of quark with PID code id"
 *         self._ptr.setQuarkThreshold(id, value)             # <<<<<<<<<<<<<<
 * 
 *     def orderQCD(self):
 */
  try {
    __pyx_v_self->_ptr->setQuarkThreshold(__pyx_v_id, __pyx_v_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 741, __pyx_L1_error)
  }

  /* "python/lhapdf.pyx":739
 *         return self._ptr.quarkThreshold(id)
 * 
 *     def setQuarkThreshold(self, int id, double value):             # <<<<<<<<<<<<<<
 *         "Set activation threshold of quark with PID code id"
 *         self._ptr.setQuarkThreshold(id, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setQuarkThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":743
 *         self._ptr.setQuarkThreshold(id, value)
 * 
 *     def orderQCD(self):             # <<<<<<<<<<<<<<
 *         "Get the QCD running order (max num loops) for this alphaS"
 *         return self._ptr.orderQCD()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_17orderQCD(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_16orderQCD, "AlphaS.orderQCD(self)\nGet the QCD running order (max num loops) for this alphaS");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_17orderQCD = {"orderQCD", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_17orderQCD, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_16orderQCD};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_17orderQCD(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("orderQCD (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("orderQCD", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "orderQCD", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_16orderQCD(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_16orderQCD(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("orderQCD", 1);

  /* "python/lhapdf.pyx":745
 *     def orderQCD(self):
 *         "Get the QCD running order (max num loops) for this alphaS"
 *         return self._ptr.orderQCD()             # <<<<<<<<<<<<<<
 * 
 *     def setOrderQCD(self, int order):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->orderQCD();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 745, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":743
 *         self._ptr.setQuarkThreshold(id, value)
 * 
 *     def orderQCD(self):             # <<<<<<<<<<<<<<
 *         "Get the QCD running order (max num loops) for this alphaS"
 *         return self._ptr.orderQCD()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.AlphaS.orderQCD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":747
 *         return self._ptr.orderQCD()
 * 
 *     def setOrderQCD(self, int order):             # <<<<<<<<<<<<<<
 *         "Set the QCD running order (max num loops) for this alphaS"
 *         self._ptr.setOrderQCD(order)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_19setOrderQCD(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_18setOrderQCD, "AlphaS.setOrderQCD(self, int order)\nSet the QCD running order (max num loops) for this alphaS");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_19setOrderQCD = {"setOrderQCD", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_19setOrderQCD, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_18setOrderQCD};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_19setOrderQCD(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_order;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setOrderQCD (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 747, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setOrderQCD") < 0)) __PYX_ERR(0, 747, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_order = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_order == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 747, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setOrderQCD", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 747, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setOrderQCD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_18setOrderQCD(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_order);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_18setOrderQCD(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_order) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setOrderQCD", 1);

  /* "python/lhapdf.pyx":749
 *     def setOrderQCD(self, int order):
 *         "Set the QCD running order (max num loops) for this alphaS"
 *         self._ptr.setOrderQCD(order)             # <<<<<<<<<<<<<<
 * 
 *     def setMZ(self, double mz):
 */
  try {
    __pyx_v_self->_ptr->setOrderQCD(__pyx_v_order);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 749, __pyx_L1_error)
  }

  /* "python/lhapdf.pyx":747
 *         return self._ptr.orderQCD()
 * 
 *     def setOrderQCD(self, int order):             # <<<<<<<<<<<<<<
 *         "Set the QCD running order (max num loops) for this alphaS"
 *         self._ptr.setOrderQCD(order)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setOrderQCD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":751
 *         self._ptr.setOrderQCD(order)
 * 
 *     def setMZ(self, double mz):             # <<<<<<<<<<<<<<
 *         "Set the Z mass (used in ODE solver)"
 *         self._ptr.setMZ(mz)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_21setMZ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_20setMZ, "AlphaS.setMZ(self, double mz)\nSet the Z mass (used in ODE solver)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_21setMZ = {"setMZ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_21setMZ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_20setMZ};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_21setMZ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_mz;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMZ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mz,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mz)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 751, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setMZ") < 0)) __PYX_ERR(0, 751, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_mz = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_mz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 751, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMZ", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 751, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_20setMZ(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_mz);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_20setMZ(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_mz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMZ", 1);

  /* "python/lhapdf.pyx":753
 *     def setMZ(self, double mz):
 *         "Set the Z mass (used in ODE solver)"
 *         self._ptr.setMZ(mz)             # <<<<<<<<<<<<<<
 * 
 *     def setAlphaSMZ(self, double alphas):
 */
  try {
    __pyx_v_self->_ptr->setMZ(__pyx_v_mz);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 753, __pyx_L1_error)
  }

  /* "python/lhapdf.pyx":751
 *         self._ptr.setOrderQCD(order)
 * 
 *     def setMZ(self, double mz):             # <<<<<<<<<<<<<<
 *         "Set the Z mass (used in ODE solver)"
 *         self._ptr.setMZ(mz)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":755
 *         self._ptr.setMZ(mz)
 * 
 *     def setAlphaSMZ(self, double alphas):             # <<<<<<<<<<<<<<
 *         "Set alpha_s at the Z mass (used in ODE solver)"
 *         self._ptr.setAlphaSMZ(alphas)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_23setAlphaSMZ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_22setAlphaSMZ, "AlphaS.setAlphaSMZ(self, double alphas)\nSet alpha_s at the Z mass (used in ODE solver)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_23setAlphaSMZ = {"setAlphaSMZ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_23setAlphaSMZ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_22setAlphaSMZ};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_23setAlphaSMZ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_alphas;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAlphaSMZ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_alphas,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_alphas)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 755, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setAlphaSMZ") < 0)) __PYX_ERR(0, 755, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_alphas = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_alphas == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 755, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAlphaSMZ", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 755, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setAlphaSMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_22setAlphaSMZ(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_alphas);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_22setAlphaSMZ(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_alphas) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAlphaSMZ", 1);

  /* "python/lhapdf.pyx":757
 *     def setAlphaSMZ(self, double alphas):
 *         "Set alpha_s at the Z mass (used in ODE solver)"
 *         self._ptr.setAlphaSMZ(alphas)             # <<<<<<<<<<<<<<
 * 
 *     def setLambda(self, int id, double val):
 */
  try {
    __pyx_v_self->_ptr->setAlphaSMZ(__pyx_v_alphas);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 757, __pyx_L1_error)
  }

  /* "python/lhapdf.pyx":755
 *         self._ptr.setMZ(mz)
 * 
 *     def setAlphaSMZ(self, double alphas):             # <<<<<<<<<<<<<<
 *         "Set alpha_s at the Z mass (used in ODE solver)"
 *         self._ptr.setAlphaSMZ(alphas)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setAlphaSMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":759
 *         self._ptr.setAlphaSMZ(alphas)
 * 
 *     def setLambda(self, int id, double val):             # <<<<<<<<<<<<<<
 *         "Set the id'th LambdaQCD value (used in analytic solver)"
 *         self._ptr.setLambda(id, val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_25setLambda(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_24setLambda, "AlphaS.setLambda(self, int id, double val)\nSet the id'th LambdaQCD value (used in analytic solver)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_25setLambda = {"setLambda", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_25setLambda, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_24setLambda};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_25setLambda(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_id;
  double __pyx_v_val;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setLambda (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_val,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 759, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_val)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 759, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("setLambda", 1, 2, 2, 1); __PYX_ERR(0, 759, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setLambda") < 0)) __PYX_ERR(0, 759, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 759, __pyx_L3_error)
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 759, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setLambda", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 759, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setLambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_24setLambda(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_id, __pyx_v_val);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_24setLambda(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id, double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setLambda", 1);

  /* "python/lhapdf.pyx":761
 *     def setLambda(self, int id, double val):
 *         "Set the id'th LambdaQCD value (used in analytic solver)"
 *         self._ptr.setLambda(id, val)             # <<<<<<<<<<<<<<
 * 
 *     def setFlavorScheme(self, scheme, int nf):
 */
  try {
    __pyx_v_self->_ptr->setLambda(__pyx_v_id, __pyx_v_val);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 761, __pyx_L1_error)
  }

  /* "python/lhapdf.pyx":759
 *         self._ptr.setAlphaSMZ(alphas)
 * 
 *     def setLambda(self, int id, double val):             # <<<<<<<<<<<<<<
 *         "Set the id'th LambdaQCD value (used in analytic solver)"
 *         self._ptr.setLambda(id, val)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setLambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":763
 *         self._ptr.setLambda(id, val)
 * 
 *     def setFlavorScheme(self, scheme, int nf):             # <<<<<<<<<<<<<<
 *         """\
 *         Set the flavor scheme. nf is the fixed number (if FIXED)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_27setFlavorScheme(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_26setFlavorScheme, "AlphaS.setFlavorScheme(self, scheme, int nf)\n        Set the flavor scheme. nf is the fixed number (if FIXED)\n        or the max number (if VARIABLE)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_27setFlavorScheme = {"setFlavorScheme", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_27setFlavorScheme, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_26setFlavorScheme};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_27setFlavorScheme(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_scheme = 0;
  int __pyx_v_nf;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFlavorScheme (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_scheme,&__pyx_n_s_nf,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_scheme)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_nf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("setFlavorScheme", 1, 2, 2, 1); __PYX_ERR(0, 763, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setFlavorScheme") < 0)) __PYX_ERR(0, 763, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_scheme = values[0];
    __pyx_v_nf = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_nf == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setFlavorScheme", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 763, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setFlavorScheme", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_26setFlavorScheme(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_scheme, __pyx_v_nf);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_26setFlavorScheme(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, PyObject *__pyx_v_scheme, int __pyx_v_nf) {
  LHAPDF::AlphaS::FlavorScheme __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  LHAPDF::AlphaS::FlavorScheme __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setFlavorScheme", 1);

  /* "python/lhapdf.pyx":773
 *         #   s = FIXED
 *         cdef cFlavorScheme s
 *         if type(scheme) is FlavorScheme:             # <<<<<<<<<<<<<<
 *             s = int(scheme.real)
 *         elif type(scheme) is int:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FlavorScheme); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_scheme)) == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "python/lhapdf.pyx":774
 *         cdef cFlavorScheme s
 *         if type(scheme) is FlavorScheme:
 *             s = int(scheme.real)             # <<<<<<<<<<<<<<
 *         elif type(scheme) is int:
 *             return self.setFlavorScheme(FlavorScheme(scheme), nf)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_scheme, __pyx_n_s_real); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = ((LHAPDF::AlphaS::FlavorScheme)__Pyx_PyInt_As_LHAPDF_3a__3a_AlphaS_3a__3a_FlavorScheme(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_s = __pyx_t_4;

    /* "python/lhapdf.pyx":773
 *         #   s = FIXED
 *         cdef cFlavorScheme s
 *         if type(scheme) is FlavorScheme:             # <<<<<<<<<<<<<<
 *             s = int(scheme.real)
 *         elif type(scheme) is int:
 */
    goto __pyx_L3;
  }

  /* "python/lhapdf.pyx":775
 *         if type(scheme) is FlavorScheme:
 *             s = int(scheme.real)
 *         elif type(scheme) is int:             # <<<<<<<<<<<<<<
 *             return self.setFlavorScheme(FlavorScheme(scheme), nf)
 *         elif scheme == "VARIABLE":
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_scheme)) == ((PyObject *)(&PyInt_Type)));
  if (__pyx_t_2) {

    /* "python/lhapdf.pyx":776
 *             s = int(scheme.real)
 *         elif type(scheme) is int:
 *             return self.setFlavorScheme(FlavorScheme(scheme), nf)             # <<<<<<<<<<<<<<
 *         elif scheme == "VARIABLE":
 *             return self.setFlavorScheme(VARIABLE, nf)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setFlavorScheme); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_FlavorScheme); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_scheme};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_nf); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "python/lhapdf.pyx":775
 *         if type(scheme) is FlavorScheme:
 *             s = int(scheme.real)
 *         elif type(scheme) is int:             # <<<<<<<<<<<<<<
 *             return self.setFlavorScheme(FlavorScheme(scheme), nf)
 *         elif scheme == "VARIABLE":
 */
  }

  /* "python/lhapdf.pyx":777
 *         elif type(scheme) is int:
 *             return self.setFlavorScheme(FlavorScheme(scheme), nf)
 *         elif scheme == "VARIABLE":             # <<<<<<<<<<<<<<
 *             return self.setFlavorScheme(VARIABLE, nf)
 *         elif scheme == "FIXED":
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_scheme, __pyx_n_s_VARIABLE, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 777, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "python/lhapdf.pyx":778
 *             return self.setFlavorScheme(FlavorScheme(scheme), nf)
 *         elif scheme == "VARIABLE":
 *             return self.setFlavorScheme(VARIABLE, nf)             # <<<<<<<<<<<<<<
 *         elif scheme == "FIXED":
 *             return self.setFlavorScheme(FIXED, nf)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setFlavorScheme); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_Enum_6python_6lhapdf_enum__dunderpyx_t_6python_6lhapdf_FlavorScheme_to_py(__pyx_e_6python_6lhapdf_VARIABLE); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_nf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "python/lhapdf.pyx":777
 *         elif type(scheme) is int:
 *             return self.setFlavorScheme(FlavorScheme(scheme), nf)
 *         elif scheme == "VARIABLE":             # <<<<<<<<<<<<<<
 *             return self.setFlavorScheme(VARIABLE, nf)
 *         elif scheme == "FIXED":
 */
  }

  /* "python/lhapdf.pyx":779
 *         elif scheme == "VARIABLE":
 *             return self.setFlavorScheme(VARIABLE, nf)
 *         elif scheme == "FIXED":             # <<<<<<<<<<<<<<
 *             return self.setFlavorScheme(FIXED, nf)
 *         else:
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_scheme, __pyx_n_s_FIXED, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 779, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "python/lhapdf.pyx":780
 *             return self.setFlavorScheme(VARIABLE, nf)
 *         elif scheme == "FIXED":
 *             return self.setFlavorScheme(FIXED, nf)             # <<<<<<<<<<<<<<
 *         else:
 *             print("You can only set the flavor scheme to FIXED or VARIABLE")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setFlavorScheme); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_Enum_6python_6lhapdf_enum__dunderpyx_t_6python_6lhapdf_FlavorScheme_to_py(__pyx_e_6python_6lhapdf_FIXED); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_nf); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "python/lhapdf.pyx":779
 *         elif scheme == "VARIABLE":
 *             return self.setFlavorScheme(VARIABLE, nf)
 *         elif scheme == "FIXED":             # <<<<<<<<<<<<<<
 *             return self.setFlavorScheme(FIXED, nf)
 *         else:
 */
  }

  /* "python/lhapdf.pyx":782
 *             return self.setFlavorScheme(FIXED, nf)
 *         else:
 *             print("You can only set the flavor scheme to FIXED or VARIABLE")             # <<<<<<<<<<<<<<
 *             return
 *         self._ptr.setFlavorScheme(s, nf)
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "python/lhapdf.pyx":783
 *         else:
 *             print("You can only set the flavor scheme to FIXED or VARIABLE")
 *             return             # <<<<<<<<<<<<<<
 *         self._ptr.setFlavorScheme(s, nf)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "python/lhapdf.pyx":784
 *             print("You can only set the flavor scheme to FIXED or VARIABLE")
 *             return
 *         self._ptr.setFlavorScheme(s, nf)             # <<<<<<<<<<<<<<
 * 
 *     def flavorScheme(self, as_str=True):
 */
  try {
    __pyx_v_self->_ptr->setFlavorScheme(__pyx_v_s, __pyx_v_nf);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 784, __pyx_L1_error)
  }

  /* "python/lhapdf.pyx":763
 *         self._ptr.setLambda(id, val)
 * 
 *     def setFlavorScheme(self, scheme, int nf):             # <<<<<<<<<<<<<<
 *         """\
 *         Set the flavor scheme. nf is the fixed number (if FIXED)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("python.lhapdf.AlphaS.setFlavorScheme", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":786
 *         self._ptr.setFlavorScheme(s, nf)
 * 
 *     def flavorScheme(self, as_str=True):             # <<<<<<<<<<<<<<
 *          s = FlavorScheme(int(self._ptr.flavorScheme()))
 *          return s if not as_str else s.name
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_29flavorScheme(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_28flavorScheme, "AlphaS.flavorScheme(self, as_str=True)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_29flavorScheme = {"flavorScheme", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_29flavorScheme, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_28flavorScheme};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_29flavorScheme(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_as_str = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flavorScheme (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_as_str,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_as_str);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "flavorScheme") < 0)) __PYX_ERR(0, 786, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_as_str = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flavorScheme", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 786, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.flavorScheme", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_28flavorScheme(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_as_str);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_28flavorScheme(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, PyObject *__pyx_v_as_str) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  LHAPDF::AlphaS::FlavorScheme __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flavorScheme", 1);

  /* "python/lhapdf.pyx":787
 * 
 *     def flavorScheme(self, as_str=True):
 *          s = FlavorScheme(int(self._ptr.flavorScheme()))             # <<<<<<<<<<<<<<
 *          return s if not as_str else s.name
 *          # cdef FlavorScheme s = self._ptr.flavorScheme()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FlavorScheme); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = __pyx_v_self->_ptr->flavorScheme();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 787, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_LHAPDF_3a__3a_AlphaS_3a__3a_FlavorScheme(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":788
 *     def flavorScheme(self, as_str=True):
 *          s = FlavorScheme(int(self._ptr.flavorScheme()))
 *          return s if not as_str else s.name             # <<<<<<<<<<<<<<
 *          # cdef FlavorScheme s = self._ptr.flavorScheme()
 *          # if int(s) == 0:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_as_str); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 788, __pyx_L1_error)
  __pyx_t_8 = (!__pyx_t_7);
  if (__pyx_t_8) {
    __Pyx_INCREF(__pyx_v_s);
    __pyx_t_1 = __pyx_v_s;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":786
 *         self._ptr.setFlavorScheme(s, nf)
 * 
 *     def flavorScheme(self, as_str=True):             # <<<<<<<<<<<<<<
 *          s = FlavorScheme(int(self._ptr.flavorScheme()))
 *          return s if not as_str else s.name
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("python.lhapdf.AlphaS.flavorScheme", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":795
 *          #   print("VARIABLE")
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "AlphaS<{:d} loop, {}, aS(MZ) = {:.3f}>".format(self.orderQCD(), self.flavorScheme(), self.alphaS(91.2))
 *         return s
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_31__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_31__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_30__repr__(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_30__repr__(struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "python/lhapdf.pyx":796
 * 
 *     def __repr__(self):
 *         s = "AlphaS<{:d} loop, {}, aS(MZ) = {:.3f}>".format(self.orderQCD(), self.flavorScheme(), self.alphaS(91.2))             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_AlphaS_d_loop_aS_MZ_3f, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_orderQCD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flavorScheme); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_alphaS); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_float_91_2};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 3+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":797
 *     def __repr__(self):
 *         s = "AlphaS<{:d} loop, {}, aS(MZ) = {:.3f}>".format(self.orderQCD(), self.flavorScheme(), self.alphaS(91.2))
 *         return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":795
 *          #   print("VARIABLE")
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "AlphaS<{:d} loop, {}, aS(MZ) = {:.3f}>".format(self.orderQCD(), self.flavorScheme(), self.alphaS(91.2))
 *         return s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("python.lhapdf.AlphaS.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_33__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_32__reduce_cython__, "AlphaS.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_33__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_33__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_32__reduce_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_33__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_32__reduce_cython__(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__ptr_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.AlphaS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_35__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6AlphaS_34__setstate_cython__, "AlphaS.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6python_6lhapdf_6AlphaS_35__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_35__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_34__setstate_cython__};
static PyObject *__pyx_pw_6python_6lhapdf_6AlphaS_35__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.AlphaS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_6AlphaS_34__setstate_cython__(((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6AlphaS_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__ptr_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.AlphaS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":800
 * 
 * 
 * def getConfig():             # <<<<<<<<<<<<<<
 *     """Factory function to get the global config object."""
 *     cdef c.Info* ptr = &c.getConfig()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_1getConfig(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_getConfig, "getConfig()\nFactory function to get the global config object.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_1getConfig = {"getConfig", (PyCFunction)__pyx_pw_6python_6lhapdf_1getConfig, METH_NOARGS, __pyx_doc_6python_6lhapdf_getConfig};
static PyObject *__pyx_pw_6python_6lhapdf_1getConfig(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getConfig (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_getConfig(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_getConfig(CYTHON_UNUSED PyObject *__pyx_self) {
  LHAPDF::Info *__pyx_v_ptr;
  struct __pyx_obj_6python_6lhapdf_Info *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<LHAPDF::Info> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getConfig", 1);

  /* "python/lhapdf.pyx":802
 * def getConfig():
 *     """Factory function to get the global config object."""
 *     cdef c.Info* ptr = &c.getConfig()             # <<<<<<<<<<<<<<
 *     cdef Info obj = Info.__new__(Info)
 *     obj.set_ptr(ptr)
 */
  try {
    __pyx_t_1 = LHAPDF::getConfig();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 802, __pyx_L1_error)
  }
  __pyx_v_ptr = (&__pyx_t_1);

  /* "python/lhapdf.pyx":803
 *     """Factory function to get the global config object."""
 *     cdef c.Info* ptr = &c.getConfig()
 *     cdef Info obj = Info.__new__(Info)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(ptr)
 *     return obj
 */
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_Info(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_Info), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_2);
  __pyx_v_obj = ((struct __pyx_obj_6python_6lhapdf_Info *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "python/lhapdf.pyx":804
 *     cdef c.Info* ptr = &c.getConfig()
 *     cdef Info obj = Info.__new__(Info)
 *     obj.set_ptr(ptr)             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6python_6lhapdf_Info *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_v_ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "python/lhapdf.pyx":805
 *     cdef Info obj = Info.__new__(Info)
 *     obj.set_ptr(ptr)
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * def getPDFSet(setname):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_obj);
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":800
 * 
 * 
 * def getConfig():             # <<<<<<<<<<<<<<
 *     """Factory function to get the global config object."""
 *     cdef c.Info* ptr = &c.getConfig()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.getConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":807
 *     return obj
 * 
 * def getPDFSet(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to get the specified PDF set."""
 *     cdef PDFSet obj = PDFSet.__new__(PDFSet)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_3getPDFSet(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_2getPDFSet, "getPDFSet(setname)\nFactory function to get the specified PDF set.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_3getPDFSet = {"getPDFSet", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3getPDFSet, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_2getPDFSet};
static PyObject *__pyx_pw_6python_6lhapdf_3getPDFSet(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_setname = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPDFSet (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_setname,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_setname)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 807, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getPDFSet") < 0)) __PYX_ERR(0, 807, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_setname = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPDFSet", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 807, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.getPDFSet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_2getPDFSet(__pyx_self, __pyx_v_setname);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_2getPDFSet(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_setname) {
  struct __pyx_obj_6python_6lhapdf_PDFSet *__pyx_v_obj = 0;
  LHAPDF::PDFSet *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  __Pyx_FakeReference<LHAPDF::PDFSet> __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPDFSet", 1);

  /* "python/lhapdf.pyx":809
 * def getPDFSet(setname):
 *     """Factory function to get the specified PDF set."""
 *     cdef PDFSet obj = PDFSet.__new__(PDFSet)             # <<<<<<<<<<<<<<
 *     cdef c.PDFSet* ptr = &c.getPDFSet(setname)
 *     obj.set_ptr(ptr)
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_PDFSet(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_PDFSet), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_obj = ((struct __pyx_obj_6python_6lhapdf_PDFSet *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":810
 *     """Factory function to get the specified PDF set."""
 *     cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *     cdef c.PDFSet* ptr = &c.getPDFSet(setname)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(ptr)
 *     return obj
 */
  __pyx_t_2 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_setname); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 810, __pyx_L1_error)
  try {
    __pyx_t_3 = LHAPDF::getPDFSet(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 810, __pyx_L1_error)
  }
  __pyx_v_ptr = (&__pyx_t_3);

  /* "python/lhapdf.pyx":811
 *     cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *     cdef c.PDFSet* ptr = &c.getPDFSet(setname)
 *     obj.set_ptr(ptr)             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_PDFSet *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_v_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":812
 *     cdef c.PDFSet* ptr = &c.getPDFSet(setname)
 *     obj.set_ptr(ptr)
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * def mkPDFs(setname):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_obj);
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":807
 *     return obj
 * 
 * def getPDFSet(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to get the specified PDF set."""
 *     cdef PDFSet obj = PDFSet.__new__(PDFSet)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.getPDFSet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":814
 *     return obj
 * 
 * def mkPDFs(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to make all the PDF objects in the specified set."""
 *     cdef vector[c.PDF*] ptrs = c.mkPDFs(setname)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_5mkPDFs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_4mkPDFs, "mkPDFs(setname)\nFactory function to make all the PDF objects in the specified set.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_5mkPDFs = {"mkPDFs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_5mkPDFs, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4mkPDFs};
static PyObject *__pyx_pw_6python_6lhapdf_5mkPDFs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_setname = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkPDFs (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_setname,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_setname)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 814, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "mkPDFs") < 0)) __PYX_ERR(0, 814, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_setname = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mkPDFs", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 814, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.mkPDFs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_4mkPDFs(__pyx_self, __pyx_v_setname);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_4mkPDFs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_setname) {
  std::vector<LHAPDF::PDF *>  __pyx_v_ptrs;
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_obj = 0;
  PyObject *__pyx_v_objs = NULL;
  LHAPDF::PDF *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::vector<LHAPDF::PDF *>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<LHAPDF::PDF *> ::iterator __pyx_t_4;
  LHAPDF::PDF *__pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkPDFs", 1);

  /* "python/lhapdf.pyx":816
 * def mkPDFs(setname):
 *     """Factory function to make all the PDF objects in the specified set."""
 *     cdef vector[c.PDF*] ptrs = c.mkPDFs(setname)             # <<<<<<<<<<<<<<
 *     cdef PDF obj
 *     objs = []
 */
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_setname); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 816, __pyx_L1_error)
  try {
    __pyx_t_2 = LHAPDF::mkPDFs(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 816, __pyx_L1_error)
  }
  __pyx_v_ptrs = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "python/lhapdf.pyx":818
 *     cdef vector[c.PDF*] ptrs = c.mkPDFs(setname)
 *     cdef PDF obj
 *     objs = []             # <<<<<<<<<<<<<<
 *     for ptr in ptrs:
 *         obj = PDF.__new__(PDF)
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_objs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "python/lhapdf.pyx":819
 *     cdef PDF obj
 *     objs = []
 *     for ptr in ptrs:             # <<<<<<<<<<<<<<
 *         obj = PDF.__new__(PDF)
 *         obj.set_ptr(ptr)
 */
  __pyx_t_4 = __pyx_v_ptrs.begin();
  for (;;) {
    if (!(__pyx_t_4 != __pyx_v_ptrs.end())) break;
    __pyx_t_5 = *__pyx_t_4;
    ++__pyx_t_4;
    __pyx_v_ptr = __pyx_t_5;

    /* "python/lhapdf.pyx":820
 *     objs = []
 *     for ptr in ptrs:
 *         obj = PDF.__new__(PDF)             # <<<<<<<<<<<<<<
 *         obj.set_ptr(ptr)
 *         objs.append(obj)
 */
    __pyx_t_3 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_PDF(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_PDF), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_obj, ((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "python/lhapdf.pyx":821
 *     for ptr in ptrs:
 *         obj = PDF.__new__(PDF)
 *         obj.set_ptr(ptr)             # <<<<<<<<<<<<<<
 *         objs.append(obj)
 *     return objs
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_6python_6lhapdf_PDF *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_v_ptr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "python/lhapdf.pyx":822
 *         obj = PDF.__new__(PDF)
 *         obj.set_ptr(ptr)
 *         objs.append(obj)             # <<<<<<<<<<<<<<
 *     return objs
 * 
 */
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_objs, ((PyObject *)__pyx_v_obj)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 822, __pyx_L1_error)

    /* "python/lhapdf.pyx":819
 *     cdef PDF obj
 *     objs = []
 *     for ptr in ptrs:             # <<<<<<<<<<<<<<
 *         obj = PDF.__new__(PDF)
 *         obj.set_ptr(ptr)
 */
  }

  /* "python/lhapdf.pyx":823
 *         obj.set_ptr(ptr)
 *         objs.append(obj)
 *     return objs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_objs);
  __pyx_r = __pyx_v_objs;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":814
 *     return obj
 * 
 * def mkPDFs(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to make all the PDF objects in the specified set."""
 *     cdef vector[c.PDF*] ptrs = c.mkPDFs(setname)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python.lhapdf.mkPDFs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_objs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":826
 * 
 * 
 * cdef mkPDF_setmem(string setname, int memid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a PDF object from the set name and member number."
 *     cdef PDF obj = PDF.__new__(PDF)
 */

static PyObject *__pyx_f_6python_6lhapdf_mkPDF_setmem(std::string __pyx_v_setname, int __pyx_v_memid) {
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::PDF *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkPDF_setmem", 1);

  /* "python/lhapdf.pyx":828
 * cdef mkPDF_setmem(string setname, int memid):
 *     "Factory function to make a PDF object from the set name and member number."
 *     cdef PDF obj = PDF.__new__(PDF)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkPDF(setname, memid))
 *     return obj
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_PDF(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_PDF), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_obj = ((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":829
 *     "Factory function to make a PDF object from the set name and member number."
 *     cdef PDF obj = PDF.__new__(PDF)
 *     obj.set_ptr(c.mkPDF(setname, memid))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkPDF(__pyx_v_setname, __pyx_v_memid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 829, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_PDF *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":830
 *     cdef PDF obj = PDF.__new__(PDF)
 *     obj.set_ptr(c.mkPDF(setname, memid))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef mkPDF_lhaid(int lhaid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_obj);
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":826
 * 
 * 
 * cdef mkPDF_setmem(string setname, int memid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a PDF object from the set name and member number."
 *     cdef PDF obj = PDF.__new__(PDF)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.mkPDF_setmem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":832
 *     return obj
 * 
 * cdef mkPDF_lhaid(int lhaid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a PDF object from the LHAPDF ID number."
 *     cdef PDF obj = PDF.__new__(PDF)
 */

static PyObject *__pyx_f_6python_6lhapdf_mkPDF_lhaid(int __pyx_v_lhaid) {
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::PDF *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkPDF_lhaid", 1);

  /* "python/lhapdf.pyx":834
 * cdef mkPDF_lhaid(int lhaid):
 *     "Factory function to make a PDF object from the LHAPDF ID number."
 *     cdef PDF obj = PDF.__new__(PDF)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkPDF(lhaid))
 *     return obj
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_PDF(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_PDF), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_obj = ((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":835
 *     "Factory function to make a PDF object from the LHAPDF ID number."
 *     cdef PDF obj = PDF.__new__(PDF)
 *     obj.set_ptr(c.mkPDF(lhaid))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkPDF(__pyx_v_lhaid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 835, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_PDF *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":836
 *     cdef PDF obj = PDF.__new__(PDF)
 *     obj.set_ptr(c.mkPDF(lhaid))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef mkPDF_setmemstr(string setname_nmem):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_obj);
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":832
 *     return obj
 * 
 * cdef mkPDF_lhaid(int lhaid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a PDF object from the LHAPDF ID number."
 *     cdef PDF obj = PDF.__new__(PDF)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.mkPDF_lhaid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":838
 *     return obj
 * 
 * cdef mkPDF_setmemstr(string setname_nmem):             # <<<<<<<<<<<<<<
 *     "Factory function to make a PDF object from the set name and member number in SETNAME/NMEM string format."
 *     cdef PDF obj = PDF.__new__(PDF)
 */

static PyObject *__pyx_f_6python_6lhapdf_mkPDF_setmemstr(std::string __pyx_v_setname_nmem) {
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::PDF *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkPDF_setmemstr", 1);

  /* "python/lhapdf.pyx":840
 * cdef mkPDF_setmemstr(string setname_nmem):
 *     "Factory function to make a PDF object from the set name and member number in SETNAME/NMEM string format."
 *     cdef PDF obj = PDF.__new__(PDF)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkPDF(setname_nmem))
 *     return obj
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_PDF(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_PDF), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_obj = ((struct __pyx_obj_6python_6lhapdf_PDF *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":841
 *     "Factory function to make a PDF object from the set name and member number in SETNAME/NMEM string format."
 *     cdef PDF obj = PDF.__new__(PDF)
 *     obj.set_ptr(c.mkPDF(setname_nmem))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkPDF(__pyx_v_setname_nmem);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 841, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_PDF *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":842
 *     cdef PDF obj = PDF.__new__(PDF)
 *     obj.set_ptr(c.mkPDF(setname_nmem))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef mkAlphaS_setmem(string setname, int memid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_obj);
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":838
 *     return obj
 * 
 * cdef mkPDF_setmemstr(string setname_nmem):             # <<<<<<<<<<<<<<
 *     "Factory function to make a PDF object from the set name and member number in SETNAME/NMEM string format."
 *     cdef PDF obj = PDF.__new__(PDF)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.mkPDF_setmemstr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":844
 *     return obj
 * 
 * cdef mkAlphaS_setmem(string setname, int memid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a AlphaS object from the set name and member number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

static PyObject *__pyx_f_6python_6lhapdf_mkAlphaS_setmem(std::string __pyx_v_setname, int __pyx_v_memid) {
  struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::AlphaS *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkAlphaS_setmem", 1);

  /* "python/lhapdf.pyx":846
 * cdef mkAlphaS_setmem(string setname, int memid):
 *     "Factory function to make a AlphaS object from the set name and member number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkAlphaS(setname, memid))
 *     return obj
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_AlphaS(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_AlphaS), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_obj = ((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":847
 *     "Factory function to make a AlphaS object from the set name and member number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkAlphaS(setname, memid))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkAlphaS(__pyx_v_setname, __pyx_v_memid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 847, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_AlphaS *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":848
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkAlphaS(setname, memid))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef mkAlphaS_lhaid(int lhaid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_obj);
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":844
 *     return obj
 * 
 * cdef mkAlphaS_setmem(string setname, int memid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a AlphaS object from the set name and member number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.mkAlphaS_setmem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":850
 *     return obj
 * 
 * cdef mkAlphaS_lhaid(int lhaid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a AlphaS object from the LHAPDF ID number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

static PyObject *__pyx_f_6python_6lhapdf_mkAlphaS_lhaid(int __pyx_v_lhaid) {
  struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::AlphaS *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkAlphaS_lhaid", 1);

  /* "python/lhapdf.pyx":852
 * cdef mkAlphaS_lhaid(int lhaid):
 *     "Factory function to make a AlphaS object from the LHAPDF ID number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkAlphaS(lhaid))
 *     return obj
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_AlphaS(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_AlphaS), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_obj = ((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":853
 *     "Factory function to make a AlphaS object from the LHAPDF ID number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkAlphaS(lhaid))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkAlphaS(__pyx_v_lhaid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 853, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_AlphaS *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":854
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkAlphaS(lhaid))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef mkAlphaS_setmemstr(string setname_nmem):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_obj);
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":850
 *     return obj
 * 
 * cdef mkAlphaS_lhaid(int lhaid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a AlphaS object from the LHAPDF ID number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.mkAlphaS_lhaid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":856
 *     return obj
 * 
 * cdef mkAlphaS_setmemstr(string setname_nmem):             # <<<<<<<<<<<<<<
 *     "Factory function to make a AlphaS object from the set name and member number in SETNAME/NMEM string format."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

static PyObject *__pyx_f_6python_6lhapdf_mkAlphaS_setmemstr(std::string __pyx_v_setname_nmem) {
  struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::AlphaS *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkAlphaS_setmemstr", 1);

  /* "python/lhapdf.pyx":858
 * cdef mkAlphaS_setmemstr(string setname_nmem):
 *     "Factory function to make a AlphaS object from the set name and member number in SETNAME/NMEM string format."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkAlphaS(setname_nmem))
 *     return obj
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_AlphaS(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_AlphaS), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_obj = ((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":859
 *     "Factory function to make a AlphaS object from the set name and member number in SETNAME/NMEM string format."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkAlphaS(setname_nmem))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkAlphaS(__pyx_v_setname_nmem);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 859, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_AlphaS *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":860
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkAlphaS(setname_nmem))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef mkBareAlphaS_(string as_type):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_obj);
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":856
 *     return obj
 * 
 * cdef mkAlphaS_setmemstr(string setname_nmem):             # <<<<<<<<<<<<<<
 *     "Factory function to make a AlphaS object from the set name and member number in SETNAME/NMEM string format."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.mkAlphaS_setmemstr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":862
 *     return obj
 * 
 * cdef mkBareAlphaS_(string as_type):             # <<<<<<<<<<<<<<
 *     "Factory function to make an AlphaS object without a PDF reference."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

static PyObject *__pyx_f_6python_6lhapdf_mkBareAlphaS_(std::string __pyx_v_as_type) {
  struct __pyx_obj_6python_6lhapdf_AlphaS *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::AlphaS *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkBareAlphaS_", 1);

  /* "python/lhapdf.pyx":864
 * cdef mkBareAlphaS_(string as_type):
 *     "Factory function to make an AlphaS object without a PDF reference."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkBareAlphaS(as_type))
 *     return obj
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6python_6lhapdf_AlphaS(((PyTypeObject *)__pyx_ptype_6python_6lhapdf_AlphaS), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_obj = ((struct __pyx_obj_6python_6lhapdf_AlphaS *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":865
 *     "Factory function to make an AlphaS object without a PDF reference."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkBareAlphaS(as_type))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkBareAlphaS(__pyx_v_as_type);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 865, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6python_6lhapdf_AlphaS *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/lhapdf.pyx":866
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkBareAlphaS(as_type))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * def mkPDF(*args):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_obj);
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "python/lhapdf.pyx":862
 *     return obj
 * 
 * cdef mkBareAlphaS_(string as_type):             # <<<<<<<<<<<<<<
 *     "Factory function to make an AlphaS object without a PDF reference."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.mkBareAlphaS_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":868
 *     return obj
 * 
 * def mkPDF(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a PDF object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_7mkPDF(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_6mkPDF, "mkPDF(*args)\nFactory function to make a PDF object from the set name and member number\n    (2 args), the unique LHAPDF ID number for that member (1 int arg), or the\n    SETNAME/NMEM string format.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_7mkPDF = {"mkPDF", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6python_6lhapdf_7mkPDF, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6mkPDF};
static PyObject *__pyx_pw_6python_6lhapdf_7mkPDF(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkPDF (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "mkPDF", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6python_6lhapdf_6mkPDF(__pyx_self, __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_6mkPDF(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args) {
  std::string __pyx_v_arg0_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkPDF", 1);

  /* "python/lhapdf.pyx":873
 *     SETNAME/NMEM string format."""
 *     cdef string arg0_string
 *     if len(args) == 1:             # <<<<<<<<<<<<<<
 *         if type(args[0]) == int:
 *             return mkPDF_lhaid(args[0])
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 873, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 1);
  if (__pyx_t_2) {

    /* "python/lhapdf.pyx":874
 *     cdef string arg0_string
 *     if len(args) == 1:
 *         if type(args[0]) == int:             # <<<<<<<<<<<<<<
 *             return mkPDF_lhaid(args[0])
 *         if type(args[0]) == str:
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_3)), ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "python/lhapdf.pyx":875
 *     if len(args) == 1:
 *         if type(args[0]) == int:
 *             return mkPDF_lhaid(args[0])             # <<<<<<<<<<<<<<
 *         if type(args[0]) == str:
 *             arg0_string = args[0]
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 875, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 875, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __pyx_f_6python_6lhapdf_mkPDF_lhaid(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 875, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "python/lhapdf.pyx":874
 *     cdef string arg0_string
 *     if len(args) == 1:
 *         if type(args[0]) == int:             # <<<<<<<<<<<<<<
 *             return mkPDF_lhaid(args[0])
 *         if type(args[0]) == str:
 */
    }

    /* "python/lhapdf.pyx":876
 *         if type(args[0]) == int:
 *             return mkPDF_lhaid(args[0])
 *         if type(args[0]) == str:             # <<<<<<<<<<<<<<
 *             arg0_string = args[0]
 *             return mkPDF_setmemstr(arg0_string)
 */
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_4)), ((PyObject *)(&PyString_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "python/lhapdf.pyx":877
 *             return mkPDF_lhaid(args[0])
 *         if type(args[0]) == str:
 *             arg0_string = args[0]             # <<<<<<<<<<<<<<
 *             return mkPDF_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 */
      __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 877, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 877, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_arg0_string = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

      /* "python/lhapdf.pyx":878
 *         if type(args[0]) == str:
 *             arg0_string = args[0]
 *             return mkPDF_setmemstr(arg0_string)             # <<<<<<<<<<<<<<
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 *         arg0_string = args[0]
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __pyx_f_6python_6lhapdf_mkPDF_setmemstr(__pyx_v_arg0_string); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "python/lhapdf.pyx":876
 *         if type(args[0]) == int:
 *             return mkPDF_lhaid(args[0])
 *         if type(args[0]) == str:             # <<<<<<<<<<<<<<
 *             arg0_string = args[0]
 *             return mkPDF_setmemstr(arg0_string)
 */
    }

    /* "python/lhapdf.pyx":873
 *     SETNAME/NMEM string format."""
 *     cdef string arg0_string
 *     if len(args) == 1:             # <<<<<<<<<<<<<<
 *         if type(args[0]) == int:
 *             return mkPDF_lhaid(args[0])
 */
    goto __pyx_L3;
  }

  /* "python/lhapdf.pyx":879
 *             arg0_string = args[0]
 *             return mkPDF_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:             # <<<<<<<<<<<<<<
 *         arg0_string = args[0]
 *         return mkPDF_setmem(arg0_string, args[1])
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 879, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_1 == 2);
  if (__pyx_t_7) {
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_3)), ((PyObject *)(&PyString_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_7) {
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_4)), ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_7;
  __pyx_L6_bool_binop_done:;
  if (likely(__pyx_t_2)) {

    /* "python/lhapdf.pyx":880
 *             return mkPDF_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 *         arg0_string = args[0]             # <<<<<<<<<<<<<<
 *         return mkPDF_setmem(arg0_string, args[1])
 *     else:
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_arg0_string = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

    /* "python/lhapdf.pyx":881
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 *         arg0_string = args[0]
 *         return mkPDF_setmem(arg0_string, args[1])             # <<<<<<<<<<<<<<
 *     else:
 *         raise Exception("Unknown call signature")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 881, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 881, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_f_6python_6lhapdf_mkPDF_setmem(__pyx_v_arg0_string, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 881, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "python/lhapdf.pyx":879
 *             arg0_string = args[0]
 *             return mkPDF_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:             # <<<<<<<<<<<<<<
 *         arg0_string = args[0]
 *         return mkPDF_setmem(arg0_string, args[1])
 */
  }

  /* "python/lhapdf.pyx":883
 *         return mkPDF_setmem(arg0_string, args[1])
 *     else:
 *         raise Exception("Unknown call signature")             # <<<<<<<<<<<<<<
 * 
 * def mkAlphaS(*args):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 883, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "python/lhapdf.pyx":868
 *     return obj
 * 
 * def mkPDF(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a PDF object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("python.lhapdf.mkPDF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":885
 *         raise Exception("Unknown call signature")
 * 
 * def mkAlphaS(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a AlphaS object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_9mkAlphaS(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_8mkAlphaS, "mkAlphaS(*args)\nFactory function to make a AlphaS object from the set name and member number\n    (2 args), the unique LHAPDF ID number for that member (1 int arg), or the\n    SETNAME/NMEM string format.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_9mkAlphaS = {"mkAlphaS", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6python_6lhapdf_9mkAlphaS, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_8mkAlphaS};
static PyObject *__pyx_pw_6python_6lhapdf_9mkAlphaS(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkAlphaS (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "mkAlphaS", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6python_6lhapdf_8mkAlphaS(__pyx_self, __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_8mkAlphaS(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args) {
  std::string __pyx_v_arg0_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkAlphaS", 1);

  /* "python/lhapdf.pyx":890
 *     SETNAME/NMEM string format."""
 *     cdef string arg0_string
 *     if len(args) == 1:             # <<<<<<<<<<<<<<
 *         if type(args[0]) == int:
 *             return mkAlphaS_lhaid(args[0])
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 890, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 1);
  if (__pyx_t_2) {

    /* "python/lhapdf.pyx":891
 *     cdef string arg0_string
 *     if len(args) == 1:
 *         if type(args[0]) == int:             # <<<<<<<<<<<<<<
 *             return mkAlphaS_lhaid(args[0])
 *         if type(args[0]) == str:
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_3)), ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "python/lhapdf.pyx":892
 *     if len(args) == 1:
 *         if type(args[0]) == int:
 *             return mkAlphaS_lhaid(args[0])             # <<<<<<<<<<<<<<
 *         if type(args[0]) == str:
 *             arg0_string = args[0]
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __pyx_f_6python_6lhapdf_mkAlphaS_lhaid(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "python/lhapdf.pyx":891
 *     cdef string arg0_string
 *     if len(args) == 1:
 *         if type(args[0]) == int:             # <<<<<<<<<<<<<<
 *             return mkAlphaS_lhaid(args[0])
 *         if type(args[0]) == str:
 */
    }

    /* "python/lhapdf.pyx":893
 *         if type(args[0]) == int:
 *             return mkAlphaS_lhaid(args[0])
 *         if type(args[0]) == str:             # <<<<<<<<<<<<<<
 *             arg0_string = args[0]
 *             return mkAlphaS_setmemstr(arg0_string)
 */
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_4)), ((PyObject *)(&PyString_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "python/lhapdf.pyx":894
 *             return mkAlphaS_lhaid(args[0])
 *         if type(args[0]) == str:
 *             arg0_string = args[0]             # <<<<<<<<<<<<<<
 *             return mkAlphaS_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 */
      __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_arg0_string = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

      /* "python/lhapdf.pyx":895
 *         if type(args[0]) == str:
 *             arg0_string = args[0]
 *             return mkAlphaS_setmemstr(arg0_string)             # <<<<<<<<<<<<<<
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 *         arg0_string = args[0]
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __pyx_f_6python_6lhapdf_mkAlphaS_setmemstr(__pyx_v_arg0_string); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "python/lhapdf.pyx":893
 *         if type(args[0]) == int:
 *             return mkAlphaS_lhaid(args[0])
 *         if type(args[0]) == str:             # <<<<<<<<<<<<<<
 *             arg0_string = args[0]
 *             return mkAlphaS_setmemstr(arg0_string)
 */
    }

    /* "python/lhapdf.pyx":890
 *     SETNAME/NMEM string format."""
 *     cdef string arg0_string
 *     if len(args) == 1:             # <<<<<<<<<<<<<<
 *         if type(args[0]) == int:
 *             return mkAlphaS_lhaid(args[0])
 */
    goto __pyx_L3;
  }

  /* "python/lhapdf.pyx":896
 *             arg0_string = args[0]
 *             return mkAlphaS_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:             # <<<<<<<<<<<<<<
 *         arg0_string = args[0]
 *         return mkAlphaS_setmem(arg0_string, args[1])
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 896, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_1 == 2);
  if (__pyx_t_7) {
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_3)), ((PyObject *)(&PyString_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_7) {
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_4)), ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_7;
  __pyx_L6_bool_binop_done:;
  if (likely(__pyx_t_2)) {

    /* "python/lhapdf.pyx":897
 *             return mkAlphaS_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 *         arg0_string = args[0]             # <<<<<<<<<<<<<<
 *         return mkAlphaS_setmem(arg0_string, args[1])
 *     else:
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 897, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 897, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_arg0_string = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

    /* "python/lhapdf.pyx":898
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 *         arg0_string = args[0]
 *         return mkAlphaS_setmem(arg0_string, args[1])             # <<<<<<<<<<<<<<
 *     else:
 *         raise Exception("Unknown call signature")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 898, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_f_6python_6lhapdf_mkAlphaS_setmem(__pyx_v_arg0_string, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "python/lhapdf.pyx":896
 *             arg0_string = args[0]
 *             return mkAlphaS_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:             # <<<<<<<<<<<<<<
 *         arg0_string = args[0]
 *         return mkAlphaS_setmem(arg0_string, args[1])
 */
  }

  /* "python/lhapdf.pyx":900
 *         return mkAlphaS_setmem(arg0_string, args[1])
 *     else:
 *         raise Exception("Unknown call signature")             # <<<<<<<<<<<<<<
 * 
 * def mkBareAlphaS(as_type):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 900, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "python/lhapdf.pyx":885
 *         raise Exception("Unknown call signature")
 * 
 * def mkAlphaS(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a AlphaS object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("python.lhapdf.mkAlphaS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":902
 *         raise Exception("Unknown call signature")
 * 
 * def mkBareAlphaS(as_type):             # <<<<<<<<<<<<<<
 *     "Factory function to make a bare AlphaS object."
 *     return mkBareAlphaS_(as_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_11mkBareAlphaS(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_10mkBareAlphaS, "mkBareAlphaS(as_type)\nFactory function to make a bare AlphaS object.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_11mkBareAlphaS = {"mkBareAlphaS", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_11mkBareAlphaS, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_10mkBareAlphaS};
static PyObject *__pyx_pw_6python_6lhapdf_11mkBareAlphaS(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_as_type = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkBareAlphaS (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_as_type,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_as_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 902, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "mkBareAlphaS") < 0)) __PYX_ERR(0, 902, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_as_type = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mkBareAlphaS", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 902, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.mkBareAlphaS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_10mkBareAlphaS(__pyx_self, __pyx_v_as_type);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_10mkBareAlphaS(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_as_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkBareAlphaS", 1);

  /* "python/lhapdf.pyx":904
 * def mkBareAlphaS(as_type):
 *     "Factory function to make a bare AlphaS object."
 *     return mkBareAlphaS_(as_type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_as_type); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 904, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_6python_6lhapdf_mkBareAlphaS_(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":902
 *         raise Exception("Unknown call signature")
 * 
 * def mkBareAlphaS(as_type):             # <<<<<<<<<<<<<<
 *     "Factory function to make a bare AlphaS object."
 *     return mkBareAlphaS_(as_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.mkBareAlphaS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":907
 * 
 * 
 * def weightxQ(int id, double x, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_13weightxQ(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_12weightxQ, "weightxQ(int id, double x, double Q, PDF basepdf, PDF newpdf, aschk=5e-2)\nReweight from basepdf to newpdf with flavor id and kinematics x and Q2.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_13weightxQ = {"weightxQ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_13weightxQ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_12weightxQ};
static PyObject *__pyx_pw_6python_6lhapdf_13weightxQ(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_id;
  double __pyx_v_x;
  double __pyx_v_Q;
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_basepdf = 0;
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_newpdf = 0;
  PyObject *__pyx_v_aschk = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weightxQ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_x,&__pyx_n_s_Q,&__pyx_n_s_basepdf,&__pyx_n_s_newpdf,&__pyx_n_s_aschk,0};
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_float_5eneg_2)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ", 0, 5, 6, 1); __PYX_ERR(0, 907, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Q)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ", 0, 5, 6, 2); __PYX_ERR(0, 907, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_basepdf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ", 0, 5, 6, 3); __PYX_ERR(0, 907, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_newpdf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ", 0, 5, 6, 4); __PYX_ERR(0, 907, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_aschk);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "weightxQ") < 0)) __PYX_ERR(0, 907, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L3_error)
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L3_error)
    __pyx_v_Q = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L3_error)
    __pyx_v_basepdf = ((struct __pyx_obj_6python_6lhapdf_PDF *)values[3]);
    __pyx_v_newpdf = ((struct __pyx_obj_6python_6lhapdf_PDF *)values[4]);
    __pyx_v_aschk = values[5];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("weightxQ", 0, 5, 6, __pyx_nargs); __PYX_ERR(0, 907, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.weightxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_basepdf), __pyx_ptype_6python_6lhapdf_PDF, 1, "basepdf", 0))) __PYX_ERR(0, 907, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newpdf), __pyx_ptype_6python_6lhapdf_PDF, 1, "newpdf", 0))) __PYX_ERR(0, 907, __pyx_L1_error)
  __pyx_r = __pyx_pf_6python_6lhapdf_12weightxQ(__pyx_self, __pyx_v_id, __pyx_v_x, __pyx_v_Q, __pyx_v_basepdf, __pyx_v_newpdf, __pyx_v_aschk);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_12weightxQ(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id, double __pyx_v_x, double __pyx_v_Q, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("weightxQ", 1);

  /* "python/lhapdf.pyx":910
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 *     return c.weightxQ(id, x, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)             # <<<<<<<<<<<<<<
 * 
 * def weightxQ2(int id, double x, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_aschk); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 910, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(LHAPDF::weightxQ(__pyx_v_id, __pyx_v_x, __pyx_v_Q, (*__pyx_v_basepdf->_ptr), (*__pyx_v_newpdf->_ptr), __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":907
 * 
 * 
 * def weightxQ(int id, double x, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.weightxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":912
 *     return c.weightxQ(id, x, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxQ2(int id, double x, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_15weightxQ2(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_14weightxQ2, "weightxQ2(int id, double x, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2)\nReweight from basepdf to newpdf with flavor id and kinematics x and Q2.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_15weightxQ2 = {"weightxQ2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_15weightxQ2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_14weightxQ2};
static PyObject *__pyx_pw_6python_6lhapdf_15weightxQ2(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_id;
  double __pyx_v_x;
  double __pyx_v_Q2;
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_basepdf = 0;
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_newpdf = 0;
  PyObject *__pyx_v_aschk = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weightxQ2 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_x,&__pyx_n_s_Q2,&__pyx_n_s_basepdf,&__pyx_n_s_newpdf,&__pyx_n_s_aschk,0};
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_float_5eneg_2)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 912, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 912, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ2", 0, 5, 6, 1); __PYX_ERR(0, 912, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Q2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 912, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ2", 0, 5, 6, 2); __PYX_ERR(0, 912, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_basepdf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 912, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ2", 0, 5, 6, 3); __PYX_ERR(0, 912, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_newpdf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 912, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ2", 0, 5, 6, 4); __PYX_ERR(0, 912, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_aschk);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 912, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "weightxQ2") < 0)) __PYX_ERR(0, 912, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 912, __pyx_L3_error)
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 912, __pyx_L3_error)
    __pyx_v_Q2 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Q2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 912, __pyx_L3_error)
    __pyx_v_basepdf = ((struct __pyx_obj_6python_6lhapdf_PDF *)values[3]);
    __pyx_v_newpdf = ((struct __pyx_obj_6python_6lhapdf_PDF *)values[4]);
    __pyx_v_aschk = values[5];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("weightxQ2", 0, 5, 6, __pyx_nargs); __PYX_ERR(0, 912, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.weightxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_basepdf), __pyx_ptype_6python_6lhapdf_PDF, 1, "basepdf", 0))) __PYX_ERR(0, 912, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newpdf), __pyx_ptype_6python_6lhapdf_PDF, 1, "newpdf", 0))) __PYX_ERR(0, 912, __pyx_L1_error)
  __pyx_r = __pyx_pf_6python_6lhapdf_14weightxQ2(__pyx_self, __pyx_v_id, __pyx_v_x, __pyx_v_Q2, __pyx_v_basepdf, __pyx_v_newpdf, __pyx_v_aschk);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_14weightxQ2(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id, double __pyx_v_x, double __pyx_v_Q2, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("weightxQ2", 1);

  /* "python/lhapdf.pyx":915
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 *     return c.weightxQ2(id, x, Q2, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)             # <<<<<<<<<<<<<<
 * 
 * def weightxxQ(int id1, int id2, double x1, double x2, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_aschk); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 915, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(LHAPDF::weightxQ2(__pyx_v_id, __pyx_v_x, __pyx_v_Q2, (*__pyx_v_basepdf->_ptr), (*__pyx_v_newpdf->_ptr), __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":912
 *     return c.weightxQ(id, x, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxQ2(int id, double x, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.weightxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":917
 *     return c.weightxQ2(id, x, Q2, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ(int id1, int id2, double x1, double x2, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_17weightxxQ(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_16weightxxQ, "weightxxQ(int id1, int id2, double x1, double x2, double Q, PDF basepdf, PDF newpdf, aschk=5e-2)\nReweight from basepdf to newpdf with flavor id and kinematics x and Q2.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_17weightxxQ = {"weightxxQ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_17weightxxQ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_16weightxxQ};
static PyObject *__pyx_pw_6python_6lhapdf_17weightxxQ(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_id1;
  int __pyx_v_id2;
  double __pyx_v_x1;
  double __pyx_v_x2;
  double __pyx_v_Q;
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_basepdf = 0;
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_newpdf = 0;
  PyObject *__pyx_v_aschk = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[8] = {0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weightxxQ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id1,&__pyx_n_s_id2,&__pyx_n_s_x1,&__pyx_n_s_x2,&__pyx_n_s_Q,&__pyx_n_s_basepdf,&__pyx_n_s_newpdf,&__pyx_n_s_aschk,0};
    values[7] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_float_5eneg_2)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, 1); __PYX_ERR(0, 917, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, 2); __PYX_ERR(0, 917, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, 3); __PYX_ERR(0, 917, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Q)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, 4); __PYX_ERR(0, 917, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_basepdf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, 5); __PYX_ERR(0, 917, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_newpdf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[6]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, 6); __PYX_ERR(0, 917, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_aschk);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "weightxxQ") < 0)) __PYX_ERR(0, 917, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_id1 = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
    __pyx_v_id2 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_id2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
    __pyx_v_x1 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_x1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
    __pyx_v_x2 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_x2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
    __pyx_v_Q = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
    __pyx_v_basepdf = ((struct __pyx_obj_6python_6lhapdf_PDF *)values[5]);
    __pyx_v_newpdf = ((struct __pyx_obj_6python_6lhapdf_PDF *)values[6]);
    __pyx_v_aschk = values[7];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, __pyx_nargs); __PYX_ERR(0, 917, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.weightxxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_basepdf), __pyx_ptype_6python_6lhapdf_PDF, 1, "basepdf", 0))) __PYX_ERR(0, 917, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newpdf), __pyx_ptype_6python_6lhapdf_PDF, 1, "newpdf", 0))) __PYX_ERR(0, 917, __pyx_L1_error)
  __pyx_r = __pyx_pf_6python_6lhapdf_16weightxxQ(__pyx_self, __pyx_v_id1, __pyx_v_id2, __pyx_v_x1, __pyx_v_x2, __pyx_v_Q, __pyx_v_basepdf, __pyx_v_newpdf, __pyx_v_aschk);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_16weightxxQ(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id1, int __pyx_v_id2, double __pyx_v_x1, double __pyx_v_x2, double __pyx_v_Q, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("weightxxQ", 1);

  /* "python/lhapdf.pyx":920
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 *     return c.weightxxQ(id1, id2, x1, x2, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)             # <<<<<<<<<<<<<<
 * 
 * def weightxxQ2(int id1, int id2, double x1, double x2, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_aschk); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 920, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(LHAPDF::weightxxQ(__pyx_v_id1, __pyx_v_id2, __pyx_v_x1, __pyx_v_x2, __pyx_v_Q, (*__pyx_v_basepdf->_ptr), (*__pyx_v_newpdf->_ptr), __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":917
 *     return c.weightxQ2(id, x, Q2, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ(int id1, int id2, double x1, double x2, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.weightxxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":922
 *     return c.weightxxQ(id1, id2, x1, x2, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ2(int id1, int id2, double x1, double x2, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_19weightxxQ2(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_18weightxxQ2, "weightxxQ2(int id1, int id2, double x1, double x2, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2)\nReweight from basepdf to newpdf with flavor id and kinematics x and Q2.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_19weightxxQ2 = {"weightxxQ2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_19weightxxQ2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_18weightxxQ2};
static PyObject *__pyx_pw_6python_6lhapdf_19weightxxQ2(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_id1;
  int __pyx_v_id2;
  double __pyx_v_x1;
  double __pyx_v_x2;
  double __pyx_v_Q2;
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_basepdf = 0;
  struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_newpdf = 0;
  PyObject *__pyx_v_aschk = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[8] = {0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weightxxQ2 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id1,&__pyx_n_s_id2,&__pyx_n_s_x1,&__pyx_n_s_x2,&__pyx_n_s_Q2,&__pyx_n_s_basepdf,&__pyx_n_s_newpdf,&__pyx_n_s_aschk,0};
    values[7] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_float_5eneg_2)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_id2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, 1); __PYX_ERR(0, 922, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, 2); __PYX_ERR(0, 922, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, 3); __PYX_ERR(0, 922, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Q2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, 4); __PYX_ERR(0, 922, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_basepdf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, 5); __PYX_ERR(0, 922, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_newpdf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[6]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, 6); __PYX_ERR(0, 922, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_aschk);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "weightxxQ2") < 0)) __PYX_ERR(0, 922, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_id1 = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
    __pyx_v_id2 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_id2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
    __pyx_v_x1 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_x1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
    __pyx_v_x2 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_x2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
    __pyx_v_Q2 = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Q2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L3_error)
    __pyx_v_basepdf = ((struct __pyx_obj_6python_6lhapdf_PDF *)values[5]);
    __pyx_v_newpdf = ((struct __pyx_obj_6python_6lhapdf_PDF *)values[6]);
    __pyx_v_aschk = values[7];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, __pyx_nargs); __PYX_ERR(0, 922, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.weightxxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_basepdf), __pyx_ptype_6python_6lhapdf_PDF, 1, "basepdf", 0))) __PYX_ERR(0, 922, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newpdf), __pyx_ptype_6python_6lhapdf_PDF, 1, "newpdf", 0))) __PYX_ERR(0, 922, __pyx_L1_error)
  __pyx_r = __pyx_pf_6python_6lhapdf_18weightxxQ2(__pyx_self, __pyx_v_id1, __pyx_v_id2, __pyx_v_x1, __pyx_v_x2, __pyx_v_Q2, __pyx_v_basepdf, __pyx_v_newpdf, __pyx_v_aschk);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_18weightxxQ2(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id1, int __pyx_v_id2, double __pyx_v_x1, double __pyx_v_x2, double __pyx_v_Q2, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6python_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("weightxxQ2", 1);

  /* "python/lhapdf.pyx":925
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 *     return c.weightxxQ2(id1, id2, x1, x2, Q2, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_aschk); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 925, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(LHAPDF::weightxxQ2(__pyx_v_id1, __pyx_v_id2, __pyx_v_x1, __pyx_v_x2, __pyx_v_Q2, (*__pyx_v_basepdf->_ptr), (*__pyx_v_newpdf->_ptr), __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":922
 *     return c.weightxxQ(id1, id2, x1, x2, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ2(int id1, int id2, double x1, double x2, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python.lhapdf.weightxxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":929
 * 
 * 
 * def version():             # <<<<<<<<<<<<<<
 *     "Return the LHAPDF library version."
 *     return c.version()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_21version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_20version, "version()\nReturn the LHAPDF library version.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_21version = {"version", (PyCFunction)__pyx_pw_6python_6lhapdf_21version, METH_NOARGS, __pyx_doc_6python_6lhapdf_20version};
static PyObject *__pyx_pw_6python_6lhapdf_21version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("version (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_20version(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_20version(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("version", 1);

  /* "python/lhapdf.pyx":931
 * def version():
 *     "Return the LHAPDF library version."
 *     return c.version()             # <<<<<<<<<<<<<<
 * 
 * __version__ = version()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(LHAPDF::version()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":929
 * 
 * 
 * def version():             # <<<<<<<<<<<<<<
 *     "Return the LHAPDF library version."
 *     return c.version()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":936
 * 
 * 
 * def verbosity():             # <<<<<<<<<<<<<<
 *     "Get the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     return c.verbosity()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_23verbosity(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_22verbosity, "verbosity()\nGet the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud");
static PyMethodDef __pyx_mdef_6python_6lhapdf_23verbosity = {"verbosity", (PyCFunction)__pyx_pw_6python_6lhapdf_23verbosity, METH_NOARGS, __pyx_doc_6python_6lhapdf_22verbosity};
static PyObject *__pyx_pw_6python_6lhapdf_23verbosity(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("verbosity (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_22verbosity(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_22verbosity(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("verbosity", 1);

  /* "python/lhapdf.pyx":938
 * def verbosity():
 *     "Get the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     return c.verbosity()             # <<<<<<<<<<<<<<
 * 
 * def setVerbosity(vlevel):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(LHAPDF::verbosity()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":936
 * 
 * 
 * def verbosity():             # <<<<<<<<<<<<<<
 *     "Get the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     return c.verbosity()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.verbosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":940
 *     return c.verbosity()
 * 
 * def setVerbosity(vlevel):             # <<<<<<<<<<<<<<
 *     "Set the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     c.setVerbosity(vlevel)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_25setVerbosity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_24setVerbosity, "setVerbosity(vlevel)\nSet the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud");
static PyMethodDef __pyx_mdef_6python_6lhapdf_25setVerbosity = {"setVerbosity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_25setVerbosity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_24setVerbosity};
static PyObject *__pyx_pw_6python_6lhapdf_25setVerbosity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_vlevel = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setVerbosity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vlevel,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_vlevel)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setVerbosity") < 0)) __PYX_ERR(0, 940, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_vlevel = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setVerbosity", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 940, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.setVerbosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_24setVerbosity(__pyx_self, __pyx_v_vlevel);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_24setVerbosity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vlevel) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setVerbosity", 1);

  /* "python/lhapdf.pyx":942
 * def setVerbosity(vlevel):
 *     "Set the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     c.setVerbosity(vlevel)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_vlevel); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 942, __pyx_L1_error)
  LHAPDF::setVerbosity(__pyx_t_1);

  /* "python/lhapdf.pyx":940
 *     return c.verbosity()
 * 
 * def setVerbosity(vlevel):             # <<<<<<<<<<<<<<
 *     "Set the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     c.setVerbosity(vlevel)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.setVerbosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":945
 * 
 * 
 * def availablePDFSets():             # <<<<<<<<<<<<<<
 *     "Get the names of all the available PDF sets on this system."
 *     return c.availablePDFSets()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_27availablePDFSets(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_26availablePDFSets, "availablePDFSets()\nGet the names of all the available PDF sets on this system.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_27availablePDFSets = {"availablePDFSets", (PyCFunction)__pyx_pw_6python_6lhapdf_27availablePDFSets, METH_NOARGS, __pyx_doc_6python_6lhapdf_26availablePDFSets};
static PyObject *__pyx_pw_6python_6lhapdf_27availablePDFSets(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("availablePDFSets (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_26availablePDFSets(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_26availablePDFSets(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("availablePDFSets", 1);

  /* "python/lhapdf.pyx":947
 * def availablePDFSets():
 *     "Get the names of all the available PDF sets on this system."
 *     return c.availablePDFSets()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(LHAPDF::availablePDFSets()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":945
 * 
 * 
 * def availablePDFSets():             # <<<<<<<<<<<<<<
 *     "Get the names of all the available PDF sets on this system."
 *     return c.availablePDFSets()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.availablePDFSets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":950
 * 
 * 
 * def paths():             # <<<<<<<<<<<<<<
 *     "Return the list of current PDF data search paths."
 *     return c.paths()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_29paths(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_28paths, "paths()\nReturn the list of current PDF data search paths.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_29paths = {"paths", (PyCFunction)__pyx_pw_6python_6lhapdf_29paths, METH_NOARGS, __pyx_doc_6python_6lhapdf_28paths};
static PyObject *__pyx_pw_6python_6lhapdf_29paths(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("paths (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6python_6lhapdf_28paths(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_28paths(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("paths", 1);

  /* "python/lhapdf.pyx":952
 * def paths():
 *     "Return the list of current PDF data search paths."
 *     return c.paths()             # <<<<<<<<<<<<<<
 * 
 * def setPaths(newpaths):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(LHAPDF::paths()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":950
 * 
 * 
 * def paths():             # <<<<<<<<<<<<<<
 *     "Return the list of current PDF data search paths."
 *     return c.paths()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python.lhapdf.paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":954
 *     return c.paths()
 * 
 * def setPaths(newpaths):             # <<<<<<<<<<<<<<
 *     "Set the list of current PDF data search paths."
 *     c.setPaths([p for p in newpaths])  #< TODO: check if str auto-encode works without loop
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_31setPaths(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_30setPaths, "setPaths(newpaths)\nSet the list of current PDF data search paths.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_31setPaths = {"setPaths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_31setPaths, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_30setPaths};
static PyObject *__pyx_pw_6python_6lhapdf_31setPaths(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_newpaths = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPaths (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_newpaths,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_newpaths)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 954, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setPaths") < 0)) __PYX_ERR(0, 954, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_newpaths = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPaths", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 954, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.setPaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_30setPaths(__pyx_self, __pyx_v_newpaths);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_30setPaths(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_newpaths) {
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::string>  __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPaths", 1);

  /* "python/lhapdf.pyx":956
 * def setPaths(newpaths):
 *     "Set the list of current PDF data search paths."
 *     c.setPaths([p for p in newpaths])  #< TODO: check if str auto-encode works without loop             # <<<<<<<<<<<<<<
 * 
 * def pathsPrepend(newpath):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_v_newpaths)) || PyTuple_CheckExact(__pyx_v_newpaths)) {
    __pyx_t_2 = __pyx_v_newpaths; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_newpaths); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 956, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 956, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 956, __pyx_L1_error)
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 956, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 956, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 956, __pyx_L1_error)
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 956, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 956, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_5);
    __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 956, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  LHAPDF::setPaths(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6));

  /* "python/lhapdf.pyx":954
 *     return c.paths()
 * 
 * def setPaths(newpaths):             # <<<<<<<<<<<<<<
 *     "Set the list of current PDF data search paths."
 *     c.setPaths([p for p in newpaths])  #< TODO: check if str auto-encode works without loop
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("python.lhapdf.setPaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":958
 *     c.setPaths([p for p in newpaths])  #< TODO: check if str auto-encode works without loop
 * 
 * def pathsPrepend(newpath):             # <<<<<<<<<<<<<<
 *     "Prepend to the list of current PDF data search paths."
 *     c.pathsPrepend(newpath)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_33pathsPrepend(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_32pathsPrepend, "pathsPrepend(newpath)\nPrepend to the list of current PDF data search paths.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_33pathsPrepend = {"pathsPrepend", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_33pathsPrepend, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_32pathsPrepend};
static PyObject *__pyx_pw_6python_6lhapdf_33pathsPrepend(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_newpath = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pathsPrepend (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_newpath,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_newpath)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 958, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "pathsPrepend") < 0)) __PYX_ERR(0, 958, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_newpath = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pathsPrepend", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 958, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.pathsPrepend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_32pathsPrepend(__pyx_self, __pyx_v_newpath);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_32pathsPrepend(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_newpath) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pathsPrepend", 1);

  /* "python/lhapdf.pyx":960
 * def pathsPrepend(newpath):
 *     "Prepend to the list of current PDF data search paths."
 *     c.pathsPrepend(newpath)             # <<<<<<<<<<<<<<
 * 
 * def pathsAppend(newpath):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_newpath); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 960, __pyx_L1_error)
  LHAPDF::pathsPrepend(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1));

  /* "python/lhapdf.pyx":958
 *     c.setPaths([p for p in newpaths])  #< TODO: check if str auto-encode works without loop
 * 
 * def pathsPrepend(newpath):             # <<<<<<<<<<<<<<
 *     "Prepend to the list of current PDF data search paths."
 *     c.pathsPrepend(newpath)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.pathsPrepend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":962
 *     c.pathsPrepend(newpath)
 * 
 * def pathsAppend(newpath):             # <<<<<<<<<<<<<<
 *     "Append to the list of current PDF data search paths."
 *     c.pathsAppend(newpath)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_35pathsAppend(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_34pathsAppend, "pathsAppend(newpath)\nAppend to the list of current PDF data search paths.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_35pathsAppend = {"pathsAppend", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_35pathsAppend, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_34pathsAppend};
static PyObject *__pyx_pw_6python_6lhapdf_35pathsAppend(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_newpath = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pathsAppend (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_newpath,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_newpath)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 962, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "pathsAppend") < 0)) __PYX_ERR(0, 962, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_newpath = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pathsAppend", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 962, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.pathsAppend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_34pathsAppend(__pyx_self, __pyx_v_newpath);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_34pathsAppend(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_newpath) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pathsAppend", 1);

  /* "python/lhapdf.pyx":964
 * def pathsAppend(newpath):
 *     "Append to the list of current PDF data search paths."
 *     c.pathsAppend(newpath)             # <<<<<<<<<<<<<<
 * 
 * def findFile(filename):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_newpath); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 964, __pyx_L1_error)
  LHAPDF::pathsAppend(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1));

  /* "python/lhapdf.pyx":962
 *     c.pathsPrepend(newpath)
 * 
 * def pathsAppend(newpath):             # <<<<<<<<<<<<<<
 *     "Append to the list of current PDF data search paths."
 *     c.pathsAppend(newpath)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python.lhapdf.pathsAppend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/lhapdf.pyx":966
 *     c.pathsAppend(newpath)
 * 
 * def findFile(filename):             # <<<<<<<<<<<<<<
 *     "Return the path to the found filename via the LHAPDF search mechanism, or None."
 *     cdef string path = c.findFile(filename)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6python_6lhapdf_37findFile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6python_6lhapdf_36findFile, "findFile(filename)\nReturn the path to the found filename via the LHAPDF search mechanism, or None.");
static PyMethodDef __pyx_mdef_6python_6lhapdf_37findFile = {"findFile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_37findFile, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_36findFile};
static PyObject *__pyx_pw_6python_6lhapdf_37findFile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findFile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_filename)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 966, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "findFile") < 0)) __PYX_ERR(0, 966, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findFile", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 966, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("python.lhapdf.findFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6python_6lhapdf_36findFile(__pyx_self, __pyx_v_filename);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6python_6lhapdf_36findFile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  std::string __pyx_v_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("findFile", 1);

  /* "python/lhapdf.pyx":968
 * def findFile(filename):
 *     "Return the path to the found filename via the LHAPDF search mechanism, or None."
 *     cdef string path = c.findFile(filename)             # <<<<<<<<<<<<<<
 *     return path if not path.empty() else None
 */
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L1_error)
  __pyx_v_path = LHAPDF::findFile(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1));

  /* "python/lhapdf.pyx":969
 *     "Return the path to the found filename via the LHAPDF search mechanism, or None."
 *     cdef string path = c.findFile(filename)
 *     return path if not path.empty() else None             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = (!__pyx_v_path.empty());
  if (__pyx_t_3) {
    __pyx_t_4 = __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(__pyx_v_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "python/lhapdf.pyx":966
 *     c.pathsAppend(newpath)
 * 
 * def findFile(filename):             # <<<<<<<<<<<<<<
 *     "Return the path to the found filename via the LHAPDF search mechanism, or None."
 *     cdef string path = c.findFile(filename)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("python.lhapdf.findFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_6python_6lhapdf_PDF __pyx_vtable_6python_6lhapdf_PDF;

static PyObject *__pyx_tp_new_6python_6lhapdf_PDF(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6python_6lhapdf_PDF *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6python_6lhapdf_PDF *)o);
  p->__pyx_vtab = __pyx_vtabptr_6python_6lhapdf_PDF;
  return o;
}

static void __pyx_tp_dealloc_6python_6lhapdf_PDF(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6python_6lhapdf_PDF) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6python_6lhapdf_3PDF_1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_6python_6lhapdf_3PDF_memberID(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_3PDF_8memberID_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_3PDF_lhapdfID(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_3PDF_8lhapdfID_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_3PDF_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_3PDF_4type_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_3PDF_description(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_3PDF_11description_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_3PDF_orderQCD(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_3PDF_8orderQCD_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_3PDF_xMin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_3PDF_4xMin_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_3PDF_xMax(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_3PDF_4xMax_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_3PDF_q2Min(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_3PDF_5q2Min_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_3PDF_q2Max(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_3PDF_5q2Max_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_6python_6lhapdf_3PDF_35__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6python_6lhapdf_3PDF_35__repr__(self);
}

static PyMethodDef __pyx_methods_6python_6lhapdf_PDF[] = {
  {"alphasQ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_3alphasQ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_2alphasQ},
  {"alphasQ2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_5alphasQ2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_4alphasQ2},
  {"xfxQ", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_7xfxQ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_6xfxQ},
  {"xfxQ2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_9xfxQ2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_8xfxQ2},
  {"inRangeQ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_11inRangeQ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_10inRangeQ},
  {"inRangeQ2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_13inRangeQ2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_12inRangeQ2},
  {"inRangeX", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_15inRangeX, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_14inRangeX},
  {"inRangeXQ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_17inRangeXQ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_16inRangeXQ},
  {"inRangeXQ2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_19inRangeXQ2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_18inRangeXQ2},
  {"flavors", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_21flavors, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_20flavors},
  {"hasFlavor", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_23hasFlavor, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_22hasFlavor},
  {"quarkMass", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_25quarkMass, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_24quarkMass},
  {"quarkThreshold", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_27quarkThreshold, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_26quarkThreshold},
  {"set", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_29set, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_28set},
  {"info", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_31info, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_30info},
  {"_print", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_33_print, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_32_print},
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6python_6lhapdf_3PDF_35__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_37__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_36__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_3PDF_39__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_3PDF_38__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6python_6lhapdf_PDF[] = {
  {(char *)"memberID", __pyx_getprop_6python_6lhapdf_3PDF_memberID, 0, (char *)PyDoc_STR("The PDF set member number of this PDF."), 0},
  {(char *)"lhapdfID", __pyx_getprop_6python_6lhapdf_3PDF_lhapdfID, 0, (char *)PyDoc_STR("The LHAPDF ID number of this PDF member."), 0},
  {(char *)"type", __pyx_getprop_6python_6lhapdf_3PDF_type, 0, (char *)PyDoc_STR("The type of PDF member, e.g. central, error."), 0},
  {(char *)"description", __pyx_getprop_6python_6lhapdf_3PDF_description, 0, (char *)PyDoc_STR("Description of this PDF member."), 0},
  {(char *)"orderQCD", __pyx_getprop_6python_6lhapdf_3PDF_orderQCD, 0, (char *)PyDoc_STR("Max number of loops involved in this PDF's evolution."), 0},
  {(char *)"xMin", __pyx_getprop_6python_6lhapdf_3PDF_xMin, 0, (char *)PyDoc_STR("Minimum valid value of x to be used with this PDF"), 0},
  {(char *)"xMax", __pyx_getprop_6python_6lhapdf_3PDF_xMax, 0, (char *)PyDoc_STR("Maximum valid value of x to be used with this PDF"), 0},
  {(char *)"q2Min", __pyx_getprop_6python_6lhapdf_3PDF_q2Min, 0, (char *)PyDoc_STR("Minimum valid value of x to be used with this PDF"), 0},
  {(char *)"q2Max", __pyx_getprop_6python_6lhapdf_3PDF_q2Max, 0, (char *)PyDoc_STR("Maximum valid value of x to be used with this PDF"), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6python_6lhapdf_PDF_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6python_6lhapdf_PDF},
  {Py_tp_repr, (void *)__pyx_pw_6python_6lhapdf_3PDF_35__repr__},
  {Py_tp_doc, (void *)PyDoc_STR("    A parton density function for in general several parton flavours,\n    i.e. one member of a PDF set.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_6python_6lhapdf_PDF},
  {Py_tp_getset, (void *)__pyx_getsets_6python_6lhapdf_PDF},
  {Py_tp_new, (void *)__pyx_tp_new_6python_6lhapdf_PDF},
  {0, 0},
};
static PyType_Spec __pyx_type_6python_6lhapdf_PDF_spec = {
  "python.lhapdf.PDF",
  sizeof(struct __pyx_obj_6python_6lhapdf_PDF),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6python_6lhapdf_PDF_slots,
};
#else

static PyTypeObject __pyx_type_6python_6lhapdf_PDF = {
  PyVarObject_HEAD_INIT(0, 0)
  "python.lhapdf.""PDF", /*tp_name*/
  sizeof(struct __pyx_obj_6python_6lhapdf_PDF), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_6lhapdf_PDF, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6python_6lhapdf_3PDF_35__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("    A parton density function for in general several parton flavours,\n    i.e. one member of a PDF set.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_6lhapdf_PDF, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6python_6lhapdf_PDF, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_6lhapdf_PDF, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6python_6lhapdf_Info __pyx_vtable_6python_6lhapdf_Info;

static PyObject *__pyx_tp_new_6python_6lhapdf_Info(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6python_6lhapdf_Info *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6python_6lhapdf_Info *)o);
  p->__pyx_vtab = __pyx_vtabptr_6python_6lhapdf_Info;
  return o;
}

static void __pyx_tp_dealloc_6python_6lhapdf_Info(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6python_6lhapdf_Info) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_specialmethod___pyx_pw_6python_6lhapdf_4Info_13__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6python_6lhapdf_4Info_13__repr__(self);
}

static PyMethodDef __pyx_methods_6python_6lhapdf_Info[] = {
  {"keys", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_1keys, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_keys},
  {"keys_local", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_3keys_local, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_2keys_local},
  {"has_key", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_5has_key, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_4has_key},
  {"has_key_local", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_7has_key_local, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_6has_key_local},
  {"get_entry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_9get_entry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_8get_entry},
  {"set_entry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_11set_entry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_10set_entry},
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6python_6lhapdf_4Info_13__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_15__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_14__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_4Info_17__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_4Info_16__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6python_6lhapdf_Info_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6python_6lhapdf_Info},
  {Py_tp_repr, (void *)__pyx_pw_6python_6lhapdf_4Info_13__repr__},
  {Py_tp_doc, (void *)PyDoc_STR("    Class that handles the parsing of PDF set metadata in the .info file.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_6python_6lhapdf_Info},
  {Py_tp_new, (void *)__pyx_tp_new_6python_6lhapdf_Info},
  {0, 0},
};
static PyType_Spec __pyx_type_6python_6lhapdf_Info_spec = {
  "python.lhapdf.Info",
  sizeof(struct __pyx_obj_6python_6lhapdf_Info),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6python_6lhapdf_Info_slots,
};
#else

static PyTypeObject __pyx_type_6python_6lhapdf_Info = {
  PyVarObject_HEAD_INIT(0, 0)
  "python.lhapdf.""Info", /*tp_name*/
  sizeof(struct __pyx_obj_6python_6lhapdf_Info), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_6lhapdf_Info, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6python_6lhapdf_4Info_13__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("    Class that handles the parsing of PDF set metadata in the .info file.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_6lhapdf_Info, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_6lhapdf_Info, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6python_6lhapdf_PDFUncertainty(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6python_6lhapdf_PDFUncertainty *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)o);
  new((void*)&(p->_obj)) struct LHAPDF::PDFUncertainty();
  return o;
}

static void __pyx_tp_dealloc_6python_6lhapdf_PDFUncertainty(PyObject *o) {
  struct __pyx_obj_6python_6lhapdf_PDFUncertainty *p = (struct __pyx_obj_6python_6lhapdf_PDFUncertainty *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6python_6lhapdf_PDFUncertainty) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_obj);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_central(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_7central_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errplus(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_7errplus_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errminus(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_8errminus_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errsymm(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_7errsymm_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_scale(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_5scale_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errplus_pdf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_11errplus_pdf_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errminus_pdf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_12errminus_pdf_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errsymm_pdf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_11errsymm_pdf_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errplus_par(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_11errplus_par_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errminus_par(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_12errminus_par_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errsymm_par(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_11errsymm_par_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_err_par(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_7err_par_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errparts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_8errparts_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_4errs_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errs_pdf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_8errs_pdf_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errmin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_6errmin_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errmax(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_6errmax_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errrange(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_8errrange_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errmin_pdf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_10errmin_pdf_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errmax_pdf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_10errmax_pdf_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errrange_pdf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_12errrange_pdf_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errmin_par(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_10errmin_par_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errmax_par(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_10errmax_par_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_14PDFUncertainty_errrange_par(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_12errrange_par_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_6python_6lhapdf_14PDFUncertainty_1__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6python_6lhapdf_14PDFUncertainty_1__repr__(self);
}

static PyMethodDef __pyx_methods_6python_6lhapdf_PDFUncertainty[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6python_6lhapdf_14PDFUncertainty_1__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_14PDFUncertainty_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_14PDFUncertainty_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_14PDFUncertainty_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_14PDFUncertainty_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6python_6lhapdf_PDFUncertainty[] = {
  {(char *)"central", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_central, 0, (char *)0, 0},
  {(char *)"errplus", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errplus, 0, (char *)0, 0},
  {(char *)"errminus", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errminus, 0, (char *)0, 0},
  {(char *)"errsymm", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errsymm, 0, (char *)0, 0},
  {(char *)"scale", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_scale, 0, (char *)0, 0},
  {(char *)"errplus_pdf", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errplus_pdf, 0, (char *)0, 0},
  {(char *)"errminus_pdf", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errminus_pdf, 0, (char *)0, 0},
  {(char *)"errsymm_pdf", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errsymm_pdf, 0, (char *)0, 0},
  {(char *)"errplus_par", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errplus_par, 0, (char *)0, 0},
  {(char *)"errminus_par", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errminus_par, 0, (char *)0, 0},
  {(char *)"errsymm_par", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errsymm_par, 0, (char *)0, 0},
  {(char *)"err_par", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_err_par, 0, (char *)0, 0},
  {(char *)"errparts", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errparts, 0, (char *)0, 0},
  {(char *)"errs", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errs, 0, (char *)0, 0},
  {(char *)"errs_pdf", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errs_pdf, 0, (char *)0, 0},
  {(char *)"errmin", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errmin, 0, (char *)0, 0},
  {(char *)"errmax", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errmax, 0, (char *)0, 0},
  {(char *)"errrange", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errrange, 0, (char *)0, 0},
  {(char *)"errmin_pdf", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errmin_pdf, 0, (char *)0, 0},
  {(char *)"errmax_pdf", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errmax_pdf, 0, (char *)0, 0},
  {(char *)"errrange_pdf", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errrange_pdf, 0, (char *)0, 0},
  {(char *)"errmin_par", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errmin_par, 0, (char *)0, 0},
  {(char *)"errmax_par", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errmax_par, 0, (char *)0, 0},
  {(char *)"errrange_par", __pyx_getprop_6python_6lhapdf_14PDFUncertainty_errrange_par, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6python_6lhapdf_PDFUncertainty_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6python_6lhapdf_PDFUncertainty},
  {Py_tp_repr, (void *)__pyx_pw_6python_6lhapdf_14PDFUncertainty_1__repr__},
  {Py_tp_doc, (void *)PyDoc_STR("    A simple struct containing components of a value with uncertainties calculated\n    from a PDF set.\n\n    Attributes are central, errplus, errminus, errsymm, and scale.\n    Extra attributes to return the separate PDF and parameter errors for combined\n    PDF+parameter sets are errplus_pdf, errminus_pdf, errsymm_pdf, and\n    errplus_par, errminus_par, errsymm_par. The full breakdown of quadrature\n    error components is in errparts.\n\n    Convenience attributes are provided for returning the maximum and minimum\n    values in the error range (as opposed to the size of deviations from the central\n    value) and for returning pairs of down/up errors and min/max values.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_6python_6lhapdf_PDFUncertainty},
  {Py_tp_getset, (void *)__pyx_getsets_6python_6lhapdf_PDFUncertainty},
  {Py_tp_new, (void *)__pyx_tp_new_6python_6lhapdf_PDFUncertainty},
  {0, 0},
};
static PyType_Spec __pyx_type_6python_6lhapdf_PDFUncertainty_spec = {
  "python.lhapdf.PDFUncertainty",
  sizeof(struct __pyx_obj_6python_6lhapdf_PDFUncertainty),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6python_6lhapdf_PDFUncertainty_slots,
};
#else

static PyTypeObject __pyx_type_6python_6lhapdf_PDFUncertainty = {
  PyVarObject_HEAD_INIT(0, 0)
  "python.lhapdf.""PDFUncertainty", /*tp_name*/
  sizeof(struct __pyx_obj_6python_6lhapdf_PDFUncertainty), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_6lhapdf_PDFUncertainty, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6python_6lhapdf_14PDFUncertainty_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("    A simple struct containing components of a value with uncertainties calculated\n    from a PDF set.\n\n    Attributes are central, errplus, errminus, errsymm, and scale.\n    Extra attributes to return the separate PDF and parameter errors for combined\n    PDF+parameter sets are errplus_pdf, errminus_pdf, errsymm_pdf, and\n    errplus_par, errminus_par, errsymm_par. The full breakdown of quadrature\n    error components is in errparts.\n\n    Convenience attributes are provided for returning the maximum and minimum\n    values in the error range (as opposed to the size of deviations from the central\n    value) and for returning pairs of down/up errors and min/max values.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_6lhapdf_PDFUncertainty, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6python_6lhapdf_PDFUncertainty, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_6lhapdf_PDFUncertainty, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6python_6lhapdf_PDFErrInfo(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6python_6lhapdf_PDFErrInfo *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)o);
  new((void*)&(p->_obj)) struct LHAPDF::PDFErrInfo();
  return o;
}

static void __pyx_tp_dealloc_6python_6lhapdf_PDFErrInfo(PyObject *o) {
  struct __pyx_obj_6python_6lhapdf_PDFErrInfo *p = (struct __pyx_obj_6python_6lhapdf_PDFErrInfo *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6python_6lhapdf_PDFErrInfo) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_obj);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_6python_6lhapdf_10PDFErrInfo_qparts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_10PDFErrInfo_6qparts_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_10PDFErrInfo_confLevel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_10PDFErrInfo_9confLevel_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_10PDFErrInfo_errType(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_10PDFErrInfo_7errType_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_10PDFErrInfo_coreType(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_10PDFErrInfo_8coreType_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_10PDFErrInfo_qpartNames(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_10PDFErrInfo_10qpartNames_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_10PDFErrInfo_nmemCore(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_10PDFErrInfo_8nmemCore_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_10PDFErrInfo_nmemPar(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_10PDFErrInfo_7nmemPar_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_6python_6lhapdf_10PDFErrInfo_1__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6python_6lhapdf_10PDFErrInfo_1__repr__(self);
}

static PyMethodDef __pyx_methods_6python_6lhapdf_PDFErrInfo[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6python_6lhapdf_10PDFErrInfo_1__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_10PDFErrInfo_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_10PDFErrInfo_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_10PDFErrInfo_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_10PDFErrInfo_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6python_6lhapdf_PDFErrInfo[] = {
  {(char *)"qparts", __pyx_getprop_6python_6lhapdf_10PDFErrInfo_qparts, 0, (char *)0, 0},
  {(char *)"confLevel", __pyx_getprop_6python_6lhapdf_10PDFErrInfo_confLevel, 0, (char *)0, 0},
  {(char *)"errType", __pyx_getprop_6python_6lhapdf_10PDFErrInfo_errType, 0, (char *)0, 0},
  {(char *)"coreType", __pyx_getprop_6python_6lhapdf_10PDFErrInfo_coreType, 0, (char *)0, 0},
  {(char *)"qpartNames", __pyx_getprop_6python_6lhapdf_10PDFErrInfo_qpartNames, 0, (char *)0, 0},
  {(char *)"nmemCore", __pyx_getprop_6python_6lhapdf_10PDFErrInfo_nmemCore, 0, (char *)0, 0},
  {(char *)"nmemPar", __pyx_getprop_6python_6lhapdf_10PDFErrInfo_nmemPar, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6python_6lhapdf_PDFErrInfo_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6python_6lhapdf_PDFErrInfo},
  {Py_tp_repr, (void *)__pyx_pw_6python_6lhapdf_10PDFErrInfo_1__repr__},
  {Py_tp_doc, (void *)PyDoc_STR("    A struct giving the breakdown of error computations across the PDF error-set\n    members. The general error-type string is parsed into quadrature components,\n    each of which is a signed pair computed via one-sided, symmetrised, or enveloped\n    bands from subsets of PDF members wrt the nominal.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_6python_6lhapdf_PDFErrInfo},
  {Py_tp_getset, (void *)__pyx_getsets_6python_6lhapdf_PDFErrInfo},
  {Py_tp_new, (void *)__pyx_tp_new_6python_6lhapdf_PDFErrInfo},
  {0, 0},
};
static PyType_Spec __pyx_type_6python_6lhapdf_PDFErrInfo_spec = {
  "python.lhapdf.PDFErrInfo",
  sizeof(struct __pyx_obj_6python_6lhapdf_PDFErrInfo),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6python_6lhapdf_PDFErrInfo_slots,
};
#else

static PyTypeObject __pyx_type_6python_6lhapdf_PDFErrInfo = {
  PyVarObject_HEAD_INIT(0, 0)
  "python.lhapdf.""PDFErrInfo", /*tp_name*/
  sizeof(struct __pyx_obj_6python_6lhapdf_PDFErrInfo), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_6lhapdf_PDFErrInfo, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6python_6lhapdf_10PDFErrInfo_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("    A struct giving the breakdown of error computations across the PDF error-set\n    members. The general error-type string is parsed into quadrature components,\n    each of which is a signed pair computed via one-sided, symmetrised, or enveloped\n    bands from subsets of PDF members wrt the nominal.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_6lhapdf_PDFErrInfo, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6python_6lhapdf_PDFErrInfo, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_6lhapdf_PDFErrInfo, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6python_6lhapdf_PDFSet __pyx_vtable_6python_6lhapdf_PDFSet;

static PyObject *__pyx_tp_new_6python_6lhapdf_PDFSet(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6python_6lhapdf_PDFSet *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6python_6lhapdf_PDFSet *)o);
  p->__pyx_vtab = __pyx_vtabptr_6python_6lhapdf_PDFSet;
  return o;
}

static void __pyx_tp_dealloc_6python_6lhapdf_PDFSet(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6python_6lhapdf_PDFSet) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6python_6lhapdf_6PDFSet_1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_6python_6lhapdf_6PDFSet_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_6PDFSet_4size_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_6PDFSet_errSize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_6PDFSet_7errSize_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_6PDFSet_errorSize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_6PDFSet_9errorSize_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_6PDFSet_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_6PDFSet_4name_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_6PDFSet_description(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_6PDFSet_11description_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_6PDFSet_lhapdfID(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_6PDFSet_8lhapdfID_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_6PDFSet_dataversion(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_6PDFSet_11dataversion_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_6PDFSet_errorType(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_6PDFSet_9errorType_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_6PDFSet_errorInfo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_6PDFSet_9errorInfo_1__get__(o);
}

static PyObject *__pyx_getprop_6python_6lhapdf_6PDFSet_errorConfLevel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_6PDFSet_14errorConfLevel_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_6python_6lhapdf_6PDFSet_29__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6python_6lhapdf_6PDFSet_29__repr__(self);
}

static PyMethodDef __pyx_methods_6python_6lhapdf_PDFSet[] = {
  {"mkPDF", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_5mkPDF, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_4mkPDF},
  {"mkPDFs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_7mkPDFs, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_6mkPDFs},
  {"keys", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_9keys, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_8keys},
  {"keys_local", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_11keys_local, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_10keys_local},
  {"has_key", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_13has_key, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_12has_key},
  {"has_key_local", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_15has_key_local, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_14has_key_local},
  {"get_entry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_17get_entry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_16get_entry},
  {"_print", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_19_print, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_18_print},
  {"uncertainty", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_21uncertainty, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_20uncertainty},
  {"correlation", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_23correlation, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_22correlation},
  {"randomValueFromHessian", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_25randomValueFromHessian, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_24randomValueFromHessian},
  {"_checkPdfType", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_27_checkPdfType, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_26_checkPdfType},
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6python_6lhapdf_6PDFSet_29__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_31__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_30__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6PDFSet_33__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6PDFSet_32__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6python_6lhapdf_PDFSet[] = {
  {(char *)"size", __pyx_getprop_6python_6lhapdf_6PDFSet_size, 0, (char *)PyDoc_STR("The total number of members in this set."), 0},
  {(char *)"errSize", __pyx_getprop_6python_6lhapdf_6PDFSet_errSize, 0, (char *)PyDoc_STR("The number of error members in this set."), 0},
  {(char *)"errorSize", __pyx_getprop_6python_6lhapdf_6PDFSet_errorSize, 0, (char *)PyDoc_STR("The number of error members in this set."), 0},
  {(char *)"name", __pyx_getprop_6python_6lhapdf_6PDFSet_name, 0, (char *)PyDoc_STR("Name of this PDF's containing set."), 0},
  {(char *)"description", __pyx_getprop_6python_6lhapdf_6PDFSet_description, 0, (char *)PyDoc_STR("Description of this PDF's set."), 0},
  {(char *)"lhapdfID", __pyx_getprop_6python_6lhapdf_6PDFSet_lhapdfID, 0, (char *)PyDoc_STR("First LHAPDF global index in this PDF set."), 0},
  {(char *)"dataversion", __pyx_getprop_6python_6lhapdf_6PDFSet_dataversion, 0, (char *)PyDoc_STR("Version of this PDF set's data files."), 0},
  {(char *)"errorType", __pyx_getprop_6python_6lhapdf_6PDFSet_errorType, 0, (char *)PyDoc_STR("Type of error treatment in this PDF set."), 0},
  {(char *)"errorInfo", __pyx_getprop_6python_6lhapdf_6PDFSet_errorInfo, 0, (char *)PyDoc_STR("Type of error treatment in this PDF set."), 0},
  {(char *)"errorConfLevel", __pyx_getprop_6python_6lhapdf_6PDFSet_errorConfLevel, 0, (char *)PyDoc_STR("Confidence level of error treatment in percent, if one is defined for this set."), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6python_6lhapdf_PDFSet_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6python_6lhapdf_PDFSet},
  {Py_tp_repr, (void *)__pyx_pw_6python_6lhapdf_6PDFSet_29__repr__},
  {Py_sq_length, (void *)__pyx_pw_6python_6lhapdf_6PDFSet_3__len__},
  {Py_mp_length, (void *)__pyx_pw_6python_6lhapdf_6PDFSet_3__len__},
  {Py_tp_doc, (void *)PyDoc_STR("    A collection of PDFs with related fits, most typically a central PDF and a\n    set of extra ones representing different aspects of systematic errors in the\n    fit.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_6python_6lhapdf_PDFSet},
  {Py_tp_getset, (void *)__pyx_getsets_6python_6lhapdf_PDFSet},
  {Py_tp_new, (void *)__pyx_tp_new_6python_6lhapdf_PDFSet},
  {0, 0},
};
static PyType_Spec __pyx_type_6python_6lhapdf_PDFSet_spec = {
  "python.lhapdf.PDFSet",
  sizeof(struct __pyx_obj_6python_6lhapdf_PDFSet),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6python_6lhapdf_PDFSet_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_PDFSet = {
  __pyx_pw_6python_6lhapdf_6PDFSet_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PDFSet = {
  __pyx_pw_6python_6lhapdf_6PDFSet_3__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6python_6lhapdf_PDFSet = {
  PyVarObject_HEAD_INIT(0, 0)
  "python.lhapdf.""PDFSet", /*tp_name*/
  sizeof(struct __pyx_obj_6python_6lhapdf_PDFSet), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_6lhapdf_PDFSet, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6python_6lhapdf_6PDFSet_29__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_PDFSet, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PDFSet, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("    A collection of PDFs with related fits, most typically a central PDF and a\n    set of extra ones representing different aspects of systematic errors in the\n    fit.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_6lhapdf_PDFSet, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6python_6lhapdf_PDFSet, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_6lhapdf_PDFSet, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6python_6lhapdf_PDFInfo __pyx_vtable_6python_6lhapdf_PDFInfo;

static PyObject *__pyx_tp_new_6python_6lhapdf_PDFInfo(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_6lhapdf_PDFInfo *p;
  PyObject *o = __pyx_tp_new_6python_6lhapdf_Info(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6python_6lhapdf_PDFInfo *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6python_6lhapdf_Info*)__pyx_vtabptr_6python_6lhapdf_PDFInfo;
  p->_parent = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6python_6lhapdf_PDFInfo(PyObject *o) {
  struct __pyx_obj_6python_6lhapdf_PDFInfo *p = (struct __pyx_obj_6python_6lhapdf_PDFInfo *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6python_6lhapdf_PDFInfo) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_parent);
  __pyx_tp_dealloc_6python_6lhapdf_Info(o);
}

static int __pyx_tp_traverse_6python_6lhapdf_PDFInfo(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_6lhapdf_PDFInfo *p = (struct __pyx_obj_6python_6lhapdf_PDFInfo *)o;
  e = ((likely(__pyx_ptype_6python_6lhapdf_Info)) ? ((__pyx_ptype_6python_6lhapdf_Info->tp_traverse) ? __pyx_ptype_6python_6lhapdf_Info->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6python_6lhapdf_PDFInfo)); if (e) return e;
  if (p->_parent) {
    e = (*v)(p->_parent, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_6lhapdf_PDFInfo(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6python_6lhapdf_PDFInfo *p = (struct __pyx_obj_6python_6lhapdf_PDFInfo *)o;
  if (likely(__pyx_ptype_6python_6lhapdf_Info)) { if (__pyx_ptype_6python_6lhapdf_Info->tp_clear) __pyx_ptype_6python_6lhapdf_Info->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6python_6lhapdf_PDFInfo);
  tmp = ((PyObject*)p->_parent);
  p->_parent = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_6python_6lhapdf_7PDFInfo_1__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6python_6lhapdf_7PDFInfo_1__repr__(self);
}

static PyMethodDef __pyx_methods_6python_6lhapdf_PDFInfo[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6python_6lhapdf_7PDFInfo_1__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_7PDFInfo_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_7PDFInfo_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_7PDFInfo_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_7PDFInfo_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6python_6lhapdf_PDFInfo_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6python_6lhapdf_PDFInfo},
  {Py_tp_repr, (void *)__pyx_pw_6python_6lhapdf_7PDFInfo_1__repr__},
  {Py_tp_doc, (void *)PyDoc_STR("    A class handling the metadata that defines a given PDF.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6python_6lhapdf_PDFInfo},
  {Py_tp_clear, (void *)__pyx_tp_clear_6python_6lhapdf_PDFInfo},
  {Py_tp_methods, (void *)__pyx_methods_6python_6lhapdf_PDFInfo},
  {Py_tp_new, (void *)__pyx_tp_new_6python_6lhapdf_PDFInfo},
  {0, 0},
};
static PyType_Spec __pyx_type_6python_6lhapdf_PDFInfo_spec = {
  "python.lhapdf.PDFInfo",
  sizeof(struct __pyx_obj_6python_6lhapdf_PDFInfo),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_6python_6lhapdf_PDFInfo_slots,
};
#else

static PyTypeObject __pyx_type_6python_6lhapdf_PDFInfo = {
  PyVarObject_HEAD_INIT(0, 0)
  "python.lhapdf.""PDFInfo", /*tp_name*/
  sizeof(struct __pyx_obj_6python_6lhapdf_PDFInfo), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_6lhapdf_PDFInfo, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6python_6lhapdf_7PDFInfo_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("    A class handling the metadata that defines a given PDF.\n    "), /*tp_doc*/
  __pyx_tp_traverse_6python_6lhapdf_PDFInfo, /*tp_traverse*/
  __pyx_tp_clear_6python_6lhapdf_PDFInfo, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_6lhapdf_PDFInfo, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_6lhapdf_PDFInfo, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6python_6lhapdf_AlphaS __pyx_vtable_6python_6lhapdf_AlphaS;

static PyObject *__pyx_tp_new_6python_6lhapdf_AlphaS(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6python_6lhapdf_AlphaS *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6python_6lhapdf_AlphaS *)o);
  p->__pyx_vtab = __pyx_vtabptr_6python_6lhapdf_AlphaS;
  p->_parent = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6python_6lhapdf_AlphaS(PyObject *o) {
  struct __pyx_obj_6python_6lhapdf_AlphaS *p = (struct __pyx_obj_6python_6lhapdf_AlphaS *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6python_6lhapdf_AlphaS) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_parent);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_6python_6lhapdf_AlphaS(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_6lhapdf_AlphaS *p = (struct __pyx_obj_6python_6lhapdf_AlphaS *)o;
  if (p->_parent) {
    e = (*v)(p->_parent, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_6lhapdf_AlphaS(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6python_6lhapdf_AlphaS *p = (struct __pyx_obj_6python_6lhapdf_AlphaS *)o;
  tmp = ((PyObject*)p->_parent);
  p->_parent = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6python_6lhapdf_6AlphaS_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6python_6lhapdf_6AlphaS_4type_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_6python_6lhapdf_6AlphaS_31__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6python_6lhapdf_6AlphaS_31__repr__(self);
}

static PyMethodDef __pyx_methods_6python_6lhapdf_AlphaS[] = {
  {"alphasQ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_1alphasQ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_alphasQ},
  {"alphasQ2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_3alphasQ2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_2alphasQ2},
  {"numFlavorsQ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_5numFlavorsQ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_4numFlavorsQ},
  {"numFlavorsQ2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_7numFlavorsQ2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_6numFlavorsQ2},
  {"quarkMass", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_9quarkMass, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_8quarkMass},
  {"setQuarkMass", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_11setQuarkMass, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_10setQuarkMass},
  {"quarkThreshold", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_13quarkThreshold, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_12quarkThreshold},
  {"setQuarkThreshold", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_15setQuarkThreshold, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_14setQuarkThreshold},
  {"orderQCD", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_17orderQCD, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_16orderQCD},
  {"setOrderQCD", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_19setOrderQCD, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_18setOrderQCD},
  {"setMZ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_21setMZ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_20setMZ},
  {"setAlphaSMZ", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_23setAlphaSMZ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_22setAlphaSMZ},
  {"setLambda", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_25setLambda, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_24setLambda},
  {"setFlavorScheme", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_27setFlavorScheme, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_26setFlavorScheme},
  {"flavorScheme", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_29flavorScheme, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_28flavorScheme},
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6python_6lhapdf_6AlphaS_31__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_33__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_32__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6python_6lhapdf_6AlphaS_35__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6python_6lhapdf_6AlphaS_34__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6python_6lhapdf_AlphaS[] = {
  {(char *)"type", __pyx_getprop_6python_6lhapdf_6AlphaS_type, 0, (char *)PyDoc_STR("Get the method of alpha_s calculation as a string"), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6python_6lhapdf_AlphaS_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6python_6lhapdf_AlphaS},
  {Py_tp_repr, (void *)__pyx_pw_6python_6lhapdf_6AlphaS_31__repr__},
  {Py_tp_doc, (void *)PyDoc_STR("    Interface to alpha_s calculations using various schemes.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6python_6lhapdf_AlphaS},
  {Py_tp_clear, (void *)__pyx_tp_clear_6python_6lhapdf_AlphaS},
  {Py_tp_methods, (void *)__pyx_methods_6python_6lhapdf_AlphaS},
  {Py_tp_getset, (void *)__pyx_getsets_6python_6lhapdf_AlphaS},
  {Py_tp_new, (void *)__pyx_tp_new_6python_6lhapdf_AlphaS},
  {0, 0},
};
static PyType_Spec __pyx_type_6python_6lhapdf_AlphaS_spec = {
  "python.lhapdf.AlphaS",
  sizeof(struct __pyx_obj_6python_6lhapdf_AlphaS),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_6python_6lhapdf_AlphaS_slots,
};
#else

static PyTypeObject __pyx_type_6python_6lhapdf_AlphaS = {
  PyVarObject_HEAD_INIT(0, 0)
  "python.lhapdf.""AlphaS", /*tp_name*/
  sizeof(struct __pyx_obj_6python_6lhapdf_AlphaS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_6lhapdf_AlphaS, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6python_6lhapdf_6AlphaS_31__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("    Interface to alpha_s calculations using various schemes.\n    "), /*tp_doc*/
  __pyx_tp_traverse_6python_6lhapdf_AlphaS, /*tp_traverse*/
  __pyx_tp_clear_6python_6lhapdf_AlphaS, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_6lhapdf_AlphaS, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6python_6lhapdf_AlphaS, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_6lhapdf_AlphaS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static int __pyx_tp_traverse___Pyx_EnumMeta(PyObject *o, visitproc v, void *a) {
  int e;
  if (!(&PyType_Type)->tp_traverse); else { e = (&PyType_Type)->tp_traverse(o,v,a); if (e) return e; }
  return 0;
}

static int __pyx_tp_clear___Pyx_EnumMeta(PyObject *o) {
  if (!(&PyType_Type)->tp_clear); else (&PyType_Type)->tp_clear(o);
  return 0;
}
static PyObject *__pyx_sq_item___Pyx_EnumMeta(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods___Pyx_EnumMeta[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8EnumBase_14__Pyx_EnumMeta_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8EnumBase_14__Pyx_EnumMeta_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __Pyx_EnumMeta_slots[] = {
  {Py_sq_item, (void *)__pyx_sq_item___Pyx_EnumMeta},
  {Py_mp_subscript, (void *)__pyx_pw_8EnumBase_14__Pyx_EnumMeta_5__getitem__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse___Pyx_EnumMeta},
  {Py_tp_clear, (void *)__pyx_tp_clear___Pyx_EnumMeta},
  {Py_tp_iter, (void *)__pyx_pw_8EnumBase_14__Pyx_EnumMeta_3__iter__},
  {Py_tp_methods, (void *)__pyx_methods___Pyx_EnumMeta},
  {Py_tp_init, (void *)__pyx_pw_8EnumBase_14__Pyx_EnumMeta_1__init__},
  {0, 0},
};
static PyType_Spec __Pyx_EnumMeta_spec = {
  "python.lhapdf.__Pyx_EnumMeta",
  sizeof(struct __pyx_obj___Pyx_EnumMeta),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __Pyx_EnumMeta_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence___Pyx_EnumMeta = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item___Pyx_EnumMeta, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___Pyx_EnumMeta = {
  0, /*mp_length*/
  __pyx_pw_8EnumBase_14__Pyx_EnumMeta_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __Pyx_EnumMeta = {
  PyVarObject_HEAD_INIT(0, 0)
  "python.lhapdf.""__Pyx_EnumMeta", /*tp_name*/
  sizeof(struct __pyx_obj___Pyx_EnumMeta), /*tp_basicsize*/
  0, /*tp_itemsize*/
  0, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence___Pyx_EnumMeta, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___Pyx_EnumMeta, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse___Pyx_EnumMeta, /*tp_traverse*/
  __pyx_tp_clear___Pyx_EnumMeta, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8EnumBase_14__Pyx_EnumMeta_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods___Pyx_EnumMeta, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_8EnumBase_14__Pyx_EnumMeta_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  0, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
    {&__pyx_n_s_ABOTTOM, __pyx_k_ABOTTOM, sizeof(__pyx_k_ABOTTOM), 0, 0, 1, 1},
    {&__pyx_n_s_ACHARM, __pyx_k_ACHARM, sizeof(__pyx_k_ACHARM), 0, 0, 1, 1},
    {&__pyx_n_s_ADOWN, __pyx_k_ADOWN, sizeof(__pyx_k_ADOWN), 0, 0, 1, 1},
    {&__pyx_n_s_ASTRANGE, __pyx_k_ASTRANGE, sizeof(__pyx_k_ASTRANGE), 0, 0, 1, 1},
    {&__pyx_n_s_ATOP, __pyx_k_ATOP, sizeof(__pyx_k_ATOP), 0, 0, 1, 1},
    {&__pyx_n_s_AUP, __pyx_k_AUP, sizeof(__pyx_k_AUP), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS, __pyx_k_AlphaS, sizeof(__pyx_k_AlphaS), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS___reduce_cython, __pyx_k_AlphaS___reduce_cython, sizeof(__pyx_k_AlphaS___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS___setstate_cython, __pyx_k_AlphaS___setstate_cython, sizeof(__pyx_k_AlphaS___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_alphasQ, __pyx_k_AlphaS_alphasQ, sizeof(__pyx_k_AlphaS_alphasQ), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_alphasQ2, __pyx_k_AlphaS_alphasQ2, sizeof(__pyx_k_AlphaS_alphasQ2), 0, 0, 1, 1},
    {&__pyx_kp_s_AlphaS_d_loop_aS_MZ_3f, __pyx_k_AlphaS_d_loop_aS_MZ_3f, sizeof(__pyx_k_AlphaS_d_loop_aS_MZ_3f), 0, 0, 1, 0},
    {&__pyx_n_s_AlphaS_flavorScheme, __pyx_k_AlphaS_flavorScheme, sizeof(__pyx_k_AlphaS_flavorScheme), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_numFlavorsQ, __pyx_k_AlphaS_numFlavorsQ, sizeof(__pyx_k_AlphaS_numFlavorsQ), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_numFlavorsQ2, __pyx_k_AlphaS_numFlavorsQ2, sizeof(__pyx_k_AlphaS_numFlavorsQ2), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_orderQCD, __pyx_k_AlphaS_orderQCD, sizeof(__pyx_k_AlphaS_orderQCD), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_quarkMass, __pyx_k_AlphaS_quarkMass, sizeof(__pyx_k_AlphaS_quarkMass), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_quarkThreshold, __pyx_k_AlphaS_quarkThreshold, sizeof(__pyx_k_AlphaS_quarkThreshold), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_setAlphaSMZ, __pyx_k_AlphaS_setAlphaSMZ, sizeof(__pyx_k_AlphaS_setAlphaSMZ), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_setFlavorScheme, __pyx_k_AlphaS_setFlavorScheme, sizeof(__pyx_k_AlphaS_setFlavorScheme), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_setLambda, __pyx_k_AlphaS_setLambda, sizeof(__pyx_k_AlphaS_setLambda), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_setMZ, __pyx_k_AlphaS_setMZ, sizeof(__pyx_k_AlphaS_setMZ), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_setOrderQCD, __pyx_k_AlphaS_setOrderQCD, sizeof(__pyx_k_AlphaS_setOrderQCD), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_setQuarkMass, __pyx_k_AlphaS_setQuarkMass, sizeof(__pyx_k_AlphaS_setQuarkMass), 0, 0, 1, 1},
    {&__pyx_n_s_AlphaS_setQuarkThreshold, __pyx_k_AlphaS_setQuarkThreshold, sizeof(__pyx_k_AlphaS_setQuarkThreshold), 0, 0, 1, 1},
    {&__pyx_n_s_BOTTOM, __pyx_k_BOTTOM, sizeof(__pyx_k_BOTTOM), 0, 0, 1, 1},
    {&__pyx_n_s_CHARM, __pyx_k_CHARM, sizeof(__pyx_k_CHARM), 0, 0, 1, 1},
    {&__pyx_n_s_DOWN, __pyx_k_DOWN, sizeof(__pyx_k_DOWN), 0, 0, 1, 1},
    {&__pyx_n_s_EnumBase, __pyx_k_EnumBase, sizeof(__pyx_k_EnumBase), 0, 0, 1, 1},
    {&__pyx_n_s_EnumType, __pyx_k_EnumType, sizeof(__pyx_k_EnumType), 0, 0, 1, 1},
    {&__pyx_n_s_FIXED, __pyx_k_FIXED, sizeof(__pyx_k_FIXED), 0, 0, 1, 1},
    {&__pyx_n_s_FlavorScheme, __pyx_k_FlavorScheme, sizeof(__pyx_k_FlavorScheme), 0, 0, 1, 1},
    {&__pyx_n_s_GLUON, __pyx_k_GLUON, sizeof(__pyx_k_GLUON), 0, 0, 1, 1},
    {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
    {&__pyx_n_s_Info, __pyx_k_Info, sizeof(__pyx_k_Info), 0, 0, 1, 1},
    {&__pyx_n_s_Info___reduce_cython, __pyx_k_Info___reduce_cython, sizeof(__pyx_k_Info___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Info___setstate_cython, __pyx_k_Info___setstate_cython, sizeof(__pyx_k_Info___setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_s_Info_d_keys_d_local, __pyx_k_Info_d_keys_d_local, sizeof(__pyx_k_Info_d_keys_d_local), 0, 0, 1, 0},
    {&__pyx_n_s_Info_get_entry, __pyx_k_Info_get_entry, sizeof(__pyx_k_Info_get_entry), 0, 0, 1, 1},
    {&__pyx_n_s_Info_has_key, __pyx_k_Info_has_key, sizeof(__pyx_k_Info_has_key), 0, 0, 1, 1},
    {&__pyx_n_s_Info_has_key_local, __pyx_k_Info_has_key_local, sizeof(__pyx_k_Info_has_key_local), 0, 0, 1, 1},
    {&__pyx_n_s_Info_keys, __pyx_k_Info_keys, sizeof(__pyx_k_Info_keys), 0, 0, 1, 1},
    {&__pyx_n_s_Info_keys_local, __pyx_k_Info_keys_local, sizeof(__pyx_k_Info_keys_local), 0, 0, 1, 1},
    {&__pyx_n_s_Info_set_entry, __pyx_k_Info_set_entry, sizeof(__pyx_k_Info_set_entry), 0, 0, 1, 1},
    {&__pyx_n_s_IntEnum, __pyx_k_IntEnum, sizeof(__pyx_k_IntEnum), 0, 0, 1, 1},
    {&__pyx_n_s_IntFlag, __pyx_k_IntFlag, sizeof(__pyx_k_IntFlag), 0, 0, 1, 1},
    {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
    {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
    {&__pyx_n_s_PDF, __pyx_k_PDF, sizeof(__pyx_k_PDF), 0, 0, 1, 1},
    {&__pyx_kp_s_PDFErrInfo, __pyx_k_PDFErrInfo, sizeof(__pyx_k_PDFErrInfo), 0, 0, 1, 0},
    {&__pyx_n_s_PDFErrInfo_2, __pyx_k_PDFErrInfo_2, sizeof(__pyx_k_PDFErrInfo_2), 0, 0, 1, 1},
    {&__pyx_n_s_PDFErrInfo___reduce_cython, __pyx_k_PDFErrInfo___reduce_cython, sizeof(__pyx_k_PDFErrInfo___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PDFErrInfo___setstate_cython, __pyx_k_PDFErrInfo___setstate_cython, sizeof(__pyx_k_PDFErrInfo___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PDFInfo, __pyx_k_PDFInfo, sizeof(__pyx_k_PDFInfo), 0, 0, 1, 1},
    {&__pyx_n_s_PDFInfo___reduce_cython, __pyx_k_PDFInfo___reduce_cython, sizeof(__pyx_k_PDFInfo___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PDFInfo___setstate_cython, __pyx_k_PDFInfo___setstate_cython, sizeof(__pyx_k_PDFInfo___setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_s_PDFInfo_d_keys_d_local, __pyx_k_PDFInfo_d_keys_d_local, sizeof(__pyx_k_PDFInfo_d_keys_d_local), 0, 0, 1, 0},
    {&__pyx_n_s_PDFSet, __pyx_k_PDFSet, sizeof(__pyx_k_PDFSet), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet___reduce_cython, __pyx_k_PDFSet___reduce_cython, sizeof(__pyx_k_PDFSet___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet___setstate_cython, __pyx_k_PDFSet___setstate_cython, sizeof(__pyx_k_PDFSet___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet__checkPdfType, __pyx_k_PDFSet__checkPdfType, sizeof(__pyx_k_PDFSet__checkPdfType), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet__print, __pyx_k_PDFSet__print, sizeof(__pyx_k_PDFSet__print), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet_correlation, __pyx_k_PDFSet_correlation, sizeof(__pyx_k_PDFSet_correlation), 0, 0, 1, 1},
    {&__pyx_kp_s_PDFSet_d_vars_d_keys_d_local, __pyx_k_PDFSet_d_vars_d_keys_d_local, sizeof(__pyx_k_PDFSet_d_vars_d_keys_d_local), 0, 0, 1, 0},
    {&__pyx_n_s_PDFSet_get_entry, __pyx_k_PDFSet_get_entry, sizeof(__pyx_k_PDFSet_get_entry), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet_has_key, __pyx_k_PDFSet_has_key, sizeof(__pyx_k_PDFSet_has_key), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet_has_key_local, __pyx_k_PDFSet_has_key_local, sizeof(__pyx_k_PDFSet_has_key_local), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet_keys, __pyx_k_PDFSet_keys, sizeof(__pyx_k_PDFSet_keys), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet_keys_local, __pyx_k_PDFSet_keys_local, sizeof(__pyx_k_PDFSet_keys_local), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet_mkPDF, __pyx_k_PDFSet_mkPDF, sizeof(__pyx_k_PDFSet_mkPDF), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet_mkPDFs, __pyx_k_PDFSet_mkPDFs, sizeof(__pyx_k_PDFSet_mkPDFs), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet_randomValueFromHessian, __pyx_k_PDFSet_randomValueFromHessian, sizeof(__pyx_k_PDFSet_randomValueFromHessian), 0, 0, 1, 1},
    {&__pyx_n_s_PDFSet_uncertainty, __pyx_k_PDFSet_uncertainty, sizeof(__pyx_k_PDFSet_uncertainty), 0, 0, 1, 1},
    {&__pyx_n_s_PDFUncertainty, __pyx_k_PDFUncertainty, sizeof(__pyx_k_PDFUncertainty), 0, 0, 1, 1},
    {&__pyx_kp_s_PDFUncertainty_2_1e_2_1e_2_1e_d, __pyx_k_PDFUncertainty_2_1e_2_1e_2_1e_d, sizeof(__pyx_k_PDFUncertainty_2_1e_2_1e_2_1e_d), 0, 0, 1, 0},
    {&__pyx_n_s_PDFUncertainty___reduce_cython, __pyx_k_PDFUncertainty___reduce_cython, sizeof(__pyx_k_PDFUncertainty___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PDFUncertainty___setstate_cython, __pyx_k_PDFUncertainty___setstate_cython, sizeof(__pyx_k_PDFUncertainty___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PDF___reduce_cython, __pyx_k_PDF___reduce_cython, sizeof(__pyx_k_PDF___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PDF___setstate_cython, __pyx_k_PDF___setstate_cython, sizeof(__pyx_k_PDF___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PDF__print, __pyx_k_PDF__print, sizeof(__pyx_k_PDF__print), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_alphasQ, __pyx_k_PDF_alphasQ, sizeof(__pyx_k_PDF_alphasQ), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_alphasQ2, __pyx_k_PDF_alphasQ2, sizeof(__pyx_k_PDF_alphasQ2), 0, 0, 1, 1},
    {&__pyx_kp_s_PDF_d_LHAPDF_ID_d_d_flavors_x_2, __pyx_k_PDF_d_LHAPDF_ID_d_d_flavors_x_2, sizeof(__pyx_k_PDF_d_LHAPDF_ID_d_d_flavors_x_2), 0, 0, 1, 0},
    {&__pyx_n_s_PDF_flavors, __pyx_k_PDF_flavors, sizeof(__pyx_k_PDF_flavors), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_hasFlavor, __pyx_k_PDF_hasFlavor, sizeof(__pyx_k_PDF_hasFlavor), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_inRangeQ, __pyx_k_PDF_inRangeQ, sizeof(__pyx_k_PDF_inRangeQ), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_inRangeQ2, __pyx_k_PDF_inRangeQ2, sizeof(__pyx_k_PDF_inRangeQ2), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_inRangeX, __pyx_k_PDF_inRangeX, sizeof(__pyx_k_PDF_inRangeX), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_inRangeXQ, __pyx_k_PDF_inRangeXQ, sizeof(__pyx_k_PDF_inRangeXQ), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_inRangeXQ2, __pyx_k_PDF_inRangeXQ2, sizeof(__pyx_k_PDF_inRangeXQ2), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_info, __pyx_k_PDF_info, sizeof(__pyx_k_PDF_info), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_quarkMass, __pyx_k_PDF_quarkMass, sizeof(__pyx_k_PDF_quarkMass), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_quarkThreshold, __pyx_k_PDF_quarkThreshold, sizeof(__pyx_k_PDF_quarkThreshold), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_set, __pyx_k_PDF_set, sizeof(__pyx_k_PDF_set), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_xfxQ, __pyx_k_PDF_xfxQ, sizeof(__pyx_k_PDF_xfxQ), 0, 0, 1, 1},
    {&__pyx_n_s_PDF_xfxQ2, __pyx_k_PDF_xfxQ2, sizeof(__pyx_k_PDF_xfxQ2), 0, 0, 1, 1},
    {&__pyx_n_s_PIDCode, __pyx_k_PIDCode, sizeof(__pyx_k_PIDCode), 0, 0, 1, 1},
    {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
    {&__pyx_kp_s_Pickling_of_struct_members_such, __pyx_k_Pickling_of_struct_members_such, sizeof(__pyx_k_Pickling_of_struct_members_such), 0, 0, 1, 0},
    {&__pyx_n_s_Pyx_EnumBase, __pyx_k_Pyx_EnumBase, sizeof(__pyx_k_Pyx_EnumBase), 0, 0, 1, 1},
    {&__pyx_n_s_Pyx_EnumBase___new, __pyx_k_Pyx_EnumBase___new, sizeof(__pyx_k_Pyx_EnumBase___new), 0, 0, 1, 1},
    {&__pyx_n_s_Pyx_EnumBase___repr, __pyx_k_Pyx_EnumBase___repr, sizeof(__pyx_k_Pyx_EnumBase___repr), 0, 0, 1, 1},
    {&__pyx_n_s_Pyx_EnumBase___str, __pyx_k_Pyx_EnumBase___str, sizeof(__pyx_k_Pyx_EnumBase___str), 0, 0, 1, 1},
    {&__pyx_n_s_Pyx_EnumMeta___reduce_cython, __pyx_k_Pyx_EnumMeta___reduce_cython, sizeof(__pyx_k_Pyx_EnumMeta___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Pyx_EnumMeta___setstate_cython, __pyx_k_Pyx_EnumMeta___setstate_cython, sizeof(__pyx_k_Pyx_EnumMeta___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Pyx_FlagBase, __pyx_k_Pyx_FlagBase, sizeof(__pyx_k_Pyx_FlagBase), 0, 0, 1, 1},
    {&__pyx_n_s_Pyx_FlagBase___new, __pyx_k_Pyx_FlagBase___new, sizeof(__pyx_k_Pyx_FlagBase___new), 0, 0, 1, 1},
    {&__pyx_n_s_Pyx_FlagBase___repr, __pyx_k_Pyx_FlagBase___repr, sizeof(__pyx_k_Pyx_FlagBase___repr), 0, 0, 1, 1},
    {&__pyx_n_s_Pyx_FlagBase___str, __pyx_k_Pyx_FlagBase___str, sizeof(__pyx_k_Pyx_FlagBase___str), 0, 0, 1, 1},
    {&__pyx_n_s_Q, __pyx_k_Q, sizeof(__pyx_k_Q), 0, 0, 1, 1},
    {&__pyx_n_s_Q2, __pyx_k_Q2, sizeof(__pyx_k_Q2), 0, 0, 1, 1},
    {&__pyx_n_s_STRANGE, __pyx_k_STRANGE, sizeof(__pyx_k_STRANGE), 0, 0, 1, 1},
    {&__pyx_n_s_TOP, __pyx_k_TOP, sizeof(__pyx_k_TOP), 0, 0, 1, 1},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_s_UP, __pyx_k_UP, sizeof(__pyx_k_UP), 0, 0, 1, 1},
    {&__pyx_kp_s_Unknown_call_signature, __pyx_k_Unknown_call_signature, sizeof(__pyx_k_Unknown_call_signature), 0, 0, 1, 0},
    {&__pyx_kp_s_Unknown_enum_value_s, __pyx_k_Unknown_enum_value_s, sizeof(__pyx_k_Unknown_enum_value_s), 0, 0, 1, 0},
    {&__pyx_n_s_VARIABLE, __pyx_k_VARIABLE, sizeof(__pyx_k_VARIABLE), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_kp_s_Wrong_number_of_arguments_given, __pyx_k_Wrong_number_of_arguments_given, sizeof(__pyx_k_Wrong_number_of_arguments_given), 0, 0, 1, 0},
    {&__pyx_kp_s_Wrong_number_of_arguments_given_2, __pyx_k_Wrong_number_of_arguments_given_2, sizeof(__pyx_k_Wrong_number_of_arguments_given_2), 0, 0, 1, 0},
    {&__pyx_kp_s_You_can_only_set_the_flavor_sche, __pyx_k_You_can_only_set_the_flavor_sche, sizeof(__pyx_k_You_can_only_set_the_flavor_sche), 0, 0, 1, 0},
    {&__pyx_n_s__147, __pyx_k__147, sizeof(__pyx_k__147), 0, 0, 1, 1},
    {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
    {&__pyx_n_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 1},
    {&__pyx_n_s_alphaS, __pyx_k_alphaS, sizeof(__pyx_k_alphaS), 0, 0, 1, 1},
    {&__pyx_n_s_alphas, __pyx_k_alphas, sizeof(__pyx_k_alphas), 0, 0, 1, 1},
    {&__pyx_n_s_alphasQ, __pyx_k_alphasQ, sizeof(__pyx_k_alphasQ), 0, 0, 1, 1},
    {&__pyx_n_s_alphasQ2, __pyx_k_alphasQ2, sizeof(__pyx_k_alphasQ2), 0, 0, 1, 1},
    {&__pyx_n_s_alternative, __pyx_k_alternative, sizeof(__pyx_k_alternative), 0, 0, 1, 1},
    {&__pyx_n_s_arg0_string, __pyx_k_arg0_string, sizeof(__pyx_k_arg0_string), 0, 0, 1, 1},
    {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
    {&__pyx_n_s_as_str, __pyx_k_as_str, sizeof(__pyx_k_as_str), 0, 0, 1, 1},
    {&__pyx_n_s_as_type, __pyx_k_as_type, sizeof(__pyx_k_as_type), 0, 0, 1, 1},
    {&__pyx_n_s_aschk, __pyx_k_aschk, sizeof(__pyx_k_aschk), 0, 0, 1, 1},
    {&__pyx_n_s_ast, __pyx_k_ast, sizeof(__pyx_k_ast), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_availablePDFSets, __pyx_k_availablePDFSets, sizeof(__pyx_k_availablePDFSets), 0, 0, 1, 1},
    {&__pyx_n_s_basepdf, __pyx_k_basepdf, sizeof(__pyx_k_basepdf), 0, 0, 1, 1},
    {&__pyx_n_s_central, __pyx_k_central, sizeof(__pyx_k_central), 0, 0, 1, 1},
    {&__pyx_n_s_checkPdfType, __pyx_k_checkPdfType, sizeof(__pyx_k_checkPdfType), 0, 0, 1, 1},
    {&__pyx_n_s_cl, __pyx_k_cl, sizeof(__pyx_k_cl), 0, 0, 1, 1},
    {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
    {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
    {&__pyx_n_s_confLevel, __pyx_k_confLevel, sizeof(__pyx_k_confLevel), 0, 0, 1, 1},
    {&__pyx_n_s_correlation, __pyx_k_correlation, sizeof(__pyx_k_correlation), 0, 0, 1, 1},
    {&__pyx_n_s_dct, __pyx_k_dct, sizeof(__pyx_k_dct), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_n_s_eachpid, __pyx_k_eachpid, sizeof(__pyx_k_eachpid), 0, 0, 1, 1},
    {&__pyx_n_s_eachq, __pyx_k_eachq, sizeof(__pyx_k_eachq), 0, 0, 1, 1},
    {&__pyx_n_s_eachq2, __pyx_k_eachq2, sizeof(__pyx_k_eachq2), 0, 0, 1, 1},
    {&__pyx_n_s_eachx, __pyx_k_eachx, sizeof(__pyx_k_eachx), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_enum, __pyx_k_enum, sizeof(__pyx_k_enum), 0, 0, 1, 1},
    {&__pyx_n_s_errSize, __pyx_k_errSize, sizeof(__pyx_k_errSize), 0, 0, 1, 1},
    {&__pyx_n_s_errmax, __pyx_k_errmax, sizeof(__pyx_k_errmax), 0, 0, 1, 1},
    {&__pyx_n_s_errmax_par, __pyx_k_errmax_par, sizeof(__pyx_k_errmax_par), 0, 0, 1, 1},
    {&__pyx_n_s_errmax_pdf, __pyx_k_errmax_pdf, sizeof(__pyx_k_errmax_pdf), 0, 0, 1, 1},
    {&__pyx_n_s_errmin, __pyx_k_errmin, sizeof(__pyx_k_errmin), 0, 0, 1, 1},
    {&__pyx_n_s_errmin_par, __pyx_k_errmin_par, sizeof(__pyx_k_errmin_par), 0, 0, 1, 1},
    {&__pyx_n_s_errmin_pdf, __pyx_k_errmin_pdf, sizeof(__pyx_k_errmin_pdf), 0, 0, 1, 1},
    {&__pyx_n_s_errminus, __pyx_k_errminus, sizeof(__pyx_k_errminus), 0, 0, 1, 1},
    {&__pyx_n_s_errminus_par, __pyx_k_errminus_par, sizeof(__pyx_k_errminus_par), 0, 0, 1, 1},
    {&__pyx_n_s_errminus_pdf, __pyx_k_errminus_pdf, sizeof(__pyx_k_errminus_pdf), 0, 0, 1, 1},
    {&__pyx_n_s_errorType, __pyx_k_errorType, sizeof(__pyx_k_errorType), 0, 0, 1, 1},
    {&__pyx_n_s_errparts, __pyx_k_errparts, sizeof(__pyx_k_errparts), 0, 0, 1, 1},
    {&__pyx_n_s_errplus, __pyx_k_errplus, sizeof(__pyx_k_errplus), 0, 0, 1, 1},
    {&__pyx_n_s_errplus_par, __pyx_k_errplus_par, sizeof(__pyx_k_errplus_par), 0, 0, 1, 1},
    {&__pyx_n_s_errplus_pdf, __pyx_k_errplus_pdf, sizeof(__pyx_k_errplus_pdf), 0, 0, 1, 1},
    {&__pyx_n_s_fallback, __pyx_k_fallback, sizeof(__pyx_k_fallback), 0, 0, 1, 1},
    {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
    {&__pyx_n_s_findFile, __pyx_k_findFile, sizeof(__pyx_k_findFile), 0, 0, 1, 1},
    {&__pyx_n_s_flavorScheme, __pyx_k_flavorScheme, sizeof(__pyx_k_flavorScheme), 0, 0, 1, 1},
    {&__pyx_n_s_flavors, __pyx_k_flavors, sizeof(__pyx_k_flavors), 0, 0, 1, 1},
    {&__pyx_n_s_flavs, __pyx_k_flavs, sizeof(__pyx_k_flavs), 0, 0, 1, 1},
    {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_n_s_full_load, __pyx_k_full_load, sizeof(__pyx_k_full_load), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
    {&__pyx_n_s_getConfig, __pyx_k_getConfig, sizeof(__pyx_k_getConfig), 0, 0, 1, 1},
    {&__pyx_n_s_getPDFSet, __pyx_k_getPDFSet, sizeof(__pyx_k_getPDFSet), 0, 0, 1, 1},
    {&__pyx_n_s_get_entry, __pyx_k_get_entry, sizeof(__pyx_k_get_entry), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_hasFlavor, __pyx_k_hasFlavor, sizeof(__pyx_k_hasFlavor), 0, 0, 1, 1},
    {&__pyx_n_s_has_key, __pyx_k_has_key, sizeof(__pyx_k_has_key), 0, 0, 1, 1},
    {&__pyx_n_s_has_key_local, __pyx_k_has_key_local, sizeof(__pyx_k_has_key_local), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
    {&__pyx_n_s_id1, __pyx_k_id1, sizeof(__pyx_k_id1), 0, 0, 1, 1},
    {&__pyx_n_s_id2, __pyx_k_id2, sizeof(__pyx_k_id2), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_inRangeQ, __pyx_k_inRangeQ, sizeof(__pyx_k_inRangeQ), 0, 0, 1, 1},
    {&__pyx_n_s_inRangeQ2, __pyx_k_inRangeQ2, sizeof(__pyx_k_inRangeQ2), 0, 0, 1, 1},
    {&__pyx_n_s_inRangeX, __pyx_k_inRangeX, sizeof(__pyx_k_inRangeX), 0, 0, 1, 1},
    {&__pyx_n_s_inRangeXQ, __pyx_k_inRangeXQ, sizeof(__pyx_k_inRangeXQ), 0, 0, 1, 1},
    {&__pyx_n_s_inRangeXQ2, __pyx_k_inRangeXQ2, sizeof(__pyx_k_inRangeXQ2), 0, 0, 1, 1},
    {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
    {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_n_s_init_subclass, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
    {&__pyx_n_s_izip, __pyx_k_izip, sizeof(__pyx_k_izip), 0, 0, 1, 1},
    {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
    {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
    {&__pyx_n_s_keys_local, __pyx_k_keys_local, sizeof(__pyx_k_keys_local), 0, 0, 1, 1},
    {&__pyx_n_s_lhapdfID, __pyx_k_lhapdfID, sizeof(__pyx_k_lhapdfID), 0, 0, 1, 1},
    {&__pyx_kp_s_lhapdf_pyx, __pyx_k_lhapdf_pyx, sizeof(__pyx_k_lhapdf_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_literal_eval, __pyx_k_literal_eval, sizeof(__pyx_k_literal_eval), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_mem, __pyx_k_mem, sizeof(__pyx_k_mem), 0, 0, 1, 1},
    {&__pyx_n_s_memberID, __pyx_k_memberID, sizeof(__pyx_k_memberID), 0, 0, 1, 1},
    {&__pyx_n_s_member_names, __pyx_k_member_names, sizeof(__pyx_k_member_names), 0, 0, 1, 1},
    {&__pyx_n_s_members, __pyx_k_members, sizeof(__pyx_k_members), 0, 0, 1, 1},
    {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
    {&__pyx_n_s_mkAlphaS, __pyx_k_mkAlphaS, sizeof(__pyx_k_mkAlphaS), 0, 0, 1, 1},
    {&__pyx_n_s_mkBareAlphaS, __pyx_k_mkBareAlphaS, sizeof(__pyx_k_mkBareAlphaS), 0, 0, 1, 1},
    {&__pyx_n_s_mkPDF, __pyx_k_mkPDF, sizeof(__pyx_k_mkPDF), 0, 0, 1, 1},
    {&__pyx_n_s_mkPDFs, __pyx_k_mkPDFs, sizeof(__pyx_k_mkPDFs), 0, 0, 1, 1},
    {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
    {&__pyx_n_s_module_2, __pyx_k_module_2, sizeof(__pyx_k_module_2), 0, 0, 1, 1},
    {&__pyx_n_s_mro_entries, __pyx_k_mro_entries, sizeof(__pyx_k_mro_entries), 0, 0, 1, 1},
    {&__pyx_n_s_mz, __pyx_k_mz, sizeof(__pyx_k_mz), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
    {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
    {&__pyx_n_s_newpath, __pyx_k_newpath, sizeof(__pyx_k_newpath), 0, 0, 1, 1},
    {&__pyx_n_s_newpaths, __pyx_k_newpaths, sizeof(__pyx_k_newpaths), 0, 0, 1, 1},
    {&__pyx_n_s_newpdf, __pyx_k_newpdf, sizeof(__pyx_k_newpdf), 0, 0, 1, 1},
    {&__pyx_n_s_nf, __pyx_k_nf, sizeof(__pyx_k_nf), 0, 0, 1, 1},
    {&__pyx_n_s_numFlavorsQ, __pyx_k_numFlavorsQ, sizeof(__pyx_k_numFlavorsQ), 0, 0, 1, 1},
    {&__pyx_n_s_numFlavorsQ2, __pyx_k_numFlavorsQ2, sizeof(__pyx_k_numFlavorsQ2), 0, 0, 1, 1},
    {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
    {&__pyx_n_s_objs, __pyx_k_objs, sizeof(__pyx_k_objs), 0, 0, 1, 1},
    {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
    {&__pyx_n_s_orderQCD, __pyx_k_orderQCD, sizeof(__pyx_k_orderQCD), 0, 0, 1, 1},
    {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
    {&__pyx_n_s_parents, __pyx_k_parents, sizeof(__pyx_k_parents), 0, 0, 1, 1},
    {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
    {&__pyx_n_s_paths, __pyx_k_paths, sizeof(__pyx_k_paths), 0, 0, 1, 1},
    {&__pyx_n_s_pathsAppend, __pyx_k_pathsAppend, sizeof(__pyx_k_pathsAppend), 0, 0, 1, 1},
    {&__pyx_n_s_pathsPrepend, __pyx_k_pathsPrepend, sizeof(__pyx_k_pathsPrepend), 0, 0, 1, 1},
    {&__pyx_n_s_pdftypes, __pyx_k_pdftypes, sizeof(__pyx_k_pdftypes), 0, 0, 1, 1},
    {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
    {&__pyx_n_s_pid, __pyx_k_pid, sizeof(__pyx_k_pid), 0, 0, 1, 1},
    {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
    {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
    {&__pyx_n_s_print_2, __pyx_k_print_2, sizeof(__pyx_k_print_2), 0, 0, 1, 1},
    {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
    {&__pyx_n_s_ptrs, __pyx_k_ptrs, sizeof(__pyx_k_ptrs), 0, 0, 1, 1},
    {&__pyx_n_s_punc, __pyx_k_punc, sizeof(__pyx_k_punc), 0, 0, 1, 1},
    {&__pyx_kp_s_python_lhapdf, __pyx_k_python_lhapdf, sizeof(__pyx_k_python_lhapdf), 0, 0, 1, 0},
    {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle___Pyx_EnumMeta, __pyx_k_pyx_unpickle___Pyx_EnumMeta, sizeof(__pyx_k_pyx_unpickle___Pyx_EnumMeta), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
    {&__pyx_n_s_q2, __pyx_k_q2, sizeof(__pyx_k_q2), 0, 0, 1, 1},
    {&__pyx_n_s_q2Max, __pyx_k_q2Max, sizeof(__pyx_k_q2Max), 0, 0, 1, 1},
    {&__pyx_n_s_qparts, __pyx_k_qparts, sizeof(__pyx_k_qparts), 0, 0, 1, 1},
    {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_n_s_quarkMass, __pyx_k_quarkMass, sizeof(__pyx_k_quarkMass), 0, 0, 1, 1},
    {&__pyx_n_s_quarkThreshold, __pyx_k_quarkThreshold, sizeof(__pyx_k_quarkThreshold), 0, 0, 1, 1},
    {&__pyx_n_s_randomValueFromHessian, __pyx_k_randomValueFromHessian, sizeof(__pyx_k_randomValueFromHessian), 0, 0, 1, 1},
    {&__pyx_n_s_randoms, __pyx_k_randoms, sizeof(__pyx_k_randoms), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_real, __pyx_k_real, sizeof(__pyx_k_real), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
    {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
    {&__pyx_n_s_rtn, __pyx_k_rtn, sizeof(__pyx_k_rtn), 0, 0, 1, 1},
    {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
    {&__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
    {&__pyx_kp_s_s_s_d, __pyx_k_s_s_d, sizeof(__pyx_k_s_s_d), 0, 0, 1, 0},
    {&__pyx_n_s_scheme, __pyx_k_scheme, sizeof(__pyx_k_scheme), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_kp_s_self__obj_cannot_be_converted_to, __pyx_k_self__obj_cannot_be_converted_to, sizeof(__pyx_k_self__obj_cannot_be_converted_to), 0, 0, 1, 0},
    {&__pyx_kp_s_self__ptr_cannot_be_converted_to, __pyx_k_self__ptr_cannot_be_converted_to, sizeof(__pyx_k_self__ptr_cannot_be_converted_to), 0, 0, 1, 0},
    {&__pyx_n_s_set, __pyx_k_set, sizeof(__pyx_k_set), 0, 0, 1, 1},
    {&__pyx_n_s_setAlphaSMZ, __pyx_k_setAlphaSMZ, sizeof(__pyx_k_setAlphaSMZ), 0, 0, 1, 1},
    {&__pyx_n_s_setFlavorScheme, __pyx_k_setFlavorScheme, sizeof(__pyx_k_setFlavorScheme), 0, 0, 1, 1},
    {&__pyx_n_s_setLambda, __pyx_k_setLambda, sizeof(__pyx_k_setLambda), 0, 0, 1, 1},
    {&__pyx_n_s_setMZ, __pyx_k_setMZ, sizeof(__pyx_k_setMZ), 0, 0, 1, 1},
    {&__pyx_n_s_setOrderQCD, __pyx_k_setOrderQCD, sizeof(__pyx_k_setOrderQCD), 0, 0, 1, 1},
    {&__pyx_n_s_setPaths, __pyx_k_setPaths, sizeof(__pyx_k_setPaths), 0, 0, 1, 1},
    {&__pyx_n_s_setQuarkMass, __pyx_k_setQuarkMass, sizeof(__pyx_k_setQuarkMass), 0, 0, 1, 1},
    {&__pyx_n_s_setQuarkThreshold, __pyx_k_setQuarkThreshold, sizeof(__pyx_k_setQuarkThreshold), 0, 0, 1, 1},
    {&__pyx_n_s_setVerbosity, __pyx_k_setVerbosity, sizeof(__pyx_k_setVerbosity), 0, 0, 1, 1},
    {&__pyx_n_s_set_entry, __pyx_k_set_entry, sizeof(__pyx_k_set_entry), 0, 0, 1, 1},
    {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
    {&__pyx_n_s_setname, __pyx_k_setname, sizeof(__pyx_k_setname), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
    {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_n_s_symmetrise, __pyx_k_symmetrise, sizeof(__pyx_k_symmetrise), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
    {&__pyx_n_s_unc, __pyx_k_unc, sizeof(__pyx_k_unc), 0, 0, 1, 1},
    {&__pyx_n_s_uncertainty, __pyx_k_uncertainty, sizeof(__pyx_k_uncertainty), 0, 0, 1, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
    {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
    {&__pyx_n_s_vals, __pyx_k_vals, sizeof(__pyx_k_vals), 0, 0, 1, 1},
    {&__pyx_n_s_valsA, __pyx_k_valsA, sizeof(__pyx_k_valsA), 0, 0, 1, 1},
    {&__pyx_n_s_valsB, __pyx_k_valsB, sizeof(__pyx_k_valsB), 0, 0, 1, 1},
    {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
    {&__pyx_n_s_verbosity, __pyx_k_verbosity, sizeof(__pyx_k_verbosity), 0, 0, 1, 1},
    {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
    {&__pyx_n_s_version_2, __pyx_k_version_2, sizeof(__pyx_k_version_2), 0, 0, 1, 1},
    {&__pyx_n_s_vlevel, __pyx_k_vlevel, sizeof(__pyx_k_vlevel), 0, 0, 1, 1},
    {&__pyx_n_s_weightxQ, __pyx_k_weightxQ, sizeof(__pyx_k_weightxQ), 0, 0, 1, 1},
    {&__pyx_n_s_weightxQ2, __pyx_k_weightxQ2, sizeof(__pyx_k_weightxQ2), 0, 0, 1, 1},
    {&__pyx_n_s_weightxxQ, __pyx_k_weightxxQ, sizeof(__pyx_k_weightxxQ), 0, 0, 1, 1},
    {&__pyx_n_s_weightxxQ2, __pyx_k_weightxxQ2, sizeof(__pyx_k_weightxxQ2), 0, 0, 1, 1},
    {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
    {&__pyx_n_s_x1, __pyx_k_x1, sizeof(__pyx_k_x1), 0, 0, 1, 1},
    {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
    {&__pyx_n_s_xMin, __pyx_k_xMin, sizeof(__pyx_k_xMin), 0, 0, 1, 1},
    {&__pyx_n_s_xfxQ, __pyx_k_xfxQ, sizeof(__pyx_k_xfxQ), 0, 0, 1, 1},
    {&__pyx_n_s_xfxQ2, __pyx_k_xfxQ2, sizeof(__pyx_k_xfxQ2), 0, 0, 1, 1},
    {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
    {&__pyx_n_s_yaml, __pyx_k_yaml, sizeof(__pyx_k_yaml), 0, 0, 1, 1},
    {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 125, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 204, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 204, __pyx_L1_error)
  #endif
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 782, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 68, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 76, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 33, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_tuple__2 = PyTuple_Pack(3, __pyx_int_238750788, __pyx_int_228825662, __pyx_int_222419149); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "python/lhapdf.pyx":782
 *             return self.setFlavorScheme(FIXED, nf)
 *         else:
 *             print("You can only set the flavor scheme to FIXED or VARIABLE")             # <<<<<<<<<<<<<<
 *             return
 *         self._ptr.setFlavorScheme(s, nf)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_You_can_only_set_the_flavor_sche); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "python/lhapdf.pyx":883
 *         return mkPDF_setmem(arg0_string, args[1])
 *     else:
 *         raise Exception("Unknown call signature")             # <<<<<<<<<<<<<<
 * 
 * def mkAlphaS(*args):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Unknown_call_signature); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__7 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle___Pyx_EnumMeta__set_state(self, __pyx_state)
 */
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "EnumBase":28
 * cdef object __Pyx_EnumBase
 * class __Pyx_EnumBase(int, metaclass=__Pyx_EnumMeta):
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */
  __pyx_tuple__11 = PyTuple_Pack(5, __pyx_n_s_cls, __pyx_n_s_value, __pyx_n_s_name, __pyx_n_s_v, __pyx_n_s_res); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_new, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(1, 28, __pyx_L1_error)
  __pyx_tuple__13 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "EnumBase":39
 *         cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_repr, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(1, 39, __pyx_L1_error)

  /* "EnumBase":41
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_str, 41, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(1, 41, __pyx_L1_error)

  /* "EnumBase":49
 * cdef object __Pyx_FlagBase
 * class __Pyx_FlagBase(int, metaclass=__Pyx_EnumMeta):
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_new, 49, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(1, 49, __pyx_L1_error)

  /* "EnumBase":62
 *             cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_repr, 62, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(1, 62, __pyx_L1_error)

  /* "EnumBase":64
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_str, 64, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(1, 64, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle___Pyx_EnumMeta(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__20 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle___Pyx_EnumMeta, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "python/lhapdf.pyx":94
 *     #     return obj
 * 
 *     def alphasQ(self, q):             # <<<<<<<<<<<<<<
 *         "Return alpha_s at q"
 *         return self._ptr.alphasQ(q)
 */
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_q); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_alphasQ, 94, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 94, __pyx_L1_error)

  /* "python/lhapdf.pyx":98
 *         return self._ptr.alphasQ(q)
 * 
 *     def alphasQ2(self, q2):             # <<<<<<<<<<<<<<
 *         "Return alpha_s at q2"
 *         return self._ptr.alphasQ2(q2)
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_q2); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_alphasQ2, 98, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 98, __pyx_L1_error)

  /* "python/lhapdf.pyx":102
 *         return self._ptr.alphasQ2(q2)
 * 
 *     def xfxQ(self, *args):             # <<<<<<<<<<<<<<
 *         """Return the PDF xf(x,Q2) value for the given parton ID, x, and Q values.
 * 
 */
  __pyx_tuple__26 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_args, __pyx_n_s_pid, __pyx_n_s_x, __pyx_n_s_q, __pyx_n_s_eachx, __pyx_n_s_eachq, __pyx_n_s_eachpid, __pyx_n_s_pid, __pyx_n_s_pid); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_xfxQ, 102, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 102, __pyx_L1_error)

  /* "python/lhapdf.pyx":141
 *             raise Exception("Wrong number of arguments given to xfxQ: 2 or 3 required, %d provided" % len(args))
 * 
 *     def xfxQ2(self, *args):             # <<<<<<<<<<<<<<
 *         """Return the PDF xf(x,Q2) value for the given parton ID, x, and Q2 values.
 * 
 */
  __pyx_tuple__28 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_args, __pyx_n_s_pid, __pyx_n_s_x, __pyx_n_s_q2, __pyx_n_s_eachx, __pyx_n_s_eachq2, __pyx_n_s_eachpid, __pyx_n_s_pid, __pyx_n_s_pid); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_xfxQ2, 141, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 141, __pyx_L1_error)

  /* "python/lhapdf.pyx":180
 *             raise Exception("Wrong number of arguments given to xfxQ2: 2 or 3 required, %d provided" % len(args))
 * 
 *     def inRangeQ(self, q):             # <<<<<<<<<<<<<<
 *         "Check if the specified Q value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ(q)
 */
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_inRangeQ, 180, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 180, __pyx_L1_error)

  /* "python/lhapdf.pyx":184
 *         return self._ptr.inRangeQ(q)
 * 
 *     def inRangeQ2(self, q2):             # <<<<<<<<<<<<<<
 *         "Check if the specified Q2 value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ2(q2)
 */
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_inRangeQ2, 184, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 184, __pyx_L1_error)

  /* "python/lhapdf.pyx":188
 *         return self._ptr.inRangeQ2(q2)
 * 
 *     def inRangeX(self, x):             # <<<<<<<<<<<<<<
 *         "Check if the specified x value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeX(x)
 */
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_x); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_inRangeX, 188, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 188, __pyx_L1_error)

  /* "python/lhapdf.pyx":192
 *         return self._ptr.inRangeX(x)
 * 
 *     def inRangeXQ(self, x, q):             # <<<<<<<<<<<<<<
 *         "Check if the specified x and Q values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ(x, q)
 */
  __pyx_tuple__34 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_q); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_inRangeXQ, 192, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 192, __pyx_L1_error)

  /* "python/lhapdf.pyx":196
 *         return self._ptr.inRangeXQ(x, q)
 * 
 *     def inRangeXQ2(self, x, q2):             # <<<<<<<<<<<<<<
 *         "Check if the specified x and Q2 values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ2(x, q2)
 */
  __pyx_tuple__36 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_q2); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_inRangeXQ2, 196, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 196, __pyx_L1_error)

  /* "python/lhapdf.pyx":200
 *         return self._ptr.inRangeXQ2(x, q2)
 * 
 *     def flavors(self):             # <<<<<<<<<<<<<<
 *         "Return the list of parton IDs supported by this PDF."
 *         # TODO: Use Cython >= 0.17 STL type coercion when available
 */
  __pyx_tuple__38 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_flavs, __pyx_n_s_i); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_flavors, 200, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 200, __pyx_L1_error)

  /* "python/lhapdf.pyx":206
 *         return [flavs[i] for i in xrange(flavs.size())]
 * 
 *     def hasFlavor(self, pid):             # <<<<<<<<<<<<<<
 *         "Check if the specified parton ID is contained in this PDF."
 *         return self._ptr.hasFlavor(pid)
 */
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pid); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_hasFlavor, 206, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 206, __pyx_L1_error)

  /* "python/lhapdf.pyx":210
 *         return self._ptr.hasFlavor(pid)
 * 
 *     def quarkMass(self, int id):             # <<<<<<<<<<<<<<
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_id); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_quarkMass, 210, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 210, __pyx_L1_error)

  /* "python/lhapdf.pyx":214
 *         return self._ptr.quarkMass(id)
 * 
 *     def quarkThreshold(self, int id):             # <<<<<<<<<<<<<<
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)
 */
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_quarkThreshold, 214, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 214, __pyx_L1_error)

  /* "python/lhapdf.pyx":223
 *         return obj
 * 
 *     def set(self):             # <<<<<<<<<<<<<<
 *         "Return the corresponding PDFSet"
 *         return self._set()
 */
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_set, 223, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 223, __pyx_L1_error)

  /* "python/lhapdf.pyx":233
 *         return obj
 * 
 *     def info(self):             # <<<<<<<<<<<<<<
 *         "Return the corresponding PDFInfo"
 *         return self._info()
 */
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_info, 233, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 233, __pyx_L1_error)

  /* "python/lhapdf.pyx":237
 *         return self._info()
 * 
 *     def _print(self):             # <<<<<<<<<<<<<<
 *         "Print a short summary to stdout"
 *         self._ptr._print()
 */
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_print_2, 237, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 237, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "python/lhapdf.pyx":261
 *     #     return self._ptr.metadata()
 * 
 *     def keys(self):             # <<<<<<<<<<<<<<
 *         "Get the list of metadata keys"
 *         return self._ptr.keys()
 */
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_keys, 261, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 261, __pyx_L1_error)

  /* "python/lhapdf.pyx":265
 *         return self._ptr.keys()
 * 
 *     def keys_local(self):             # <<<<<<<<<<<<<<
 *         "Get the list of metadata keys at local level (config/set/member)"
 *         return self._ptr.keys_local()
 */
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_keys_local, 265, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 265, __pyx_L1_error)

  /* "python/lhapdf.pyx":269
 *         return self._ptr.keys_local()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(key)
 */
  __pyx_tuple__52 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_key); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_has_key, 269, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 269, __pyx_L1_error)

  /* "python/lhapdf.pyx":273
 *         return self._ptr.has_key(key)
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(key)
 */
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_has_key_local, 273, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 273, __pyx_L1_error)

  /* "python/lhapdf.pyx":281
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         """\
 *         Returns metadata entry for this key if it exists, otherwise returns a fallback value.
 */
  __pyx_tuple__55 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_fallback, __pyx_n_s_rtn, __pyx_n_s_ast, __pyx_n_s_yaml); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_get_entry, 281, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 281, __pyx_L1_error)

  /* "python/lhapdf.pyx":304
 *         return rtn
 * 
 *     def set_entry(self, key, value):             # <<<<<<<<<<<<<<
 *         "Set a metadata key"
 *         self._ptr.set_entry(key, str(value))
 */
  __pyx_tuple__57 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_value); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_set_entry, 304, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 304, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 */
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "python/lhapdf.pyx":563
 *         return self._ptr.errorConfLevel()
 * 
 *     def mkPDF(self, mem):             # <<<<<<<<<<<<<<
 *         cdef c.PDF* ptr = self._ptr.mkPDF(mem)
 *         cdef PDF obj
 */
  __pyx_tuple__65 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_mem, __pyx_n_s_ptr, __pyx_n_s_obj); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_mkPDF, 563, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 563, __pyx_L1_error)

  /* "python/lhapdf.pyx":570
 *         return obj
 * 
 *     def mkPDFs(self):             # <<<<<<<<<<<<<<
 *         cdef vector[c.PDF*] ptrs = self._ptr.mkPDFs()
 *         cdef PDF obj
 */
  __pyx_tuple__67 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_ptrs, __pyx_n_s_obj, __pyx_n_s_objs, __pyx_n_s_ptr); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_mkPDFs, 570, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 570, __pyx_L1_error)

  /* "python/lhapdf.pyx":584
 *     #     return self._ptr.metadata()
 * 
 *     def keys(self):             # <<<<<<<<<<<<<<
 *         "Return the total list of info keys"
 *         return self._ptr.keys()
 */
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_keys, 584, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 584, __pyx_L1_error)

  /* "python/lhapdf.pyx":588
 *         return self._ptr.keys()
 * 
 *     def keys_local(self):             # <<<<<<<<<<<<<<
 *         "Return the list of info keys defined at local level (config/set/member)"
 *         return self._ptr.keys_local()
 */
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_keys_local, 588, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 588, __pyx_L1_error)

  /* "python/lhapdf.pyx":592
 *         return self._ptr.keys_local()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(key)
 */
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_has_key, 592, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 592, __pyx_L1_error)

  /* "python/lhapdf.pyx":596
 *         return self._ptr.has_key(key)
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(key)
 */
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_has_key_local, 596, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(0, 596, __pyx_L1_error)

  /* "python/lhapdf.pyx":604
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(key, str(fallback))
 */
  __pyx_tuple__73 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_fallback, __pyx_n_s_rtn); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_get_entry, 604, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 604, __pyx_L1_error)

  /* "python/lhapdf.pyx":609
 *         return rtn if str(rtn) != str(fallback) else fallback
 * 
 *     def _print(self):             # <<<<<<<<<<<<<<
 *         "Print a short summary to stdout"
 *         self._ptr._print()
 */
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_print_2, 609, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 609, __pyx_L1_error)

  /* "python/lhapdf.pyx":613
 *         self._ptr._print()
 * 
 *     def uncertainty(self, vals, cl=68.268949, alternative=False):             # <<<<<<<<<<<<<<
 *         """\
 *         Return a PDFUncertainty object corresponding to central value and errors computed
 */
  __pyx_tuple__76 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_vals, __pyx_n_s_cl, __pyx_n_s_alternative, __pyx_n_s_unc, __pyx_n_s_punc); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_uncertainty, 613, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 613, __pyx_L1_error)
  __pyx_tuple__78 = PyTuple_Pack(2, __pyx_float_68_268949, Py_False); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "python/lhapdf.pyx":632
 *         return punc
 * 
 *     def correlation(self, valsA, valsB):             # <<<<<<<<<<<<<<
 *         """Return the PDF correlation between valsA and valsB using appropriate formulae for this set."""
 *         return self._ptr.correlation(valsA, valsB)
 */
  __pyx_tuple__79 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_valsA, __pyx_n_s_valsB); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_correlation, 632, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 632, __pyx_L1_error)

  /* "python/lhapdf.pyx":636
 *         return self._ptr.correlation(valsA, valsB)
 * 
 *     def randomValueFromHessian(self, vals, randoms, symmetrise=True):             # <<<<<<<<<<<<<<
 *         """Return a random value from Hessian vals and Gaussian random numbers."""
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)
 */
  __pyx_tuple__81 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_vals, __pyx_n_s_randoms, __pyx_n_s_symmetrise); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_randomValueFromHessian, 636, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_tuple__83 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "python/lhapdf.pyx":640
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)
 * 
 *     def _checkPdfType(self, pdftypes):             # <<<<<<<<<<<<<<
 *         """Check that the PdfType of each member matches the ErrorType of the set."""
 *         self._ptr._checkPdfType(pdftypes)
 */
  __pyx_tuple__84 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pdftypes); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_checkPdfType, 640, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 640, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "python/lhapdf.pyx":711
 *         return self._ptr.type()
 * 
 *     def alphasQ(self, double q):             # <<<<<<<<<<<<<<
 *         "Get alpha_s value at scale q"
 *         return self._ptr.alphasQ(q)
 */
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_alphasQ, 711, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 711, __pyx_L1_error)

  /* "python/lhapdf.pyx":715
 *         return self._ptr.alphasQ(q)
 * 
 *     def alphasQ2(self, double q2):             # <<<<<<<<<<<<<<
 *         "Get alpha_s value at scale q"
 *         return self._ptr.alphasQ2(q2)
 */
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_alphasQ2, 715, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(0, 715, __pyx_L1_error)

  /* "python/lhapdf.pyx":719
 *         return self._ptr.alphasQ2(q2)
 * 
 *     def numFlavorsQ(self, double q):             # <<<<<<<<<<<<<<
 *         "Get number of active flavors at scale q"
 *         return self._ptr.numFlavorsQ(q)
 */
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_numFlavorsQ, 719, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 719, __pyx_L1_error)

  /* "python/lhapdf.pyx":723
 *         return self._ptr.numFlavorsQ(q)
 * 
 *     def numFlavorsQ2(self, double q2):             # <<<<<<<<<<<<<<
 *         "Get number of active flavors at scale q"
 *         return self._ptr.numFlavorsQ2(q2)
 */
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_numFlavorsQ2, 723, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 723, __pyx_L1_error)

  /* "python/lhapdf.pyx":727
 *         return self._ptr.numFlavorsQ2(q2)
 * 
 *     def quarkMass(self, int id):             # <<<<<<<<<<<<<<
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)
 */
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_quarkMass, 727, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 727, __pyx_L1_error)

  /* "python/lhapdf.pyx":731
 *         return self._ptr.quarkMass(id)
 * 
 *     def setQuarkMass(self, int id, double value):             # <<<<<<<<<<<<<<
 *         "Set mass of quark with PID code id"
 *         self._ptr.setQuarkMass(id, value)
 */
  __pyx_tuple__95 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_id, __pyx_n_s_value); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_setQuarkMass, 731, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 731, __pyx_L1_error)

  /* "python/lhapdf.pyx":735
 *         self._ptr.setQuarkMass(id, value)
 * 
 *     def quarkThreshold(self, int id):             # <<<<<<<<<<<<<<
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)
 */
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_quarkThreshold, 735, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 735, __pyx_L1_error)

  /* "python/lhapdf.pyx":739
 *         return self._ptr.quarkThreshold(id)
 * 
 *     def setQuarkThreshold(self, int id, double value):             # <<<<<<<<<<<<<<
 *         "Set activation threshold of quark with PID code id"
 *         self._ptr.setQuarkThreshold(id, value)
 */
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_setQuarkThreshold, 739, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(0, 739, __pyx_L1_error)

  /* "python/lhapdf.pyx":743
 *         self._ptr.setQuarkThreshold(id, value)
 * 
 *     def orderQCD(self):             # <<<<<<<<<<<<<<
 *         "Get the QCD running order (max num loops) for this alphaS"
 *         return self._ptr.orderQCD()
 */
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_orderQCD, 743, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 743, __pyx_L1_error)

  /* "python/lhapdf.pyx":747
 *         return self._ptr.orderQCD()
 * 
 *     def setOrderQCD(self, int order):             # <<<<<<<<<<<<<<
 *         "Set the QCD running order (max num loops) for this alphaS"
 *         self._ptr.setOrderQCD(order)
 */
  __pyx_tuple__100 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_order); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_setOrderQCD, 747, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 747, __pyx_L1_error)

  /* "python/lhapdf.pyx":751
 *         self._ptr.setOrderQCD(order)
 * 
 *     def setMZ(self, double mz):             # <<<<<<<<<<<<<<
 *         "Set the Z mass (used in ODE solver)"
 *         self._ptr.setMZ(mz)
 */
  __pyx_tuple__102 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_mz); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_setMZ, 751, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 751, __pyx_L1_error)

  /* "python/lhapdf.pyx":755
 *         self._ptr.setMZ(mz)
 * 
 *     def setAlphaSMZ(self, double alphas):             # <<<<<<<<<<<<<<
 *         "Set alpha_s at the Z mass (used in ODE solver)"
 *         self._ptr.setAlphaSMZ(alphas)
 */
  __pyx_tuple__104 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_alphas); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_setAlphaSMZ, 755, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 755, __pyx_L1_error)

  /* "python/lhapdf.pyx":759
 *         self._ptr.setAlphaSMZ(alphas)
 * 
 *     def setLambda(self, int id, double val):             # <<<<<<<<<<<<<<
 *         "Set the id'th LambdaQCD value (used in analytic solver)"
 *         self._ptr.setLambda(id, val)
 */
  __pyx_tuple__106 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_id, __pyx_n_s_val); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_setLambda, 759, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 759, __pyx_L1_error)

  /* "python/lhapdf.pyx":763
 *         self._ptr.setLambda(id, val)
 * 
 *     def setFlavorScheme(self, scheme, int nf):             # <<<<<<<<<<<<<<
 *         """\
 *         Set the flavor scheme. nf is the fixed number (if FIXED)
 */
  __pyx_tuple__108 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_scheme, __pyx_n_s_nf, __pyx_n_s_s); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_setFlavorScheme, 763, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 763, __pyx_L1_error)

  /* "python/lhapdf.pyx":786
 *         self._ptr.setFlavorScheme(s, nf)
 * 
 *     def flavorScheme(self, as_str=True):             # <<<<<<<<<<<<<<
 *          s = FlavorScheme(int(self._ptr.flavorScheme()))
 *          return s if not as_str else s.name
 */
  __pyx_tuple__110 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_as_str, __pyx_n_s_s); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_flavorScheme, 786, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 786, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "python/lhapdf.pyx":800
 * 
 * 
 * def getConfig():             # <<<<<<<<<<<<<<
 *     """Factory function to get the global config object."""
 *     cdef c.Info* ptr = &c.getConfig()
 */
  __pyx_tuple__114 = PyTuple_Pack(2, __pyx_n_s_ptr, __pyx_n_s_obj); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_getConfig, 800, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 800, __pyx_L1_error)

  /* "python/lhapdf.pyx":807
 *     return obj
 * 
 * def getPDFSet(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to get the specified PDF set."""
 *     cdef PDFSet obj = PDFSet.__new__(PDFSet)
 */
  __pyx_tuple__116 = PyTuple_Pack(3, __pyx_n_s_setname, __pyx_n_s_obj, __pyx_n_s_ptr); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_getPDFSet, 807, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 807, __pyx_L1_error)

  /* "python/lhapdf.pyx":814
 *     return obj
 * 
 * def mkPDFs(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to make all the PDF objects in the specified set."""
 *     cdef vector[c.PDF*] ptrs = c.mkPDFs(setname)
 */
  __pyx_tuple__118 = PyTuple_Pack(5, __pyx_n_s_setname, __pyx_n_s_ptrs, __pyx_n_s_obj, __pyx_n_s_objs, __pyx_n_s_ptr); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_mkPDFs, 814, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 814, __pyx_L1_error)

  /* "python/lhapdf.pyx":868
 *     return obj
 * 
 * def mkPDF(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a PDF object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */
  __pyx_tuple__120 = PyTuple_Pack(2, __pyx_n_s_args, __pyx_n_s_arg0_string); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_mkPDF, 868, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 868, __pyx_L1_error)

  /* "python/lhapdf.pyx":885
 *         raise Exception("Unknown call signature")
 * 
 * def mkAlphaS(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a AlphaS object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_mkAlphaS, 885, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(0, 885, __pyx_L1_error)

  /* "python/lhapdf.pyx":902
 *         raise Exception("Unknown call signature")
 * 
 * def mkBareAlphaS(as_type):             # <<<<<<<<<<<<<<
 *     "Factory function to make a bare AlphaS object."
 *     return mkBareAlphaS_(as_type)
 */
  __pyx_tuple__123 = PyTuple_Pack(1, __pyx_n_s_as_type); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__123, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_mkBareAlphaS, 902, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(0, 902, __pyx_L1_error)

  /* "python/lhapdf.pyx":907
 * 
 * 
 * def weightxQ(int id, double x, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_tuple__125 = PyTuple_Pack(6, __pyx_n_s_id, __pyx_n_s_x, __pyx_n_s_Q, __pyx_n_s_basepdf, __pyx_n_s_newpdf, __pyx_n_s_aschk); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__125, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_weightxQ, 907, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) __PYX_ERR(0, 907, __pyx_L1_error)
  __pyx_tuple__127 = PyTuple_Pack(1, ((PyObject*)__pyx_float_5eneg_2)); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);

  /* "python/lhapdf.pyx":912
 *     return c.weightxQ(id, x, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxQ2(int id, double x, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_tuple__128 = PyTuple_Pack(6, __pyx_n_s_id, __pyx_n_s_x, __pyx_n_s_Q2, __pyx_n_s_basepdf, __pyx_n_s_newpdf, __pyx_n_s_aschk); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_weightxQ2, 912, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 912, __pyx_L1_error)

  /* "python/lhapdf.pyx":917
 *     return c.weightxQ2(id, x, Q2, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ(int id1, int id2, double x1, double x2, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_tuple__130 = PyTuple_Pack(8, __pyx_n_s_id1, __pyx_n_s_id2, __pyx_n_s_x1, __pyx_n_s_x2, __pyx_n_s_Q, __pyx_n_s_basepdf, __pyx_n_s_newpdf, __pyx_n_s_aschk); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(8, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_weightxxQ, 917, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(0, 917, __pyx_L1_error)

  /* "python/lhapdf.pyx":922
 *     return c.weightxxQ(id1, id2, x1, x2, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ2(int id1, int id2, double x1, double x2, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_tuple__132 = PyTuple_Pack(8, __pyx_n_s_id1, __pyx_n_s_id2, __pyx_n_s_x1, __pyx_n_s_x2, __pyx_n_s_Q2, __pyx_n_s_basepdf, __pyx_n_s_newpdf, __pyx_n_s_aschk); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(8, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_weightxxQ2, 922, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(0, 922, __pyx_L1_error)

  /* "python/lhapdf.pyx":929
 * 
 * 
 * def version():             # <<<<<<<<<<<<<<
 *     "Return the LHAPDF library version."
 *     return c.version()
 */
  __pyx_codeobj__134 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_version, 929, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__134)) __PYX_ERR(0, 929, __pyx_L1_error)

  /* "python/lhapdf.pyx":936
 * 
 * 
 * def verbosity():             # <<<<<<<<<<<<<<
 *     "Get the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     return c.verbosity()
 */
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_verbosity, 936, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(0, 936, __pyx_L1_error)

  /* "python/lhapdf.pyx":940
 *     return c.verbosity()
 * 
 * def setVerbosity(vlevel):             # <<<<<<<<<<<<<<
 *     "Set the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     c.setVerbosity(vlevel)
 */
  __pyx_tuple__136 = PyTuple_Pack(1, __pyx_n_s_vlevel); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_setVerbosity, 940, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(0, 940, __pyx_L1_error)

  /* "python/lhapdf.pyx":945
 * 
 * 
 * def availablePDFSets():             # <<<<<<<<<<<<<<
 *     "Get the names of all the available PDF sets on this system."
 *     return c.availablePDFSets()
 */
  __pyx_codeobj__138 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_availablePDFSets, 945, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__138)) __PYX_ERR(0, 945, __pyx_L1_error)

  /* "python/lhapdf.pyx":950
 * 
 * 
 * def paths():             # <<<<<<<<<<<<<<
 *     "Return the list of current PDF data search paths."
 *     return c.paths()
 */
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_paths, 950, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(0, 950, __pyx_L1_error)

  /* "python/lhapdf.pyx":954
 *     return c.paths()
 * 
 * def setPaths(newpaths):             # <<<<<<<<<<<<<<
 *     "Set the list of current PDF data search paths."
 *     c.setPaths([p for p in newpaths])  #< TODO: check if str auto-encode works without loop
 */
  __pyx_tuple__140 = PyTuple_Pack(2, __pyx_n_s_newpaths, __pyx_n_s_p); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_setPaths, 954, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(0, 954, __pyx_L1_error)

  /* "python/lhapdf.pyx":958
 *     c.setPaths([p for p in newpaths])  #< TODO: check if str auto-encode works without loop
 * 
 * def pathsPrepend(newpath):             # <<<<<<<<<<<<<<
 *     "Prepend to the list of current PDF data search paths."
 *     c.pathsPrepend(newpath)
 */
  __pyx_tuple__142 = PyTuple_Pack(1, __pyx_n_s_newpath); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_pathsPrepend, 958, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(0, 958, __pyx_L1_error)

  /* "python/lhapdf.pyx":962
 *     c.pathsPrepend(newpath)
 * 
 * def pathsAppend(newpath):             # <<<<<<<<<<<<<<
 *     "Append to the list of current PDF data search paths."
 *     c.pathsAppend(newpath)
 */
  __pyx_codeobj__144 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_pathsAppend, 962, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__144)) __PYX_ERR(0, 962, __pyx_L1_error)

  /* "python/lhapdf.pyx":966
 *     c.pathsAppend(newpath)
 * 
 * def findFile(filename):             # <<<<<<<<<<<<<<
 *     "Return the path to the found filename via the LHAPDF search mechanism, or None."
 *     cdef string path = c.findFile(filename)
 */
  __pyx_tuple__145 = PyTuple_Pack(2, __pyx_n_s_filename, __pyx_n_s_path); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__145, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lhapdf_pyx, __pyx_n_s_findFile, 966, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_get.method_name = &__pyx_n_s_get;
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_5eneg_2 = PyFloat_FromDouble(5e-2); if (unlikely(!__pyx_float_5eneg_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_91_2 = PyFloat_FromDouble(91.2); if (unlikely(!__pyx_float_91_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_68_268949 = PyFloat_FromDouble(68.268949); if (unlikely(!__pyx_float_68_268949)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_228825662 = PyInt_FromLong(228825662L); if (unlikely(!__pyx_int_228825662)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_238750788 = PyInt_FromLong(238750788L); if (unlikely(!__pyx_int_238750788)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_OrderedDict = Py_None; Py_INCREF(Py_None);
  __Pyx_EnumBase = Py_None; Py_INCREF(Py_None);
  __Pyx_FlagBase = Py_None; Py_INCREF(Py_None);
  __Pyx_globals = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_6python_6lhapdf_PDF = &__pyx_vtable_6python_6lhapdf_PDF;
  __pyx_vtable_6python_6lhapdf_PDF.set_ptr = (PyObject *(*)(struct __pyx_obj_6python_6lhapdf_PDF *, LHAPDF::PDF *))__pyx_f_6python_6lhapdf_3PDF_set_ptr;
  __pyx_vtable_6python_6lhapdf_PDF._set = (PyObject *(*)(struct __pyx_obj_6python_6lhapdf_PDF *))__pyx_f_6python_6lhapdf_3PDF__set;
  __pyx_vtable_6python_6lhapdf_PDF._info = (PyObject *(*)(struct __pyx_obj_6python_6lhapdf_PDF *))__pyx_f_6python_6lhapdf_3PDF__info;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6python_6lhapdf_PDF = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6python_6lhapdf_PDF_spec, NULL); if (unlikely(!__pyx_ptype_6python_6lhapdf_PDF)) __PYX_ERR(0, 27, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6python_6lhapdf_PDF_spec, __pyx_ptype_6python_6lhapdf_PDF) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  #else
  __pyx_ptype_6python_6lhapdf_PDF = &__pyx_type_6python_6lhapdf_PDF;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6python_6lhapdf_PDF) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6python_6lhapdf_PDF->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6python_6lhapdf_PDF->tp_dictoffset && __pyx_ptype_6python_6lhapdf_PDF->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6python_6lhapdf_PDF->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_6python_6lhapdf_PDF, __pyx_vtabptr_6python_6lhapdf_PDF) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_6python_6lhapdf_PDF) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDF, (PyObject *) __pyx_ptype_6python_6lhapdf_PDF) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6python_6lhapdf_PDF) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  #endif
  __pyx_vtabptr_6python_6lhapdf_Info = &__pyx_vtable_6python_6lhapdf_Info;
  __pyx_vtable_6python_6lhapdf_Info.set_ptr = (PyObject *(*)(struct __pyx_obj_6python_6lhapdf_Info *, LHAPDF::Info *))__pyx_f_6python_6lhapdf_4Info_set_ptr;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6python_6lhapdf_Info = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6python_6lhapdf_Info_spec, NULL); if (unlikely(!__pyx_ptype_6python_6lhapdf_Info)) __PYX_ERR(0, 249, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6python_6lhapdf_Info_spec, __pyx_ptype_6python_6lhapdf_Info) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  #else
  __pyx_ptype_6python_6lhapdf_Info = &__pyx_type_6python_6lhapdf_Info;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6python_6lhapdf_Info) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6python_6lhapdf_Info->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6python_6lhapdf_Info->tp_dictoffset && __pyx_ptype_6python_6lhapdf_Info->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6python_6lhapdf_Info->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_6python_6lhapdf_Info, __pyx_vtabptr_6python_6lhapdf_Info) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_6python_6lhapdf_Info) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Info, (PyObject *) __pyx_ptype_6python_6lhapdf_Info) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6python_6lhapdf_Info) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6python_6lhapdf_PDFUncertainty = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6python_6lhapdf_PDFUncertainty_spec, NULL); if (unlikely(!__pyx_ptype_6python_6lhapdf_PDFUncertainty)) __PYX_ERR(0, 313, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6python_6lhapdf_PDFUncertainty_spec, __pyx_ptype_6python_6lhapdf_PDFUncertainty) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  #else
  __pyx_ptype_6python_6lhapdf_PDFUncertainty = &__pyx_type_6python_6lhapdf_PDFUncertainty;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6python_6lhapdf_PDFUncertainty) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6python_6lhapdf_PDFUncertainty->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6python_6lhapdf_PDFUncertainty->tp_dictoffset && __pyx_ptype_6python_6lhapdf_PDFUncertainty->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6python_6lhapdf_PDFUncertainty->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDFUncertainty, (PyObject *) __pyx_ptype_6python_6lhapdf_PDFUncertainty) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6python_6lhapdf_PDFUncertainty) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6python_6lhapdf_PDFErrInfo = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6python_6lhapdf_PDFErrInfo_spec, NULL); if (unlikely(!__pyx_ptype_6python_6lhapdf_PDFErrInfo)) __PYX_ERR(0, 442, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6python_6lhapdf_PDFErrInfo_spec, __pyx_ptype_6python_6lhapdf_PDFErrInfo) < 0) __PYX_ERR(0, 442, __pyx_L1_error)
  #else
  __pyx_ptype_6python_6lhapdf_PDFErrInfo = &__pyx_type_6python_6lhapdf_PDFErrInfo;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6python_6lhapdf_PDFErrInfo) < 0) __PYX_ERR(0, 442, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6python_6lhapdf_PDFErrInfo->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6python_6lhapdf_PDFErrInfo->tp_dictoffset && __pyx_ptype_6python_6lhapdf_PDFErrInfo->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6python_6lhapdf_PDFErrInfo->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDFErrInfo_2, (PyObject *) __pyx_ptype_6python_6lhapdf_PDFErrInfo) < 0) __PYX_ERR(0, 442, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6python_6lhapdf_PDFErrInfo) < 0) __PYX_ERR(0, 442, __pyx_L1_error)
  #endif
  __pyx_vtabptr_6python_6lhapdf_PDFSet = &__pyx_vtable_6python_6lhapdf_PDFSet;
  __pyx_vtable_6python_6lhapdf_PDFSet.set_ptr = (PyObject *(*)(struct __pyx_obj_6python_6lhapdf_PDFSet *, LHAPDF::PDFSet *))__pyx_f_6python_6lhapdf_6PDFSet_set_ptr;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6python_6lhapdf_PDFSet = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6python_6lhapdf_PDFSet_spec, NULL); if (unlikely(!__pyx_ptype_6python_6lhapdf_PDFSet)) __PYX_ERR(0, 494, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6python_6lhapdf_PDFSet_spec, __pyx_ptype_6python_6lhapdf_PDFSet) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  #else
  __pyx_ptype_6python_6lhapdf_PDFSet = &__pyx_type_6python_6lhapdf_PDFSet;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6python_6lhapdf_PDFSet) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6python_6lhapdf_PDFSet->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6python_6lhapdf_PDFSet->tp_dictoffset && __pyx_ptype_6python_6lhapdf_PDFSet->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6python_6lhapdf_PDFSet->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, "__len__"); if (unlikely(!wrapper)) __PYX_ERR(0, 494, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6python_6lhapdf_6PDFSet_2__len__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6python_6lhapdf_6PDFSet_2__len__.doc = __pyx_doc_6python_6lhapdf_6PDFSet_2__len__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6python_6lhapdf_6PDFSet_2__len__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_vtabptr_6python_6lhapdf_PDFSet) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_6python_6lhapdf_PDFSet) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDFSet, (PyObject *) __pyx_ptype_6python_6lhapdf_PDFSet) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6python_6lhapdf_PDFSet) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  #endif
  __pyx_vtabptr_6python_6lhapdf_PDFInfo = &__pyx_vtable_6python_6lhapdf_PDFInfo;
  __pyx_vtable_6python_6lhapdf_PDFInfo.__pyx_base = *__pyx_vtabptr_6python_6lhapdf_Info;
  __pyx_vtable_6python_6lhapdf_PDFInfo.set_parent = (PyObject *(*)(struct __pyx_obj_6python_6lhapdf_PDFInfo *, PyObject *))__pyx_f_6python_6lhapdf_7PDFInfo_set_parent;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_6python_6lhapdf_Info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6python_6lhapdf_PDFInfo = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6python_6lhapdf_PDFInfo_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_6python_6lhapdf_PDFInfo)) __PYX_ERR(0, 650, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6python_6lhapdf_PDFInfo_spec, __pyx_ptype_6python_6lhapdf_PDFInfo) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
  #else
  __pyx_ptype_6python_6lhapdf_PDFInfo = &__pyx_type_6python_6lhapdf_PDFInfo;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_6python_6lhapdf_PDFInfo->tp_base = __pyx_ptype_6python_6lhapdf_Info;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6python_6lhapdf_PDFInfo) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6python_6lhapdf_PDFInfo->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6python_6lhapdf_PDFInfo->tp_dictoffset && __pyx_ptype_6python_6lhapdf_PDFInfo->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6python_6lhapdf_PDFInfo->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_6python_6lhapdf_PDFInfo, __pyx_vtabptr_6python_6lhapdf_PDFInfo) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_6python_6lhapdf_PDFInfo) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDFInfo, (PyObject *) __pyx_ptype_6python_6lhapdf_PDFInfo) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6python_6lhapdf_PDFInfo) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
  #endif
  __pyx_vtabptr_6python_6lhapdf_AlphaS = &__pyx_vtable_6python_6lhapdf_AlphaS;
  __pyx_vtable_6python_6lhapdf_AlphaS.set_ptr = (PyObject *(*)(struct __pyx_obj_6python_6lhapdf_AlphaS *, LHAPDF::AlphaS *))__pyx_f_6python_6lhapdf_6AlphaS_set_ptr;
  __pyx_vtable_6python_6lhapdf_AlphaS.set_parent = (PyObject *(*)(struct __pyx_obj_6python_6lhapdf_AlphaS *, PyObject *))__pyx_f_6python_6lhapdf_6AlphaS_set_parent;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6python_6lhapdf_AlphaS = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6python_6lhapdf_AlphaS_spec, NULL); if (unlikely(!__pyx_ptype_6python_6lhapdf_AlphaS)) __PYX_ERR(0, 692, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6python_6lhapdf_AlphaS_spec, __pyx_ptype_6python_6lhapdf_AlphaS) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
  #else
  __pyx_ptype_6python_6lhapdf_AlphaS = &__pyx_type_6python_6lhapdf_AlphaS;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6python_6lhapdf_AlphaS) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6python_6lhapdf_AlphaS->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6python_6lhapdf_AlphaS->tp_dictoffset && __pyx_ptype_6python_6lhapdf_AlphaS->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6python_6lhapdf_AlphaS->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_vtabptr_6python_6lhapdf_AlphaS) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_6python_6lhapdf_AlphaS) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AlphaS, (PyObject *) __pyx_ptype_6python_6lhapdf_AlphaS) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6python_6lhapdf_AlphaS) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)(&PyType_Type)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype___Pyx_EnumMeta = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__Pyx_EnumMeta_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype___Pyx_EnumMeta)) __PYX_ERR(1, 16, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__Pyx_EnumMeta_spec, __pyx_ptype___Pyx_EnumMeta) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  #else
  __pyx_ptype___Pyx_EnumMeta = &__Pyx_EnumMeta;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype___Pyx_EnumMeta->tp_dealloc = (&PyType_Type)->tp_dealloc;
  __pyx_ptype___Pyx_EnumMeta->tp_base = (&PyType_Type);
  __pyx_ptype___Pyx_EnumMeta->tp_new = (&PyType_Type)->tp_new;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype___Pyx_EnumMeta) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype___Pyx_EnumMeta->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype___Pyx_EnumMeta->tp_dictoffset && __pyx_ptype___Pyx_EnumMeta->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype___Pyx_EnumMeta->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype___Pyx_EnumMeta) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_lhapdf(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_lhapdf},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "lhapdf",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initlhapdf(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initlhapdf(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_lhapdf(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_lhapdf(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_lhapdf(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'lhapdf' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("lhapdf", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "lhapdf" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_lhapdf(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_python__lhapdf) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "python.lhapdf")) {
      if (unlikely((PyDict_SetItemString(modules, "python.lhapdf", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "EnumBase":10
 * cdef object __Pyx_OrderedDict
 * 
 * if PY_VERSION_HEX >= 0x03060000:             # <<<<<<<<<<<<<<
 *     __Pyx_OrderedDict = dict
 * else:
 */
  __pyx_t_2 = (PY_VERSION_HEX >= 0x03060000);
  if (__pyx_t_2) {

    /* "EnumBase":11
 * 
 * if PY_VERSION_HEX >= 0x03060000:
 *     __Pyx_OrderedDict = dict             # <<<<<<<<<<<<<<
 * else:
 *     from collections import OrderedDict as __Pyx_OrderedDict
 */
    __Pyx_INCREF((PyObject *)(&PyDict_Type));
    __Pyx_XGOTREF(__Pyx_OrderedDict);
    __Pyx_DECREF_SET(__Pyx_OrderedDict, ((PyObject *)(&PyDict_Type)));
    __Pyx_GIVEREF((PyObject *)(&PyDict_Type));

    /* "EnumBase":10
 * cdef object __Pyx_OrderedDict
 * 
 * if PY_VERSION_HEX >= 0x03060000:             # <<<<<<<<<<<<<<
 *     __Pyx_OrderedDict = dict
 * else:
 */
    goto __pyx_L2;
  }

  /* "EnumBase":13
 *     __Pyx_OrderedDict = dict
 * else:
 *     from collections import OrderedDict as __Pyx_OrderedDict             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  /*else*/ {
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_OrderedDict);
    __Pyx_GIVEREF(__pyx_n_s_OrderedDict);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_OrderedDict)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_3, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XGOTREF(__Pyx_OrderedDict);
    __Pyx_DECREF_SET(__Pyx_OrderedDict, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L2:;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_8EnumBase_14__Pyx_EnumMeta_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Pyx_EnumMeta___reduce_cython, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype___Pyx_EnumMeta, __pyx_n_s_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype___Pyx_EnumMeta);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle___Pyx_EnumMeta__set_state(self, __pyx_state)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_8EnumBase_14__Pyx_EnumMeta_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Pyx_EnumMeta___setstate_cython, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype___Pyx_EnumMeta, __pyx_n_s_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype___Pyx_EnumMeta);

  /* "EnumBase":27
 * 
 * cdef object __Pyx_EnumBase
 * class __Pyx_EnumBase(int, metaclass=__Pyx_EnumMeta):             # <<<<<<<<<<<<<<
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF((PyObject *)(&PyInt_Type));
  __Pyx_GIVEREF((PyObject *)(&PyInt_Type));
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)(&PyInt_Type)))) __PYX_ERR(1, 27, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PEP560_update_bases(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_Py3MetaclassPrepare(((PyObject *)__pyx_ptype___Pyx_EnumMeta), __pyx_t_3, __pyx_n_s_Pyx_EnumBase, __pyx_n_s_Pyx_EnumBase, __pyx_t_5, __pyx_n_s_EnumBase, (PyObject *) NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_3 != __pyx_t_4) {
    if (unlikely((PyDict_SetItemString(__pyx_t_6, "__orig_bases__", __pyx_t_4) < 0))) __PYX_ERR(1, 27, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "EnumBase":28
 * cdef object __Pyx_EnumBase
 * class __Pyx_EnumBase(int, metaclass=__Pyx_EnumMeta):
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_8EnumBase_14__Pyx_EnumBase_1__new__, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Pyx_EnumBase___new, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__13);
  if (__Pyx_SetNewInClass(__pyx_t_6, __pyx_n_s_new, __pyx_t_4) < 0) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "EnumBase":39
 *         cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_8EnumBase_14__Pyx_EnumBase_3__repr__, 0, __pyx_n_s_Pyx_EnumBase___repr, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_repr, __pyx_t_4) < 0) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "EnumBase":41
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_8EnumBase_14__Pyx_EnumBase_5__str__, 0, __pyx_n_s_Pyx_EnumBase___str, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_str, __pyx_t_4) < 0) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "EnumBase":27
 * 
 * cdef object __Pyx_EnumBase
 * class __Pyx_EnumBase(int, metaclass=__Pyx_EnumMeta):             # <<<<<<<<<<<<<<
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(((PyObject *)__pyx_ptype___Pyx_EnumMeta), __pyx_n_s_Pyx_EnumBase, __pyx_t_3, __pyx_t_6, __pyx_t_5, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_XGOTREF(__Pyx_EnumBase);
  __Pyx_DECREF_SET(__Pyx_EnumBase, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "EnumBase":44
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 *     from enum import IntEnum as __Pyx_EnumBase
 * 
 */
  __pyx_t_2 = (PY_VERSION_HEX >= 0x03040000);
  if (__pyx_t_2) {

    /* "EnumBase":45
 * 
 * if PY_VERSION_HEX >= 0x03040000:
 *     from enum import IntEnum as __Pyx_EnumBase             # <<<<<<<<<<<<<<
 * 
 * cdef object __Pyx_FlagBase
 */
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_IntEnum);
    __Pyx_GIVEREF(__pyx_n_s_IntEnum);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_IntEnum)) __PYX_ERR(1, 45, __pyx_L1_error);
    __pyx_t_5 = __Pyx_Import(__pyx_n_s_enum, __pyx_t_3, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_IntEnum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XGOTREF(__Pyx_EnumBase);
    __Pyx_DECREF_SET(__Pyx_EnumBase, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "EnumBase":44
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 *     from enum import IntEnum as __Pyx_EnumBase
 * 
 */
  }

  /* "EnumBase":48
 * 
 * cdef object __Pyx_FlagBase
 * class __Pyx_FlagBase(int, metaclass=__Pyx_EnumMeta):             # <<<<<<<<<<<<<<
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 */
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF((PyObject *)(&PyInt_Type));
  __Pyx_GIVEREF((PyObject *)(&PyInt_Type));
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)(&PyInt_Type)))) __PYX_ERR(1, 48, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PEP560_update_bases(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(((PyObject *)__pyx_ptype___Pyx_EnumMeta), __pyx_t_3, __pyx_n_s_Pyx_FlagBase, __pyx_n_s_Pyx_FlagBase, __pyx_t_6, __pyx_n_s_EnumBase, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__pyx_t_3 != __pyx_t_5) {
    if (unlikely((PyDict_SetItemString(__pyx_t_4, "__orig_bases__", __pyx_t_5) < 0))) __PYX_ERR(1, 48, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumBase":49
 * cdef object __Pyx_FlagBase
 * class __Pyx_FlagBase(int, metaclass=__Pyx_EnumMeta):
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8EnumBase_14__Pyx_FlagBase_1__new__, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Pyx_FlagBase___new, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__13);
  if (__Pyx_SetNewInClass(__pyx_t_4, __pyx_n_s_new, __pyx_t_5) < 0) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumBase":62
 *             cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8EnumBase_14__Pyx_FlagBase_3__repr__, 0, __pyx_n_s_Pyx_FlagBase___repr, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_repr, __pyx_t_5) < 0) __PYX_ERR(1, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumBase":64
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8EnumBase_14__Pyx_FlagBase_5__str__, 0, __pyx_n_s_Pyx_FlagBase___str, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_str, __pyx_t_5) < 0) __PYX_ERR(1, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumBase":48
 * 
 * cdef object __Pyx_FlagBase
 * class __Pyx_FlagBase(int, metaclass=__Pyx_EnumMeta):             # <<<<<<<<<<<<<<
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(((PyObject *)__pyx_ptype___Pyx_EnumMeta), __pyx_n_s_Pyx_FlagBase, __pyx_t_3, __pyx_t_4, __pyx_t_6, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XGOTREF(__Pyx_FlagBase);
  __Pyx_DECREF_SET(__Pyx_FlagBase, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "EnumBase":67
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 * if PY_VERSION_HEX >= 0x03060000:             # <<<<<<<<<<<<<<
 *     from enum import IntFlag as __Pyx_FlagBase
 * 
 */
  __pyx_t_2 = (PY_VERSION_HEX >= 0x03060000);
  if (__pyx_t_2) {

    /* "EnumBase":68
 * 
 * if PY_VERSION_HEX >= 0x03060000:
 *     from enum import IntFlag as __Pyx_FlagBase             # <<<<<<<<<<<<<<
 * 
 */
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_IntFlag);
    __Pyx_GIVEREF(__pyx_n_s_IntFlag);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_IntFlag)) __PYX_ERR(1, 68, __pyx_L1_error);
    __pyx_t_6 = __Pyx_Import(__pyx_n_s_enum, __pyx_t_3, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_IntFlag); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XGOTREF(__Pyx_FlagBase);
    __Pyx_DECREF_SET(__Pyx_FlagBase, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "EnumBase":67
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 * if PY_VERSION_HEX >= 0x03060000:             # <<<<<<<<<<<<<<
 *     from enum import IntFlag as __Pyx_FlagBase
 * 
 */
  }

  /* "(tree fragment)":1
 * def __pyx_unpickle___Pyx_EnumMeta(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_8EnumBase_1__pyx_unpickle___Pyx_EnumMeta, 0, __pyx_n_s_pyx_unpickle___Pyx_EnumMeta, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle___Pyx_EnumMeta, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "EnumType":76
 *     object __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(FlavorScheme value)
 * 
 * cdef dict __Pyx_globals = globals()             # <<<<<<<<<<<<<<
 * if PY_VERSION_HEX >= 0x03060000:
 * 
 */
  __pyx_t_6 = __Pyx_Globals(); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(PyDict_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_6))) __PYX_ERR(1, 76, __pyx_L1_error)
  __Pyx_XGOTREF(__Pyx_globals);
  __Pyx_DECREF_SET(__Pyx_globals, ((PyObject*)__pyx_t_6));
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;

  /* "EnumType":77
 * 
 * cdef dict __Pyx_globals = globals()
 * if PY_VERSION_HEX >= 0x03060000:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (PY_VERSION_HEX >= 0x03060000);
  if (__pyx_t_2) {

    /* "EnumType":81
 * 
 *     FlavorScheme = __Pyx_FlagBase('FlavorScheme', [
 *         ('FIXED', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(FIXED)),             # <<<<<<<<<<<<<<
 *         ('VARIABLE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(VARIABLE)),
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(__pyx_e_6python_6lhapdf_FIXED); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_FIXED);
    __Pyx_GIVEREF(__pyx_n_s_FIXED);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_FIXED)) __PYX_ERR(1, 81, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6)) __PYX_ERR(1, 81, __pyx_L1_error);
    __pyx_t_6 = 0;

    /* "EnumType":82
 *     FlavorScheme = __Pyx_FlagBase('FlavorScheme', [
 *         ('FIXED', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(FIXED)),
 *         ('VARIABLE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(VARIABLE)),             # <<<<<<<<<<<<<<
 * 
 *     ], module=__Pyx_globals.get("__module__", 'python.lhapdf'))
 */
    __pyx_t_6 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(__pyx_e_6python_6lhapdf_VARIABLE); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_VARIABLE);
    __Pyx_GIVEREF(__pyx_n_s_VARIABLE);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_VARIABLE)) __PYX_ERR(1, 82, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6)) __PYX_ERR(1, 82, __pyx_L1_error);
    __pyx_t_6 = 0;

    /* "EnumType":80
 * 
 * 
 *     FlavorScheme = __Pyx_FlagBase('FlavorScheme', [             # <<<<<<<<<<<<<<
 *         ('FIXED', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(FIXED)),
 *         ('VARIABLE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(VARIABLE)),
 */
    __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_3)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4)) __PYX_ERR(1, 80, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_FlavorScheme);
    __Pyx_GIVEREF(__pyx_n_s_FlavorScheme);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_FlavorScheme)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6)) __PYX_ERR(1, 80, __pyx_L1_error);
    __pyx_t_6 = 0;

    /* "EnumType":84
 *         ('VARIABLE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(VARIABLE)),
 * 
 *     ], module=__Pyx_globals.get("__module__", 'python.lhapdf'))             # <<<<<<<<<<<<<<
 * 
 *     if PY_VERSION_HEX >= 0x030B0000:
 */
    __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
      __PYX_ERR(1, 84, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__Pyx_globals, __pyx_n_s_module, __pyx_kp_s_python_lhapdf); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_module_2, __pyx_t_3) < 0) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EnumType":80
 * 
 * 
 *     FlavorScheme = __Pyx_FlagBase('FlavorScheme', [             # <<<<<<<<<<<<<<
 *         ('FIXED', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(FIXED)),
 *         ('VARIABLE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(VARIABLE)),
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__Pyx_FlagBase, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_FlavorScheme, __pyx_t_3) < 0) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EnumType":86
 *     ], module=__Pyx_globals.get("__module__", 'python.lhapdf'))
 * 
 *     if PY_VERSION_HEX >= 0x030B0000:             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = (PY_VERSION_HEX >= 0x030B0000);
    if (__pyx_t_2) {

      /* "EnumType":91
 * 
 * 
 *         FlavorScheme._member_names_ = list(FlavorScheme.__members__)             # <<<<<<<<<<<<<<
 * 
 *     __Pyx_globals['FIXED'] = FlavorScheme.FIXED
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FlavorScheme); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_members); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PySequence_ListKeepNew(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_FlavorScheme); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_PyObject_SetAttrStr(__pyx_t_6, __pyx_n_s_member_names, __pyx_t_3) < 0) __PYX_ERR(1, 91, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "EnumType":86
 *     ], module=__Pyx_globals.get("__module__", 'python.lhapdf'))
 * 
 *     if PY_VERSION_HEX >= 0x030B0000:             # <<<<<<<<<<<<<<
 * 
 * 
 */
    }

    /* "EnumType":93
 *         FlavorScheme._member_names_ = list(FlavorScheme.__members__)
 * 
 *     __Pyx_globals['FIXED'] = FlavorScheme.FIXED             # <<<<<<<<<<<<<<
 *     __Pyx_globals['VARIABLE'] = FlavorScheme.VARIABLE
 * else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_FlavorScheme); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_FIXED); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 93, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_FIXED, __pyx_t_3) < 0))) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EnumType":94
 * 
 *     __Pyx_globals['FIXED'] = FlavorScheme.FIXED
 *     __Pyx_globals['VARIABLE'] = FlavorScheme.VARIABLE             # <<<<<<<<<<<<<<
 * else:
 *     class FlavorScheme(__Pyx_FlagBase):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FlavorScheme); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_VARIABLE); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 94, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_VARIABLE, __pyx_t_6) < 0))) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "EnumType":77
 * 
 * cdef dict __Pyx_globals = globals()
 * if PY_VERSION_HEX >= 0x03060000:             # <<<<<<<<<<<<<<
 * 
 * 
 */
    goto __pyx_L5;
  }

  /* "EnumType":96
 *     __Pyx_globals['VARIABLE'] = FlavorScheme.VARIABLE
 * else:
 *     class FlavorScheme(__Pyx_FlagBase):             # <<<<<<<<<<<<<<
 *         pass
 *     __Pyx_globals['FIXED'] = FlavorScheme(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(FIXED), 'FIXED')
 */
  /*else*/ {
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__Pyx_FlagBase);
    __Pyx_GIVEREF(__Pyx_FlagBase);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __Pyx_FlagBase)) __PYX_ERR(1, 96, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PEP560_update_bases(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_4, __pyx_t_3, __pyx_n_s_FlavorScheme, __pyx_n_s_FlavorScheme, (PyObject *) NULL, __pyx_n_s_EnumType, (PyObject *) NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3 != __pyx_t_6) {
      if (unlikely((PyDict_SetItemString(__pyx_t_5, "__orig_bases__", __pyx_t_6) < 0))) __PYX_ERR(1, 96, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_Py3ClassCreate(__pyx_t_4, __pyx_n_s_FlavorScheme, __pyx_t_3, __pyx_t_5, NULL, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_FlavorScheme, __pyx_t_6) < 0) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EnumType":98
 *     class FlavorScheme(__Pyx_FlagBase):
 *         pass
 *     __Pyx_globals['FIXED'] = FlavorScheme(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(FIXED), 'FIXED')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['VARIABLE'] = FlavorScheme(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(VARIABLE), 'VARIABLE')
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FlavorScheme); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(__pyx_e_6python_6lhapdf_FIXED); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4)) __PYX_ERR(1, 98, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_FIXED);
    __Pyx_GIVEREF(__pyx_n_s_FIXED);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_FIXED)) __PYX_ERR(1, 98, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 98, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_FIXED, __pyx_t_4) < 0))) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "EnumType":99
 *         pass
 *     __Pyx_globals['FIXED'] = FlavorScheme(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(FIXED), 'FIXED')
 *     __Pyx_globals['VARIABLE'] = FlavorScheme(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(VARIABLE), 'VARIABLE')             # <<<<<<<<<<<<<<
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_FlavorScheme); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(__pyx_e_6python_6lhapdf_VARIABLE); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5)) __PYX_ERR(1, 99, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_VARIABLE);
    __Pyx_GIVEREF(__pyx_n_s_VARIABLE);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_VARIABLE)) __PYX_ERR(1, 99, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 99, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_VARIABLE, __pyx_t_5) < 0))) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_L5:;

  /* "EnumType":76
 *     object __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(PIDCode value)
 * 
 * cdef dict __Pyx_globals = globals()             # <<<<<<<<<<<<<<
 * if PY_VERSION_HEX >= 0x03060000:
 * 
 */
  __pyx_t_5 = __Pyx_Globals(); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyDict_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_5))) __PYX_ERR(1, 76, __pyx_L1_error)
  __Pyx_XGOTREF(__Pyx_globals);
  __Pyx_DECREF_SET(__Pyx_globals, ((PyObject*)__pyx_t_5));
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;

  /* "EnumType":77
 * 
 * cdef dict __Pyx_globals = globals()
 * if PY_VERSION_HEX >= 0x03060000:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (PY_VERSION_HEX >= 0x03060000);
  if (__pyx_t_2) {

    /* "EnumType":81
 * 
 *     PIDCode = __Pyx_FlagBase('PIDCode', [
 *         ('ATOP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ATOP)),             # <<<<<<<<<<<<<<
 *         ('ABOTTOM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ABOTTOM)),
 *         ('ACHARM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ACHARM)),
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_ATOP); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_ATOP);
    __Pyx_GIVEREF(__pyx_n_s_ATOP);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ATOP)) __PYX_ERR(1, 81, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5)) __PYX_ERR(1, 81, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":82
 *     PIDCode = __Pyx_FlagBase('PIDCode', [
 *         ('ATOP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ATOP)),
 *         ('ABOTTOM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ABOTTOM)),             # <<<<<<<<<<<<<<
 *         ('ACHARM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ACHARM)),
 *         ('ASTRANGE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ASTRANGE)),
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_ABOTTOM); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_ABOTTOM);
    __Pyx_GIVEREF(__pyx_n_s_ABOTTOM);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_ABOTTOM)) __PYX_ERR(1, 82, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(1, 82, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":83
 *         ('ATOP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ATOP)),
 *         ('ABOTTOM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ABOTTOM)),
 *         ('ACHARM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ACHARM)),             # <<<<<<<<<<<<<<
 *         ('ASTRANGE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ASTRANGE)),
 *         ('AUP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(AUP)),
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_ACHARM); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_ACHARM);
    __Pyx_GIVEREF(__pyx_n_s_ACHARM);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_ACHARM)) __PYX_ERR(1, 83, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5)) __PYX_ERR(1, 83, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":84
 *         ('ABOTTOM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ABOTTOM)),
 *         ('ACHARM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ACHARM)),
 *         ('ASTRANGE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ASTRANGE)),             # <<<<<<<<<<<<<<
 *         ('AUP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(AUP)),
 *         ('ADOWN', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ADOWN)),
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_ASTRANGE); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_n_s_ASTRANGE);
    __Pyx_GIVEREF(__pyx_n_s_ASTRANGE);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_ASTRANGE)) __PYX_ERR(1, 84, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5)) __PYX_ERR(1, 84, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":85
 *         ('ACHARM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ACHARM)),
 *         ('ASTRANGE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ASTRANGE)),
 *         ('AUP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(AUP)),             # <<<<<<<<<<<<<<
 *         ('ADOWN', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ADOWN)),
 *         ('GLUON', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(GLUON)),
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_AUP); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_n_s_AUP);
    __Pyx_GIVEREF(__pyx_n_s_AUP);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_AUP)) __PYX_ERR(1, 85, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5)) __PYX_ERR(1, 85, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":86
 *         ('ASTRANGE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ASTRANGE)),
 *         ('AUP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(AUP)),
 *         ('ADOWN', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ADOWN)),             # <<<<<<<<<<<<<<
 *         ('GLUON', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(GLUON)),
 *         ('DOWN', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(DOWN)),
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_ADOWN); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_n_s_ADOWN);
    __Pyx_GIVEREF(__pyx_n_s_ADOWN);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_ADOWN)) __PYX_ERR(1, 86, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5)) __PYX_ERR(1, 86, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":87
 *         ('AUP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(AUP)),
 *         ('ADOWN', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ADOWN)),
 *         ('GLUON', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(GLUON)),             # <<<<<<<<<<<<<<
 *         ('DOWN', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(DOWN)),
 *         ('UP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(UP)),
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_GLUON); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_n_s_GLUON);
    __Pyx_GIVEREF(__pyx_n_s_GLUON);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_s_GLUON)) __PYX_ERR(1, 87, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_5)) __PYX_ERR(1, 87, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":88
 *         ('ADOWN', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ADOWN)),
 *         ('GLUON', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(GLUON)),
 *         ('DOWN', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(DOWN)),             # <<<<<<<<<<<<<<
 *         ('UP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(UP)),
 *         ('STRANGE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(STRANGE)),
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_DOWN); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_n_s_DOWN);
    __Pyx_GIVEREF(__pyx_n_s_DOWN);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_n_s_DOWN)) __PYX_ERR(1, 88, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_5)) __PYX_ERR(1, 88, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":89
 *         ('GLUON', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(GLUON)),
 *         ('DOWN', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(DOWN)),
 *         ('UP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(UP)),             # <<<<<<<<<<<<<<
 *         ('STRANGE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(STRANGE)),
 *         ('CHARM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(CHARM)),
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_UP); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_n_s_UP);
    __Pyx_GIVEREF(__pyx_n_s_UP);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_n_s_UP)) __PYX_ERR(1, 89, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_5)) __PYX_ERR(1, 89, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":90
 *         ('DOWN', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(DOWN)),
 *         ('UP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(UP)),
 *         ('STRANGE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(STRANGE)),             # <<<<<<<<<<<<<<
 *         ('CHARM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(CHARM)),
 *         ('BOTTOM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(BOTTOM)),
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_STRANGE); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_INCREF(__pyx_n_s_STRANGE);
    __Pyx_GIVEREF(__pyx_n_s_STRANGE);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_n_s_STRANGE)) __PYX_ERR(1, 90, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_5)) __PYX_ERR(1, 90, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":91
 *         ('UP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(UP)),
 *         ('STRANGE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(STRANGE)),
 *         ('CHARM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(CHARM)),             # <<<<<<<<<<<<<<
 *         ('BOTTOM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(BOTTOM)),
 *         ('TOP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(TOP)),
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_CHARM); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_INCREF(__pyx_n_s_CHARM);
    __Pyx_GIVEREF(__pyx_n_s_CHARM);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_n_s_CHARM)) __PYX_ERR(1, 91, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_5)) __PYX_ERR(1, 91, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":92
 *         ('STRANGE', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(STRANGE)),
 *         ('CHARM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(CHARM)),
 *         ('BOTTOM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(BOTTOM)),             # <<<<<<<<<<<<<<
 *         ('TOP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(TOP)),
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_BOTTOM); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_INCREF(__pyx_n_s_BOTTOM);
    __Pyx_GIVEREF(__pyx_n_s_BOTTOM);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_s_BOTTOM)) __PYX_ERR(1, 92, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_5)) __PYX_ERR(1, 92, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":93
 *         ('CHARM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(CHARM)),
 *         ('BOTTOM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(BOTTOM)),
 *         ('TOP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(TOP)),             # <<<<<<<<<<<<<<
 * 
 *     ], module=__Pyx_globals.get("__module__", 'python.lhapdf'))
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_TOP); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_n_s_TOP);
    __Pyx_GIVEREF(__pyx_n_s_TOP);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_n_s_TOP)) __PYX_ERR(1, 93, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_5)) __PYX_ERR(1, 93, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":80
 * 
 * 
 *     PIDCode = __Pyx_FlagBase('PIDCode', [             # <<<<<<<<<<<<<<
 *         ('ATOP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ATOP)),
 *         ('ABOTTOM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ABOTTOM)),
 */
    __pyx_t_5 = PyList_New(13); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_6)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 3, __pyx_t_7)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_8);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 4, __pyx_t_8)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_9);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 5, __pyx_t_9)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_10);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 6, __pyx_t_10)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_11);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 7, __pyx_t_11)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_12);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 8, __pyx_t_12)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_13);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 9, __pyx_t_13)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_14);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 10, __pyx_t_14)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_15);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 11, __pyx_t_15)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_16);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 12, __pyx_t_16)) __PYX_ERR(1, 80, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    __pyx_t_12 = 0;
    __pyx_t_13 = 0;
    __pyx_t_14 = 0;
    __pyx_t_15 = 0;
    __pyx_t_16 = 0;
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_n_s_PIDCode);
    __Pyx_GIVEREF(__pyx_n_s_PIDCode);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_n_s_PIDCode)) __PYX_ERR(1, 80, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_5)) __PYX_ERR(1, 80, __pyx_L1_error);
    __pyx_t_5 = 0;

    /* "EnumType":95
 *         ('TOP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(TOP)),
 * 
 *     ], module=__Pyx_globals.get("__module__", 'python.lhapdf'))             # <<<<<<<<<<<<<<
 * 
 *     if PY_VERSION_HEX >= 0x030B0000:
 */
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
      __PYX_ERR(1, 95, __pyx_L1_error)
    }
    __pyx_t_15 = __Pyx_PyDict_GetItemDefault(__Pyx_globals, __pyx_n_s_module, __pyx_kp_s_python_lhapdf); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_module_2, __pyx_t_15) < 0) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "EnumType":80
 * 
 * 
 *     PIDCode = __Pyx_FlagBase('PIDCode', [             # <<<<<<<<<<<<<<
 *         ('ATOP', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ATOP)),
 *         ('ABOTTOM', __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ABOTTOM)),
 */
    __pyx_t_15 = __Pyx_PyObject_Call(__Pyx_FlagBase, __pyx_t_16, __pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_PIDCode, __pyx_t_15) < 0) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "EnumType":97
 *     ], module=__Pyx_globals.get("__module__", 'python.lhapdf'))
 * 
 *     if PY_VERSION_HEX >= 0x030B0000:             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = (PY_VERSION_HEX >= 0x030B0000);
    if (__pyx_t_2) {

      /* "EnumType":102
 * 
 * 
 *         PIDCode._member_names_ = list(PIDCode.__members__)             # <<<<<<<<<<<<<<
 * 
 *     __Pyx_globals['ATOP'] = PIDCode.ATOP
 */
      __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_members); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = __Pyx_PySequence_ListKeepNew(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_PyObject_SetAttrStr(__pyx_t_5, __pyx_n_s_member_names, __pyx_t_15) < 0) __PYX_ERR(1, 102, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "EnumType":97
 *     ], module=__Pyx_globals.get("__module__", 'python.lhapdf'))
 * 
 *     if PY_VERSION_HEX >= 0x030B0000:             # <<<<<<<<<<<<<<
 * 
 * 
 */
    }

    /* "EnumType":104
 *         PIDCode._member_names_ = list(PIDCode.__members__)
 * 
 *     __Pyx_globals['ATOP'] = PIDCode.ATOP             # <<<<<<<<<<<<<<
 *     __Pyx_globals['ABOTTOM'] = PIDCode.ABOTTOM
 *     __Pyx_globals['ACHARM'] = PIDCode.ACHARM
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ATOP); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 104, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_ATOP, __pyx_t_15) < 0))) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "EnumType":105
 * 
 *     __Pyx_globals['ATOP'] = PIDCode.ATOP
 *     __Pyx_globals['ABOTTOM'] = PIDCode.ABOTTOM             # <<<<<<<<<<<<<<
 *     __Pyx_globals['ACHARM'] = PIDCode.ACHARM
 *     __Pyx_globals['ASTRANGE'] = PIDCode.ASTRANGE
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_ABOTTOM); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 105, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_ABOTTOM, __pyx_t_5) < 0))) __PYX_ERR(1, 105, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "EnumType":106
 *     __Pyx_globals['ATOP'] = PIDCode.ATOP
 *     __Pyx_globals['ABOTTOM'] = PIDCode.ABOTTOM
 *     __Pyx_globals['ACHARM'] = PIDCode.ACHARM             # <<<<<<<<<<<<<<
 *     __Pyx_globals['ASTRANGE'] = PIDCode.ASTRANGE
 *     __Pyx_globals['AUP'] = PIDCode.AUP
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ACHARM); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 106, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_ACHARM, __pyx_t_15) < 0))) __PYX_ERR(1, 106, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "EnumType":107
 *     __Pyx_globals['ABOTTOM'] = PIDCode.ABOTTOM
 *     __Pyx_globals['ACHARM'] = PIDCode.ACHARM
 *     __Pyx_globals['ASTRANGE'] = PIDCode.ASTRANGE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['AUP'] = PIDCode.AUP
 *     __Pyx_globals['ADOWN'] = PIDCode.ADOWN
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_ASTRANGE); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 107, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_ASTRANGE, __pyx_t_5) < 0))) __PYX_ERR(1, 107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "EnumType":108
 *     __Pyx_globals['ACHARM'] = PIDCode.ACHARM
 *     __Pyx_globals['ASTRANGE'] = PIDCode.ASTRANGE
 *     __Pyx_globals['AUP'] = PIDCode.AUP             # <<<<<<<<<<<<<<
 *     __Pyx_globals['ADOWN'] = PIDCode.ADOWN
 *     __Pyx_globals['GLUON'] = PIDCode.GLUON
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_AUP); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 108, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_AUP, __pyx_t_15) < 0))) __PYX_ERR(1, 108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "EnumType":109
 *     __Pyx_globals['ASTRANGE'] = PIDCode.ASTRANGE
 *     __Pyx_globals['AUP'] = PIDCode.AUP
 *     __Pyx_globals['ADOWN'] = PIDCode.ADOWN             # <<<<<<<<<<<<<<
 *     __Pyx_globals['GLUON'] = PIDCode.GLUON
 *     __Pyx_globals['DOWN'] = PIDCode.DOWN
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_ADOWN); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 109, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_ADOWN, __pyx_t_5) < 0))) __PYX_ERR(1, 109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "EnumType":110
 *     __Pyx_globals['AUP'] = PIDCode.AUP
 *     __Pyx_globals['ADOWN'] = PIDCode.ADOWN
 *     __Pyx_globals['GLUON'] = PIDCode.GLUON             # <<<<<<<<<<<<<<
 *     __Pyx_globals['DOWN'] = PIDCode.DOWN
 *     __Pyx_globals['UP'] = PIDCode.UP
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_GLUON); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 110, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_GLUON, __pyx_t_15) < 0))) __PYX_ERR(1, 110, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "EnumType":111
 *     __Pyx_globals['ADOWN'] = PIDCode.ADOWN
 *     __Pyx_globals['GLUON'] = PIDCode.GLUON
 *     __Pyx_globals['DOWN'] = PIDCode.DOWN             # <<<<<<<<<<<<<<
 *     __Pyx_globals['UP'] = PIDCode.UP
 *     __Pyx_globals['STRANGE'] = PIDCode.STRANGE
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_DOWN); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 111, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_DOWN, __pyx_t_5) < 0))) __PYX_ERR(1, 111, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "EnumType":112
 *     __Pyx_globals['GLUON'] = PIDCode.GLUON
 *     __Pyx_globals['DOWN'] = PIDCode.DOWN
 *     __Pyx_globals['UP'] = PIDCode.UP             # <<<<<<<<<<<<<<
 *     __Pyx_globals['STRANGE'] = PIDCode.STRANGE
 *     __Pyx_globals['CHARM'] = PIDCode.CHARM
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_UP); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 112, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_UP, __pyx_t_15) < 0))) __PYX_ERR(1, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "EnumType":113
 *     __Pyx_globals['DOWN'] = PIDCode.DOWN
 *     __Pyx_globals['UP'] = PIDCode.UP
 *     __Pyx_globals['STRANGE'] = PIDCode.STRANGE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['CHARM'] = PIDCode.CHARM
 *     __Pyx_globals['BOTTOM'] = PIDCode.BOTTOM
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_STRANGE); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 113, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_STRANGE, __pyx_t_5) < 0))) __PYX_ERR(1, 113, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "EnumType":114
 *     __Pyx_globals['UP'] = PIDCode.UP
 *     __Pyx_globals['STRANGE'] = PIDCode.STRANGE
 *     __Pyx_globals['CHARM'] = PIDCode.CHARM             # <<<<<<<<<<<<<<
 *     __Pyx_globals['BOTTOM'] = PIDCode.BOTTOM
 *     __Pyx_globals['TOP'] = PIDCode.TOP
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_CHARM); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 114, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_CHARM, __pyx_t_15) < 0))) __PYX_ERR(1, 114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "EnumType":115
 *     __Pyx_globals['STRANGE'] = PIDCode.STRANGE
 *     __Pyx_globals['CHARM'] = PIDCode.CHARM
 *     __Pyx_globals['BOTTOM'] = PIDCode.BOTTOM             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TOP'] = PIDCode.TOP
 * else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_BOTTOM); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 115, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_BOTTOM, __pyx_t_5) < 0))) __PYX_ERR(1, 115, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "EnumType":116
 *     __Pyx_globals['CHARM'] = PIDCode.CHARM
 *     __Pyx_globals['BOTTOM'] = PIDCode.BOTTOM
 *     __Pyx_globals['TOP'] = PIDCode.TOP             # <<<<<<<<<<<<<<
 * else:
 *     class PIDCode(__Pyx_FlagBase):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_TOP); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 116, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_TOP, __pyx_t_15) < 0))) __PYX_ERR(1, 116, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "EnumType":77
 * 
 * cdef dict __Pyx_globals = globals()
 * if PY_VERSION_HEX >= 0x03060000:             # <<<<<<<<<<<<<<
 * 
 * 
 */
    goto __pyx_L7;
  }

  /* "EnumType":118
 *     __Pyx_globals['TOP'] = PIDCode.TOP
 * else:
 *     class PIDCode(__Pyx_FlagBase):             # <<<<<<<<<<<<<<
 *         pass
 *     __Pyx_globals['ATOP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ATOP), 'ATOP')
 */
  /*else*/ {
    __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_INCREF(__Pyx_FlagBase);
    __Pyx_GIVEREF(__Pyx_FlagBase);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __Pyx_FlagBase)) __PYX_ERR(1, 118, __pyx_L1_error);
    __pyx_t_5 = __Pyx_PEP560_update_bases(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = __Pyx_CalculateMetaclass(NULL, __pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_14 = __Pyx_Py3MetaclassPrepare(__pyx_t_16, __pyx_t_5, __pyx_n_s_PIDCode, __pyx_n_s_PIDCode, (PyObject *) NULL, __pyx_n_s_EnumType, (PyObject *) NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_5 != __pyx_t_15) {
      if (unlikely((PyDict_SetItemString(__pyx_t_14, "__orig_bases__", __pyx_t_15) < 0))) __PYX_ERR(1, 118, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_Py3ClassCreate(__pyx_t_16, __pyx_n_s_PIDCode, __pyx_t_5, __pyx_t_14, NULL, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_PIDCode, __pyx_t_15) < 0) __PYX_ERR(1, 118, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "EnumType":120
 *     class PIDCode(__Pyx_FlagBase):
 *         pass
 *     __Pyx_globals['ATOP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ATOP), 'ATOP')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['ABOTTOM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ABOTTOM), 'ABOTTOM')
 *     __Pyx_globals['ACHARM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ACHARM), 'ACHARM')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_ATOP); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_16);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_16)) __PYX_ERR(1, 120, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_ATOP);
    __Pyx_GIVEREF(__pyx_n_s_ATOP);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_n_s_ATOP)) __PYX_ERR(1, 120, __pyx_L1_error);
    __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 120, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_ATOP, __pyx_t_16) < 0))) __PYX_ERR(1, 120, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "EnumType":121
 *         pass
 *     __Pyx_globals['ATOP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ATOP), 'ATOP')
 *     __Pyx_globals['ABOTTOM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ABOTTOM), 'ABOTTOM')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['ACHARM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ACHARM), 'ACHARM')
 *     __Pyx_globals['ASTRANGE'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ASTRANGE), 'ASTRANGE')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_14 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_ABOTTOM); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_14);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14)) __PYX_ERR(1, 121, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_ABOTTOM);
    __Pyx_GIVEREF(__pyx_n_s_ABOTTOM);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_ABOTTOM)) __PYX_ERR(1, 121, __pyx_L1_error);
    __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_5, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 121, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_ABOTTOM, __pyx_t_14) < 0))) __PYX_ERR(1, 121, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "EnumType":122
 *     __Pyx_globals['ATOP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ATOP), 'ATOP')
 *     __Pyx_globals['ABOTTOM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ABOTTOM), 'ABOTTOM')
 *     __Pyx_globals['ACHARM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ACHARM), 'ACHARM')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['ASTRANGE'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ASTRANGE), 'ASTRANGE')
 *     __Pyx_globals['AUP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(AUP), 'AUP')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_ACHARM); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_5)) __PYX_ERR(1, 122, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_ACHARM);
    __Pyx_GIVEREF(__pyx_n_s_ACHARM);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_n_s_ACHARM)) __PYX_ERR(1, 122, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 122, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_ACHARM, __pyx_t_5) < 0))) __PYX_ERR(1, 122, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "EnumType":123
 *     __Pyx_globals['ABOTTOM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ABOTTOM), 'ABOTTOM')
 *     __Pyx_globals['ACHARM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ACHARM), 'ACHARM')
 *     __Pyx_globals['ASTRANGE'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ASTRANGE), 'ASTRANGE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['AUP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(AUP), 'AUP')
 *     __Pyx_globals['ADOWN'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ADOWN), 'ADOWN')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_ASTRANGE); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_16);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_16)) __PYX_ERR(1, 123, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_ASTRANGE);
    __Pyx_GIVEREF(__pyx_n_s_ASTRANGE);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_n_s_ASTRANGE)) __PYX_ERR(1, 123, __pyx_L1_error);
    __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 123, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_ASTRANGE, __pyx_t_16) < 0))) __PYX_ERR(1, 123, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "EnumType":124
 *     __Pyx_globals['ACHARM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ACHARM), 'ACHARM')
 *     __Pyx_globals['ASTRANGE'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ASTRANGE), 'ASTRANGE')
 *     __Pyx_globals['AUP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(AUP), 'AUP')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['ADOWN'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ADOWN), 'ADOWN')
 *     __Pyx_globals['GLUON'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(GLUON), 'GLUON')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_14 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_AUP); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_14);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14)) __PYX_ERR(1, 124, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_AUP);
    __Pyx_GIVEREF(__pyx_n_s_AUP);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_AUP)) __PYX_ERR(1, 124, __pyx_L1_error);
    __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_5, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 124, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_AUP, __pyx_t_14) < 0))) __PYX_ERR(1, 124, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "EnumType":125
 *     __Pyx_globals['ASTRANGE'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ASTRANGE), 'ASTRANGE')
 *     __Pyx_globals['AUP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(AUP), 'AUP')
 *     __Pyx_globals['ADOWN'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ADOWN), 'ADOWN')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['GLUON'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(GLUON), 'GLUON')
 *     __Pyx_globals['DOWN'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(DOWN), 'DOWN')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_ADOWN); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_5)) __PYX_ERR(1, 125, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_ADOWN);
    __Pyx_GIVEREF(__pyx_n_s_ADOWN);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_n_s_ADOWN)) __PYX_ERR(1, 125, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 125, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_ADOWN, __pyx_t_5) < 0))) __PYX_ERR(1, 125, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "EnumType":126
 *     __Pyx_globals['AUP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(AUP), 'AUP')
 *     __Pyx_globals['ADOWN'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ADOWN), 'ADOWN')
 *     __Pyx_globals['GLUON'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(GLUON), 'GLUON')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['DOWN'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(DOWN), 'DOWN')
 *     __Pyx_globals['UP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(UP), 'UP')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_GLUON); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_16);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_16)) __PYX_ERR(1, 126, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_GLUON);
    __Pyx_GIVEREF(__pyx_n_s_GLUON);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_n_s_GLUON)) __PYX_ERR(1, 126, __pyx_L1_error);
    __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 126, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_GLUON, __pyx_t_16) < 0))) __PYX_ERR(1, 126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "EnumType":127
 *     __Pyx_globals['ADOWN'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(ADOWN), 'ADOWN')
 *     __Pyx_globals['GLUON'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(GLUON), 'GLUON')
 *     __Pyx_globals['DOWN'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(DOWN), 'DOWN')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['UP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(UP), 'UP')
 *     __Pyx_globals['STRANGE'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(STRANGE), 'STRANGE')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_14 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_DOWN); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_14);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14)) __PYX_ERR(1, 127, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_DOWN);
    __Pyx_GIVEREF(__pyx_n_s_DOWN);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_DOWN)) __PYX_ERR(1, 127, __pyx_L1_error);
    __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_5, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 127, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_DOWN, __pyx_t_14) < 0))) __PYX_ERR(1, 127, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "EnumType":128
 *     __Pyx_globals['GLUON'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(GLUON), 'GLUON')
 *     __Pyx_globals['DOWN'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(DOWN), 'DOWN')
 *     __Pyx_globals['UP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(UP), 'UP')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['STRANGE'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(STRANGE), 'STRANGE')
 *     __Pyx_globals['CHARM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(CHARM), 'CHARM')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_UP); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_5)) __PYX_ERR(1, 128, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_UP);
    __Pyx_GIVEREF(__pyx_n_s_UP);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_n_s_UP)) __PYX_ERR(1, 128, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 128, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_UP, __pyx_t_5) < 0))) __PYX_ERR(1, 128, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "EnumType":129
 *     __Pyx_globals['DOWN'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(DOWN), 'DOWN')
 *     __Pyx_globals['UP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(UP), 'UP')
 *     __Pyx_globals['STRANGE'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(STRANGE), 'STRANGE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['CHARM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(CHARM), 'CHARM')
 *     __Pyx_globals['BOTTOM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(BOTTOM), 'BOTTOM')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_STRANGE); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_16);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_16)) __PYX_ERR(1, 129, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_STRANGE);
    __Pyx_GIVEREF(__pyx_n_s_STRANGE);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_n_s_STRANGE)) __PYX_ERR(1, 129, __pyx_L1_error);
    __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 129, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_STRANGE, __pyx_t_16) < 0))) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "EnumType":130
 *     __Pyx_globals['UP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(UP), 'UP')
 *     __Pyx_globals['STRANGE'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(STRANGE), 'STRANGE')
 *     __Pyx_globals['CHARM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(CHARM), 'CHARM')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['BOTTOM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(BOTTOM), 'BOTTOM')
 *     __Pyx_globals['TOP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(TOP), 'TOP')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_14 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_CHARM); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_14);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14)) __PYX_ERR(1, 130, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_CHARM);
    __Pyx_GIVEREF(__pyx_n_s_CHARM);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_CHARM)) __PYX_ERR(1, 130, __pyx_L1_error);
    __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_5, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 130, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_CHARM, __pyx_t_14) < 0))) __PYX_ERR(1, 130, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "EnumType":131
 *     __Pyx_globals['STRANGE'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(STRANGE), 'STRANGE')
 *     __Pyx_globals['CHARM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(CHARM), 'CHARM')
 *     __Pyx_globals['BOTTOM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(BOTTOM), 'BOTTOM')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['TOP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(TOP), 'TOP')
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_BOTTOM); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_5)) __PYX_ERR(1, 131, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_BOTTOM);
    __Pyx_GIVEREF(__pyx_n_s_BOTTOM);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_n_s_BOTTOM)) __PYX_ERR(1, 131, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 131, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_BOTTOM, __pyx_t_5) < 0))) __PYX_ERR(1, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "EnumType":132
 *     __Pyx_globals['CHARM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(CHARM), 'CHARM')
 *     __Pyx_globals['BOTTOM'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(BOTTOM), 'BOTTOM')
 *     __Pyx_globals['TOP'] = PIDCode(__Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(TOP), 'TOP')             # <<<<<<<<<<<<<<
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PIDCode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(__pyx_e_6python_6lhapdf_TOP); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_16);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_16)) __PYX_ERR(1, 132, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_TOP);
    __Pyx_GIVEREF(__pyx_n_s_TOP);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_n_s_TOP)) __PYX_ERR(1, 132, __pyx_L1_error);
    __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 132, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__Pyx_globals, __pyx_n_s_TOP, __pyx_t_16) < 0))) __PYX_ERR(1, 132, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  }
  __pyx_L7:;

  /* "python/lhapdf.pyx":10
 * from libcpp.vector cimport vector
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip as zip
 * except ImportError: # python 3.x version
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_17, &__pyx_t_18);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_17);
    __Pyx_XGOTREF(__pyx_t_18);
    /*try:*/ {

      /* "python/lhapdf.pyx":11
 * 
 * try:
 *     from itertools import izip as zip             # <<<<<<<<<<<<<<
 * except ImportError: # python 3.x version
 *     pass
 */
      __pyx_t_16 = PyList_New(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 11, __pyx_L9_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_INCREF(__pyx_n_s_izip);
      __Pyx_GIVEREF(__pyx_n_s_izip);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_n_s_izip)) __PYX_ERR(0, 11, __pyx_L9_error);
      __pyx_t_14 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_16, -1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 11, __pyx_L9_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_ImportFrom(__pyx_t_14, __pyx_n_s_izip); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 11, __pyx_L9_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_zip, __pyx_t_16) < 0) __PYX_ERR(0, 11, __pyx_L9_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "python/lhapdf.pyx":10
 * from libcpp.vector cimport vector
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip as zip
 * except ImportError: # python 3.x version
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    goto __pyx_L14_try_end;
    __pyx_L9_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "python/lhapdf.pyx":12
 * try:
 *     from itertools import izip as zip
 * except ImportError: # python 3.x version             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
    __pyx_t_19 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_19) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L10_exception_handled;
    }
    goto __pyx_L11_except_error;

    /* "python/lhapdf.pyx":10
 * from libcpp.vector cimport vector
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip as zip
 * except ImportError: # python 3.x version
 */
    __pyx_L11_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_17);
    __Pyx_XGIVEREF(__pyx_t_18);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_17, __pyx_t_18);
    goto __pyx_L1_error;
    __pyx_L10_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_17);
    __Pyx_XGIVEREF(__pyx_t_18);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_17, __pyx_t_18);
    __pyx_L14_try_end:;
  }

  /* "python/lhapdf.pyx":94
 *     #     return obj
 * 
 *     def alphasQ(self, q):             # <<<<<<<<<<<<<<
 *         "Return alpha_s at q"
 *         return self._ptr.alphasQ(q)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_3alphasQ, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_alphasQ, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_alphasQ, __pyx_t_14) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":98
 *         return self._ptr.alphasQ(q)
 * 
 *     def alphasQ2(self, q2):             # <<<<<<<<<<<<<<
 *         "Return alpha_s at q2"
 *         return self._ptr.alphasQ2(q2)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_5alphasQ2, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_alphasQ2, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_alphasQ2, __pyx_t_14) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":102
 *         return self._ptr.alphasQ2(q2)
 * 
 *     def xfxQ(self, *args):             # <<<<<<<<<<<<<<
 *         """Return the PDF xf(x,Q2) value for the given parton ID, x, and Q values.
 * 
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_7xfxQ, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_xfxQ, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_xfxQ, __pyx_t_14) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":141
 *             raise Exception("Wrong number of arguments given to xfxQ: 2 or 3 required, %d provided" % len(args))
 * 
 *     def xfxQ2(self, *args):             # <<<<<<<<<<<<<<
 *         """Return the PDF xf(x,Q2) value for the given parton ID, x, and Q2 values.
 * 
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_9xfxQ2, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_xfxQ2, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_xfxQ2, __pyx_t_14) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":180
 *             raise Exception("Wrong number of arguments given to xfxQ2: 2 or 3 required, %d provided" % len(args))
 * 
 *     def inRangeQ(self, q):             # <<<<<<<<<<<<<<
 *         "Check if the specified Q value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ(q)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_11inRangeQ, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_inRangeQ, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_inRangeQ, __pyx_t_14) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":184
 *         return self._ptr.inRangeQ(q)
 * 
 *     def inRangeQ2(self, q2):             # <<<<<<<<<<<<<<
 *         "Check if the specified Q2 value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ2(q2)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_13inRangeQ2, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_inRangeQ2, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_inRangeQ2, __pyx_t_14) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":188
 *         return self._ptr.inRangeQ2(q2)
 * 
 *     def inRangeX(self, x):             # <<<<<<<<<<<<<<
 *         "Check if the specified x value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeX(x)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_15inRangeX, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_inRangeX, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_inRangeX, __pyx_t_14) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":192
 *         return self._ptr.inRangeX(x)
 * 
 *     def inRangeXQ(self, x, q):             # <<<<<<<<<<<<<<
 *         "Check if the specified x and Q values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ(x, q)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_17inRangeXQ, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_inRangeXQ, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_inRangeXQ, __pyx_t_14) < 0) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":196
 *         return self._ptr.inRangeXQ(x, q)
 * 
 *     def inRangeXQ2(self, x, q2):             # <<<<<<<<<<<<<<
 *         "Check if the specified x and Q2 values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ2(x, q2)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_19inRangeXQ2, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_inRangeXQ2, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_inRangeXQ2, __pyx_t_14) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":200
 *         return self._ptr.inRangeXQ2(x, q2)
 * 
 *     def flavors(self):             # <<<<<<<<<<<<<<
 *         "Return the list of parton IDs supported by this PDF."
 *         # TODO: Use Cython >= 0.17 STL type coercion when available
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_21flavors, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_flavors, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_flavors, __pyx_t_14) < 0) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":206
 *         return [flavs[i] for i in xrange(flavs.size())]
 * 
 *     def hasFlavor(self, pid):             # <<<<<<<<<<<<<<
 *         "Check if the specified parton ID is contained in this PDF."
 *         return self._ptr.hasFlavor(pid)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_23hasFlavor, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_hasFlavor, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_hasFlavor, __pyx_t_14) < 0) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":210
 *         return self._ptr.hasFlavor(pid)
 * 
 *     def quarkMass(self, int id):             # <<<<<<<<<<<<<<
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_25quarkMass, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_quarkMass, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_quarkMass, __pyx_t_14) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":214
 *         return self._ptr.quarkMass(id)
 * 
 *     def quarkThreshold(self, int id):             # <<<<<<<<<<<<<<
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_27quarkThreshold, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_quarkThreshold, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_quarkThreshold, __pyx_t_14) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":223
 *         return obj
 * 
 *     def set(self):             # <<<<<<<<<<<<<<
 *         "Return the corresponding PDFSet"
 *         return self._set()
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_29set, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_set, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_set, __pyx_t_14) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":233
 *         return obj
 * 
 *     def info(self):             # <<<<<<<<<<<<<<
 *         "Return the corresponding PDFInfo"
 *         return self._info()
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_31info, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF_info, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_info, __pyx_t_14) < 0) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "python/lhapdf.pyx":237
 *         return self._info()
 * 
 *     def _print(self):             # <<<<<<<<<<<<<<
 *         "Print a short summary to stdout"
 *         self._ptr._print()
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_33_print, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF__print, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDF, __pyx_n_s_print_2, __pyx_t_14) < 0) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDF);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_37__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF___reduce_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_14) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3PDF_39__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDF___setstate_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_14) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":261
 *     #     return self._ptr.metadata()
 * 
 *     def keys(self):             # <<<<<<<<<<<<<<
 *         "Get the list of metadata keys"
 *         return self._ptr.keys()
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_4Info_1keys, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Info_keys, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_Info, __pyx_n_s_keys, __pyx_t_14) < 0) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_Info);

  /* "python/lhapdf.pyx":265
 *         return self._ptr.keys()
 * 
 *     def keys_local(self):             # <<<<<<<<<<<<<<
 *         "Get the list of metadata keys at local level (config/set/member)"
 *         return self._ptr.keys_local()
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_4Info_3keys_local, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Info_keys_local, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_Info, __pyx_n_s_keys_local, __pyx_t_14) < 0) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_Info);

  /* "python/lhapdf.pyx":269
 *         return self._ptr.keys_local()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(key)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_4Info_5has_key, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Info_has_key, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_Info, __pyx_n_s_has_key, __pyx_t_14) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_Info);

  /* "python/lhapdf.pyx":273
 *         return self._ptr.has_key(key)
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(key)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_4Info_7has_key_local, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Info_has_key_local, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_Info, __pyx_n_s_has_key_local, __pyx_t_14) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_Info);

  /* "python/lhapdf.pyx":281
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         """\
 *         Returns metadata entry for this key if it exists, otherwise returns a fallback value.
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_4Info_9get_entry, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Info_get_entry, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_14, __pyx_tuple__13);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_Info, __pyx_n_s_get_entry, __pyx_t_14) < 0) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_Info);

  /* "python/lhapdf.pyx":304
 *         return rtn
 * 
 *     def set_entry(self, key, value):             # <<<<<<<<<<<<<<
 *         "Set a metadata key"
 *         self._ptr.set_entry(key, str(value))
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_4Info_11set_entry, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Info_set_entry, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_Info, __pyx_n_s_set_entry, __pyx_t_14) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_Info);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_4Info_15__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Info___reduce_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_14) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_4Info_17__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Info___setstate_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_14) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_14PDFUncertainty_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFUncertainty___reduce_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_14) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "Pickling of struct members such as self._obj must be explicitly requested with @auto_pickle(True)"
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_14PDFUncertainty_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFUncertainty___setstate_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_14) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_10PDFErrInfo_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFErrInfo___reduce_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_14) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._obj cannot be converted to a Python object for pickling"
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_10PDFErrInfo_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFErrInfo___setstate_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_14) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":563
 *         return self._ptr.errorConfLevel()
 * 
 *     def mkPDF(self, mem):             # <<<<<<<<<<<<<<
 *         cdef c.PDF* ptr = self._ptr.mkPDF(mem)
 *         cdef PDF obj
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_5mkPDF, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet_mkPDF, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_n_s_mkPDF, __pyx_t_14) < 0) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDFSet);

  /* "python/lhapdf.pyx":570
 *         return obj
 * 
 *     def mkPDFs(self):             # <<<<<<<<<<<<<<
 *         cdef vector[c.PDF*] ptrs = self._ptr.mkPDFs()
 *         cdef PDF obj
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_7mkPDFs, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet_mkPDFs, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_n_s_mkPDFs, __pyx_t_14) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDFSet);

  /* "python/lhapdf.pyx":584
 *     #     return self._ptr.metadata()
 * 
 *     def keys(self):             # <<<<<<<<<<<<<<
 *         "Return the total list of info keys"
 *         return self._ptr.keys()
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_9keys, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet_keys, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_n_s_keys, __pyx_t_14) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDFSet);

  /* "python/lhapdf.pyx":588
 *         return self._ptr.keys()
 * 
 *     def keys_local(self):             # <<<<<<<<<<<<<<
 *         "Return the list of info keys defined at local level (config/set/member)"
 *         return self._ptr.keys_local()
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_11keys_local, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet_keys_local, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_n_s_keys_local, __pyx_t_14) < 0) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDFSet);

  /* "python/lhapdf.pyx":592
 *         return self._ptr.keys_local()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(key)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_13has_key, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet_has_key, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_n_s_has_key, __pyx_t_14) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDFSet);

  /* "python/lhapdf.pyx":596
 *         return self._ptr.has_key(key)
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(key)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_15has_key_local, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet_has_key_local, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_n_s_has_key_local, __pyx_t_14) < 0) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDFSet);

  /* "python/lhapdf.pyx":604
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(key, str(fallback))
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_17get_entry, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet_get_entry, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_14, __pyx_tuple__13);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_n_s_get_entry, __pyx_t_14) < 0) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDFSet);

  /* "python/lhapdf.pyx":609
 *         return rtn if str(rtn) != str(fallback) else fallback
 * 
 *     def _print(self):             # <<<<<<<<<<<<<<
 *         "Print a short summary to stdout"
 *         self._ptr._print()
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_19_print, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet__print, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_n_s_print_2, __pyx_t_14) < 0) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDFSet);

  /* "python/lhapdf.pyx":613
 *         self._ptr._print()
 * 
 *     def uncertainty(self, vals, cl=68.268949, alternative=False):             # <<<<<<<<<<<<<<
 *         """\
 *         Return a PDFUncertainty object corresponding to central value and errors computed
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_21uncertainty, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet_uncertainty, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_14, __pyx_tuple__78);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_n_s_uncertainty, __pyx_t_14) < 0) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDFSet);

  /* "python/lhapdf.pyx":632
 *         return punc
 * 
 *     def correlation(self, valsA, valsB):             # <<<<<<<<<<<<<<
 *         """Return the PDF correlation between valsA and valsB using appropriate formulae for this set."""
 *         return self._ptr.correlation(valsA, valsB)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_23correlation, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet_correlation, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_n_s_correlation, __pyx_t_14) < 0) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDFSet);

  /* "python/lhapdf.pyx":636
 *         return self._ptr.correlation(valsA, valsB)
 * 
 *     def randomValueFromHessian(self, vals, randoms, symmetrise=True):             # <<<<<<<<<<<<<<
 *         """Return a random value from Hessian vals and Gaussian random numbers."""
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_25randomValueFromHessian, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet_randomValueFromHessian, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_14, __pyx_tuple__83);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_n_s_randomValueFromHessian, __pyx_t_14) < 0) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDFSet);

  /* "python/lhapdf.pyx":640
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)
 * 
 *     def _checkPdfType(self, pdftypes):             # <<<<<<<<<<<<<<
 *         """Check that the PdfType of each member matches the ErrorType of the set."""
 *         self._ptr._checkPdfType(pdftypes)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_27_checkPdfType, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet__checkPdfType, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_PDFSet, __pyx_n_s_checkPdfType, __pyx_t_14) < 0) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_PDFSet);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_31__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet___reduce_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_14) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6PDFSet_33__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSet___setstate_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_14) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_7PDFInfo_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFInfo___reduce_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_14) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_7PDFInfo_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFInfo___setstate_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_14) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":711
 *         return self._ptr.type()
 * 
 *     def alphasQ(self, double q):             # <<<<<<<<<<<<<<
 *         "Get alpha_s value at scale q"
 *         return self._ptr.alphasQ(q)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_1alphasQ, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_alphasQ, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_alphasQ, __pyx_t_14) < 0) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":715
 *         return self._ptr.alphasQ(q)
 * 
 *     def alphasQ2(self, double q2):             # <<<<<<<<<<<<<<
 *         "Get alpha_s value at scale q"
 *         return self._ptr.alphasQ2(q2)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_3alphasQ2, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_alphasQ2, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_alphasQ2, __pyx_t_14) < 0) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":719
 *         return self._ptr.alphasQ2(q2)
 * 
 *     def numFlavorsQ(self, double q):             # <<<<<<<<<<<<<<
 *         "Get number of active flavors at scale q"
 *         return self._ptr.numFlavorsQ(q)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_5numFlavorsQ, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_numFlavorsQ, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_numFlavorsQ, __pyx_t_14) < 0) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":723
 *         return self._ptr.numFlavorsQ(q)
 * 
 *     def numFlavorsQ2(self, double q2):             # <<<<<<<<<<<<<<
 *         "Get number of active flavors at scale q"
 *         return self._ptr.numFlavorsQ2(q2)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_7numFlavorsQ2, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_numFlavorsQ2, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_numFlavorsQ2, __pyx_t_14) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":727
 *         return self._ptr.numFlavorsQ2(q2)
 * 
 *     def quarkMass(self, int id):             # <<<<<<<<<<<<<<
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_9quarkMass, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_quarkMass, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_quarkMass, __pyx_t_14) < 0) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":731
 *         return self._ptr.quarkMass(id)
 * 
 *     def setQuarkMass(self, int id, double value):             # <<<<<<<<<<<<<<
 *         "Set mass of quark with PID code id"
 *         self._ptr.setQuarkMass(id, value)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_11setQuarkMass, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_setQuarkMass, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_setQuarkMass, __pyx_t_14) < 0) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":735
 *         self._ptr.setQuarkMass(id, value)
 * 
 *     def quarkThreshold(self, int id):             # <<<<<<<<<<<<<<
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_13quarkThreshold, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_quarkThreshold, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_quarkThreshold, __pyx_t_14) < 0) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":739
 *         return self._ptr.quarkThreshold(id)
 * 
 *     def setQuarkThreshold(self, int id, double value):             # <<<<<<<<<<<<<<
 *         "Set activation threshold of quark with PID code id"
 *         self._ptr.setQuarkThreshold(id, value)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_15setQuarkThreshold, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_setQuarkThreshold, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_setQuarkThreshold, __pyx_t_14) < 0) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":743
 *         self._ptr.setQuarkThreshold(id, value)
 * 
 *     def orderQCD(self):             # <<<<<<<<<<<<<<
 *         "Get the QCD running order (max num loops) for this alphaS"
 *         return self._ptr.orderQCD()
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_17orderQCD, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_orderQCD, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_orderQCD, __pyx_t_14) < 0) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":747
 *         return self._ptr.orderQCD()
 * 
 *     def setOrderQCD(self, int order):             # <<<<<<<<<<<<<<
 *         "Set the QCD running order (max num loops) for this alphaS"
 *         self._ptr.setOrderQCD(order)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_19setOrderQCD, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_setOrderQCD, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_setOrderQCD, __pyx_t_14) < 0) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":751
 *         self._ptr.setOrderQCD(order)
 * 
 *     def setMZ(self, double mz):             # <<<<<<<<<<<<<<
 *         "Set the Z mass (used in ODE solver)"
 *         self._ptr.setMZ(mz)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_21setMZ, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_setMZ, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_setMZ, __pyx_t_14) < 0) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":755
 *         self._ptr.setMZ(mz)
 * 
 *     def setAlphaSMZ(self, double alphas):             # <<<<<<<<<<<<<<
 *         "Set alpha_s at the Z mass (used in ODE solver)"
 *         self._ptr.setAlphaSMZ(alphas)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_23setAlphaSMZ, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_setAlphaSMZ, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_setAlphaSMZ, __pyx_t_14) < 0) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":759
 *         self._ptr.setAlphaSMZ(alphas)
 * 
 *     def setLambda(self, int id, double val):             # <<<<<<<<<<<<<<
 *         "Set the id'th LambdaQCD value (used in analytic solver)"
 *         self._ptr.setLambda(id, val)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_25setLambda, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_setLambda, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_setLambda, __pyx_t_14) < 0) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":763
 *         self._ptr.setLambda(id, val)
 * 
 *     def setFlavorScheme(self, scheme, int nf):             # <<<<<<<<<<<<<<
 *         """\
 *         Set the flavor scheme. nf is the fixed number (if FIXED)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_27setFlavorScheme, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_setFlavorScheme, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_setFlavorScheme, __pyx_t_14) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "python/lhapdf.pyx":786
 *         self._ptr.setFlavorScheme(s, nf)
 * 
 *     def flavorScheme(self, as_str=True):             # <<<<<<<<<<<<<<
 *          s = FlavorScheme(int(self._ptr.flavorScheme()))
 *          return s if not as_str else s.name
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_29flavorScheme, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS_flavorScheme, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_14, __pyx_tuple__83);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6python_6lhapdf_AlphaS, __pyx_n_s_flavorScheme, __pyx_t_14) < 0) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  PyType_Modified(__pyx_ptype_6python_6lhapdf_AlphaS);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_33__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS___reduce_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_14) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr cannot be converted to a Python object for pickling"
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_6AlphaS_35__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlphaS___setstate_cython, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__113)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_14) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":800
 * 
 * 
 * def getConfig():             # <<<<<<<<<<<<<<
 *     """Factory function to get the global config object."""
 *     cdef c.Info* ptr = &c.getConfig()
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_1getConfig, 0, __pyx_n_s_getConfig, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__115)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getConfig, __pyx_t_14) < 0) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":807
 *     return obj
 * 
 * def getPDFSet(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to get the specified PDF set."""
 *     cdef PDFSet obj = PDFSet.__new__(PDFSet)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_3getPDFSet, 0, __pyx_n_s_getPDFSet, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__117)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getPDFSet, __pyx_t_14) < 0) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":814
 *     return obj
 * 
 * def mkPDFs(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to make all the PDF objects in the specified set."""
 *     cdef vector[c.PDF*] ptrs = c.mkPDFs(setname)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_5mkPDFs, 0, __pyx_n_s_mkPDFs, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mkPDFs, __pyx_t_14) < 0) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":868
 *     return obj
 * 
 * def mkPDF(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a PDF object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_7mkPDF, 0, __pyx_n_s_mkPDF, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mkPDF, __pyx_t_14) < 0) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":885
 *         raise Exception("Unknown call signature")
 * 
 * def mkAlphaS(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a AlphaS object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_9mkAlphaS, 0, __pyx_n_s_mkAlphaS, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__122)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mkAlphaS, __pyx_t_14) < 0) __PYX_ERR(0, 885, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":902
 *         raise Exception("Unknown call signature")
 * 
 * def mkBareAlphaS(as_type):             # <<<<<<<<<<<<<<
 *     "Factory function to make a bare AlphaS object."
 *     return mkBareAlphaS_(as_type)
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_11mkBareAlphaS, 0, __pyx_n_s_mkBareAlphaS, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__124)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mkBareAlphaS, __pyx_t_14) < 0) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":907
 * 
 * 
 * def weightxQ(int id, double x, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_13weightxQ, 0, __pyx_n_s_weightxQ, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__126)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_14, __pyx_tuple__127);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weightxQ, __pyx_t_14) < 0) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":912
 *     return c.weightxQ(id, x, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxQ2(int id, double x, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_15weightxQ2, 0, __pyx_n_s_weightxQ2, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_14, __pyx_tuple__127);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weightxQ2, __pyx_t_14) < 0) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":917
 *     return c.weightxQ2(id, x, Q2, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ(int id1, int id2, double x1, double x2, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_17weightxxQ, 0, __pyx_n_s_weightxxQ, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__131)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_14, __pyx_tuple__127);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weightxxQ, __pyx_t_14) < 0) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":922
 *     return c.weightxxQ(id1, id2, x1, x2, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ2(int id1, int id2, double x1, double x2, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavor id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_19weightxxQ2, 0, __pyx_n_s_weightxxQ2, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__133)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_14, __pyx_tuple__127);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weightxxQ2, __pyx_t_14) < 0) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":929
 * 
 * 
 * def version():             # <<<<<<<<<<<<<<
 *     "Return the LHAPDF library version."
 *     return c.version()
 */
  __pyx_t_14 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_21version, 0, __pyx_n_s_version, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__134)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_t_14) < 0) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "python/lhapdf.pyx":933
 *     return c.version()
 * 
 * __version__ = version()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_version); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_16 = __Pyx_PyObject_CallNoArg(__pyx_t_14); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version_2, __pyx_t_16) < 0) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "python/lhapdf.pyx":936
 * 
 * 
 * def verbosity():             # <<<<<<<<<<<<<<
 *     "Get the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     return c.verbosity()
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_23verbosity, 0, __pyx_n_s_verbosity, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_verbosity, __pyx_t_16) < 0) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "python/lhapdf.pyx":940
 *     return c.verbosity()
 * 
 * def setVerbosity(vlevel):             # <<<<<<<<<<<<<<
 *     "Set the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     c.setVerbosity(vlevel)
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_25setVerbosity, 0, __pyx_n_s_setVerbosity, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setVerbosity, __pyx_t_16) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "python/lhapdf.pyx":945
 * 
 * 
 * def availablePDFSets():             # <<<<<<<<<<<<<<
 *     "Get the names of all the available PDF sets on this system."
 *     return c.availablePDFSets()
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_27availablePDFSets, 0, __pyx_n_s_availablePDFSets, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__138)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_availablePDFSets, __pyx_t_16) < 0) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "python/lhapdf.pyx":950
 * 
 * 
 * def paths():             # <<<<<<<<<<<<<<
 *     "Return the list of current PDF data search paths."
 *     return c.paths()
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_29paths, 0, __pyx_n_s_paths, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_paths, __pyx_t_16) < 0) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "python/lhapdf.pyx":954
 *     return c.paths()
 * 
 * def setPaths(newpaths):             # <<<<<<<<<<<<<<
 *     "Set the list of current PDF data search paths."
 *     c.setPaths([p for p in newpaths])  #< TODO: check if str auto-encode works without loop
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_31setPaths, 0, __pyx_n_s_setPaths, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setPaths, __pyx_t_16) < 0) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "python/lhapdf.pyx":958
 *     c.setPaths([p for p in newpaths])  #< TODO: check if str auto-encode works without loop
 * 
 * def pathsPrepend(newpath):             # <<<<<<<<<<<<<<
 *     "Prepend to the list of current PDF data search paths."
 *     c.pathsPrepend(newpath)
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_33pathsPrepend, 0, __pyx_n_s_pathsPrepend, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__143)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pathsPrepend, __pyx_t_16) < 0) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "python/lhapdf.pyx":962
 *     c.pathsPrepend(newpath)
 * 
 * def pathsAppend(newpath):             # <<<<<<<<<<<<<<
 *     "Append to the list of current PDF data search paths."
 *     c.pathsAppend(newpath)
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_35pathsAppend, 0, __pyx_n_s_pathsAppend, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__144)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pathsAppend, __pyx_t_16) < 0) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "python/lhapdf.pyx":966
 *     c.pathsAppend(newpath)
 * 
 * def findFile(filename):             # <<<<<<<<<<<<<<
 *     "Return the path to the found filename via the LHAPDF search mechanism, or None."
 *     cdef string path = c.findFile(filename)
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_6python_6lhapdf_37findFile, 0, __pyx_n_s_findFile, NULL, __pyx_kp_s_python_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__146)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_findFile, __pyx_t_16) < 0) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "python/lhapdf.pyx":1
 * #cython: embedsignature=True, c_string_type=str, c_string_encoding=utf8             # <<<<<<<<<<<<<<
 * 
 * from __future__ import print_function
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_16) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init python.lhapdf", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init python.lhapdf");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetAttr3 */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__3);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__4;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ImportDottedModuleRelFirst */
static PyObject *__Pyx_ImportDottedModuleRelFirst(PyObject *name, PyObject *parts_tuple) {
    PyObject *module;
    PyObject *from_list = NULL;
#if PY_MAJOR_VERSION < 3
    PyObject *star = __pyx_n_s__4;
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
#endif
    module = __Pyx_Import(name, from_list, -1);
    Py_XDECREF(from_list);
    if (module) {
        #if PY_MAJOR_VERSION >= 3
        if (parts_tuple) {
            module = __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
        }
        #endif
        return module;
    }
    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
        return NULL;
    PyErr_Clear();
    return __Pyx_ImportDottedModule(name, parts_tuple);
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    traverseproc tp_traverse = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc) != current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_traverse = __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc)) == current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_traverse)
        return tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    inquiry tp_clear = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_clear, inquiry) != current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_clear = __Pyx_PyType_GetSlot(type, tp_clear, inquiry)) == current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_clear)
        tp_clear(obj);
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* Py3UpdateBases */
static PyObject*
__Pyx_PEP560_update_bases(PyObject *bases)
{
    Py_ssize_t i, j, size_bases;
    PyObject *base, *meth, *new_base, *result, *new_bases = NULL;
    size_bases = PyTuple_GET_SIZE(bases);
    for (i = 0; i < size_bases; i++) {
        base  = PyTuple_GET_ITEM(bases, i);
        if (PyType_Check(base)) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        meth = __Pyx_PyObject_GetAttrStrNoError(base, __pyx_n_s_mro_entries);
        if (!meth && PyErr_Occurred()) {
            goto error;
        }
        if (!meth) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        new_base = __Pyx_PyObject_CallOneArg(meth, bases);
        Py_DECREF(meth);
        if (!new_base) {
            goto error;
        }
        if (!PyTuple_Check(new_base)) {
            PyErr_SetString(PyExc_TypeError,
                            "__mro_entries__ must return a tuple");
            Py_DECREF(new_base);
            goto error;
        }
        if (!new_bases) {
            if (!(new_bases = PyList_New(i))) {
                goto error;
            }
            for (j = 0; j < i; j++) {
                base = PyTuple_GET_ITEM(bases, j);
                PyList_SET_ITEM(new_bases, j, base);
                Py_INCREF(base);
            }
        }
        j = PyList_GET_SIZE(new_bases);
        if (PyList_SetSlice(new_bases, j, j, new_base) < 0) {
            goto error;
        }
        Py_DECREF(new_base);
    }
    if (!new_bases) {
        Py_INCREF(bases);
        return bases;
    }
    result = PyList_AsTuple(new_bases);
    Py_DECREF(new_bases);
    return result;
error:
    Py_XDECREF(new_bases);
    return NULL;
}

/* SetNewInClass */
static int __Pyx_SetNewInClass(PyObject *ns, PyObject *name, PyObject *value) {
#ifdef __Pyx_CyFunction_USED
    int ret;
    if (__Pyx_CyFunction_Check(value)) {
        PyObject *staticnew = PyStaticMethod_New(value);
        if (unlikely(!staticnew)) return -1;
        ret = __Pyx_SetNameInClass(ns, name, staticnew);
        Py_DECREF(staticnew);
        return ret;
    }
#endif
    return __Pyx_SetNameInClass(ns, name, value);
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases;
#if CYTHON_ASSUME_SAFE_MACROS
    nbases = PyTuple_GET_SIZE(bases);
#else
    nbases = PyTuple_Size(bases);
    if (nbases < 0) return NULL;
#endif
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
#if CYTHON_ASSUME_SAFE_MACROS
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *tmp = PyTuple_GetItem(bases, i);
        if (!tmp) return NULL;
#endif
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectLookupSpecial */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs[3] = {NULL, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
            Py_DECREF(prep);
        } else {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
#if PY_VERSION_HEX >= 0x03030000
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
#else
    CYTHON_MAYBE_UNUSED_VAR(qualname);
#endif
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
static int __Pyx_SetNamesPEP487(PyObject *type_obj) {
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *names_to_set, *key, *value, *set_name, *tmp;
    Py_ssize_t i = 0;
#if CYTHON_USE_TYPE_SLOTS
    names_to_set = PyDict_Copy(type->tp_dict);
#else
    {
        PyObject *d = PyObject_GetAttr(type_obj, __pyx_n_s_dict);
        names_to_set = NULL;
        if (likely(d)) {
            PyObject *names_to_set = PyDict_New();
            int ret = likely(names_to_set) ? PyDict_Update(names_to_set, d) : -1;
            Py_DECREF(d);
            if (unlikely(ret < 0))
                Py_CLEAR(names_to_set);
        }
    }
#endif
    if (unlikely(names_to_set == NULL))
        goto bad;
    while (PyDict_Next(names_to_set, &i, &key, &value)) {
        set_name = __Pyx_PyObject_LookupSpecialNoError(value, __pyx_n_s_set_name);
        if (unlikely(set_name != NULL)) {
            tmp = __Pyx_PyObject_Call2Args(set_name, type_obj, key);
            Py_DECREF(set_name);
            if (unlikely(tmp == NULL)) {
                __Pyx_TypeName value_type_name =
                    __Pyx_PyType_GetName(Py_TYPE(value));
                __Pyx_TypeName type_name = __Pyx_PyType_GetName(type);
                PyErr_Format(PyExc_RuntimeError,
#if PY_MAJOR_VERSION >= 3
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %R " "in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name, key, type_name);
#else
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %.100s in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name,
                    PyString_Check(key) ? PyString_AS_STRING(key) : "?",
                    type_name);
#endif
                goto bad;
            } else {
                Py_DECREF(tmp);
            }
        }
        else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
    Py_DECREF(names_to_set);
    return 0;
bad:
    Py_XDECREF(names_to_set);
    return -1;
}
static PyObject *__Pyx_InitSubclassPEP487(PyObject *type_obj, PyObject *mkw) {
#if CYTHON_USE_TYPE_SLOTS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *mro = type->tp_mro;
    Py_ssize_t i, nbases;
    if (unlikely(!mro)) goto done;
    (void) &__Pyx_GetBuiltinName;
    Py_INCREF(mro);
    nbases = PyTuple_GET_SIZE(mro);
    assert(PyTuple_GET_ITEM(mro, 0) == type_obj);
    for (i = 1; i < nbases-1; i++) {
        PyObject *base, *dict, *meth;
        base = PyTuple_GET_ITEM(mro, i);
        dict = ((PyTypeObject *)base)->tp_dict;
        meth = __Pyx_PyDict_GetItemStrWithError(dict, __pyx_n_s_init_subclass);
        if (unlikely(meth)) {
            descrgetfunc f = Py_TYPE(meth)->tp_descr_get;
            PyObject *res;
            Py_INCREF(meth);
            if (likely(f)) {
                res = f(meth, NULL, type_obj);
                Py_DECREF(meth);
                if (unlikely(!res)) goto bad;
                meth = res;
            }
            res = __Pyx_PyObject_FastCallDict(meth, NULL, 0, mkw);
            Py_DECREF(meth);
            if (unlikely(!res)) goto bad;
            Py_DECREF(res);
            goto done;
        } else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
done:
    Py_XDECREF(mro);
    return type_obj;
bad:
    Py_XDECREF(mro);
    Py_DECREF(type_obj);
    return NULL;
#else
    PyObject *super_type, *super, *func, *res;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    super_type = __Pyx_GetBuiltinName(__pyx_n_s_super);
#else
    super_type = (PyObject*) &PySuper_Type;
    (void) &__Pyx_GetBuiltinName;
#endif
    super = likely(super_type) ? __Pyx_PyObject_Call2Args(super_type, type_obj, type_obj) : NULL;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    Py_XDECREF(super_type);
#endif
    if (unlikely(!super)) {
        Py_CLEAR(type_obj);
        goto done;
    }
    func = __Pyx_PyObject_GetAttrStrNoError(super, __pyx_n_s_init_subclass);
    Py_DECREF(super);
    if (likely(!func)) {
        if (unlikely(PyErr_Occurred()))
            Py_CLEAR(type_obj);
        goto done;
    }
    res = __Pyx_PyObject_FastCallDict(func, NULL, 0, mkw);
    Py_DECREF(func);
    if (unlikely(!res))
        Py_CLEAR(type_obj);
    Py_XDECREF(res);
done:
    return type_obj;
#endif
}
#endif
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = NULL;
    PyObject *margs[4] = {NULL, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET,
#if PY_VERSION_HEX < 0x030600A4
        (metaclass == (PyObject*)&PyType_Type) ? NULL : mkw
#else
        mkw
#endif
    );
    Py_XDECREF(owned_metaclass);
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
    if (likely(result) && likely(PyType_Check(result))) {
        if (unlikely(__Pyx_SetNamesPEP487(result) < 0)) {
            Py_CLEAR(result);
        } else {
            result = __Pyx_InitSubclassPEP487(result, mkw);
        }
    }
#else
    (void) &__Pyx_GetBuiltinName;
#endif
    return result;
}

/* Globals */
static PyObject* __Pyx_Globals(void) {
    return __Pyx_NewRef(__pyx_d);
}

/* UnpackUnboundCMethod */
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
     METH_VARARGS | METH_KEYWORDS,
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #else
    if (likely(!__Pyx_CyOrPyCFunction_Check(method)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            target->method = unbound_method;
        }
    }
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if ((PY_VERSION_HEX >= 0x030600B1) && flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            #else
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            #endif
        } else if ((PY_VERSION_HEX >= 0x030700A0) && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE LHAPDF::AlphaS::FlavorScheme __Pyx_PyInt_As_LHAPDF_3a__3a_AlphaS_3a__3a_FlavorScheme(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const LHAPDF::AlphaS::FlavorScheme neg_one = (LHAPDF::AlphaS::FlavorScheme) -1, const_zero = (LHAPDF::AlphaS::FlavorScheme) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(LHAPDF::AlphaS::FlavorScheme) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(LHAPDF::AlphaS::FlavorScheme, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (LHAPDF::AlphaS::FlavorScheme) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(LHAPDF::AlphaS::FlavorScheme, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(LHAPDF::AlphaS::FlavorScheme, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) >= 2 * PyLong_SHIFT)) {
                                return (LHAPDF::AlphaS::FlavorScheme) (((((LHAPDF::AlphaS::FlavorScheme)digits[1]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(LHAPDF::AlphaS::FlavorScheme, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) >= 3 * PyLong_SHIFT)) {
                                return (LHAPDF::AlphaS::FlavorScheme) (((((((LHAPDF::AlphaS::FlavorScheme)digits[2]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[1]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(LHAPDF::AlphaS::FlavorScheme, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) >= 4 * PyLong_SHIFT)) {
                                return (LHAPDF::AlphaS::FlavorScheme) (((((((((LHAPDF::AlphaS::FlavorScheme)digits[3]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[2]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[1]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (LHAPDF::AlphaS::FlavorScheme) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(LHAPDF::AlphaS::FlavorScheme) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(LHAPDF::AlphaS::FlavorScheme, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(LHAPDF::AlphaS::FlavorScheme) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(LHAPDF::AlphaS::FlavorScheme, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(LHAPDF::AlphaS::FlavorScheme, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(LHAPDF::AlphaS::FlavorScheme, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) - 1 > 2 * PyLong_SHIFT)) {
                                return (LHAPDF::AlphaS::FlavorScheme) (((LHAPDF::AlphaS::FlavorScheme)-1)*(((((LHAPDF::AlphaS::FlavorScheme)digits[1]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(LHAPDF::AlphaS::FlavorScheme, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) - 1 > 2 * PyLong_SHIFT)) {
                                return (LHAPDF::AlphaS::FlavorScheme) ((((((LHAPDF::AlphaS::FlavorScheme)digits[1]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(LHAPDF::AlphaS::FlavorScheme, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) - 1 > 3 * PyLong_SHIFT)) {
                                return (LHAPDF::AlphaS::FlavorScheme) (((LHAPDF::AlphaS::FlavorScheme)-1)*(((((((LHAPDF::AlphaS::FlavorScheme)digits[2]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[1]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(LHAPDF::AlphaS::FlavorScheme, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) - 1 > 3 * PyLong_SHIFT)) {
                                return (LHAPDF::AlphaS::FlavorScheme) ((((((((LHAPDF::AlphaS::FlavorScheme)digits[2]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[1]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(LHAPDF::AlphaS::FlavorScheme, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) - 1 > 4 * PyLong_SHIFT)) {
                                return (LHAPDF::AlphaS::FlavorScheme) (((LHAPDF::AlphaS::FlavorScheme)-1)*(((((((((LHAPDF::AlphaS::FlavorScheme)digits[3]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[2]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[1]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(LHAPDF::AlphaS::FlavorScheme, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(LHAPDF::AlphaS::FlavorScheme) - 1 > 4 * PyLong_SHIFT)) {
                                return (LHAPDF::AlphaS::FlavorScheme) ((((((((((LHAPDF::AlphaS::FlavorScheme)digits[3]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[2]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[1]) << PyLong_SHIFT) | (LHAPDF::AlphaS::FlavorScheme)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(LHAPDF::AlphaS::FlavorScheme) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(LHAPDF::AlphaS::FlavorScheme, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(LHAPDF::AlphaS::FlavorScheme) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(LHAPDF::AlphaS::FlavorScheme, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (LHAPDF::AlphaS::FlavorScheme) -1;
    } else {
        LHAPDF::AlphaS::FlavorScheme val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (LHAPDF::AlphaS::FlavorScheme) -1;
        val = __Pyx_PyInt_As_LHAPDF_3a__3a_AlphaS_3a__3a_FlavorScheme(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to LHAPDF::AlphaS::FlavorScheme");
    return (LHAPDF::AlphaS::FlavorScheme) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to LHAPDF::AlphaS::FlavorScheme");
    return (LHAPDF::AlphaS::FlavorScheme) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_LHAPDF_3a__3a_AlphaS_3a__3a_FlavorScheme(LHAPDF::AlphaS::FlavorScheme value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const LHAPDF::AlphaS::FlavorScheme neg_one = (LHAPDF::AlphaS::FlavorScheme) -1, const_zero = (LHAPDF::AlphaS::FlavorScheme) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(LHAPDF::AlphaS::FlavorScheme) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(LHAPDF::AlphaS::FlavorScheme) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(LHAPDF::AlphaS::FlavorScheme) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(LHAPDF::AlphaS::FlavorScheme) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(LHAPDF::AlphaS::FlavorScheme) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(LHAPDF::AlphaS::FlavorScheme),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(LHAPDF::AlphaS::FlavorScheme));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_FlavorScheme(enum __pyx_t_6python_6lhapdf_FlavorScheme value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum __pyx_t_6python_6lhapdf_FlavorScheme neg_one = (enum __pyx_t_6python_6lhapdf_FlavorScheme) -1, const_zero = (enum __pyx_t_6python_6lhapdf_FlavorScheme) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_6python_6lhapdf_FlavorScheme) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_6python_6lhapdf_FlavorScheme) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_6python_6lhapdf_FlavorScheme) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_6python_6lhapdf_FlavorScheme) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_6python_6lhapdf_FlavorScheme) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_6python_6lhapdf_FlavorScheme),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum __pyx_t_6python_6lhapdf_FlavorScheme));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_6python_6lhapdf_PIDCode(enum __pyx_t_6python_6lhapdf_PIDCode value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum __pyx_t_6python_6lhapdf_PIDCode neg_one = (enum __pyx_t_6python_6lhapdf_PIDCode) -1, const_zero = (enum __pyx_t_6python_6lhapdf_PIDCode) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_6python_6lhapdf_PIDCode) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_6python_6lhapdf_PIDCode) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_6python_6lhapdf_PIDCode) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_6python_6lhapdf_PIDCode) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_6python_6lhapdf_PIDCode) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_6python_6lhapdf_PIDCode),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum __pyx_t_6python_6lhapdf_PIDCode));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name_2);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__147);
    }
    return name;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
